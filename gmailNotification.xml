<channel version="4.4.1">
  <id>27453cb3-aa47-4ab3-91c0-f34af75ffac8</id>
  <nextMetaDataId>3</nextMetaDataId>
  <name>gmailNotification</name>
  <description></description>
  <revision>2</revision>
  <sourceConnector version="4.4.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
      <pluginProperties/>
      <sourceConnectorProperties version="4.4.1">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="4.4.1">
      <elements/>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.4.1">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.4.1">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.4.1">
        <pluginProperties/>
        <destinationConnectorProperties version="4.4.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <scheme>FILE</scheme>
        <host>C:/Users/admin/Documents/reports</host>
        <outputPattern>${originalFilename}-${DATE}</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <keepConnectionOpen>true</keepConnectionOpen>
        <maxIdleTime>0</maxIdleTime>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>true</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="4.4.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.4.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.4.1">
        <elements/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="4.4.1">
      <metaDataId>2</metaDataId>
      <name>Email Notification</name>
      <properties class="com.mirth.connect.connectors.smtp.SmtpDispatcherProperties" version="4.4.1">
        <pluginProperties/>
        <destinationConnectorProperties version="4.4.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <smtpHost>smtp.gmail.com</smtpHost>
        <smtpPort>587</smtpPort>
        <overrideLocalBinding>false</overrideLocalBinding>
        <localAddress>0.0.0.0</localAddress>
        <localPort>0</localPort>
        <timeout>5000</timeout>
        <encryption>TLS</encryption>
        <authentication>true</authentication>
        <username>raginiponnu102017@gmail.com</username>
        <password>Ragini@123</password>
        <to>raginiponnu102017@gmail.com</to>
        <from>Ragini@123</from>
        <cc></cc>
        <bcc></bcc>
        <replyTo></replyTo>
        <headers class="linked-hash-map"/>
        <headersVariable></headersVariable>
        <isUseHeadersVariable>false</isUseHeadersVariable>
        <subject>Employee Report</subject>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <html>false</html>
        <body>Employee report</body>
        <attachments/>
        <attachmentsVariable></attachmentsVariable>
        <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
      </properties>
      <transformer version="4.4.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.4.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.4.1">
        <elements/>
      </filter>
      <transportName>SMTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.4.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.4.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1708520708574</time>
        <timezone>Asia/Calcutta</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="4.4.1">
        <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
        <name>Vista</name>
        <revision>2</revision>
        <lastModified>
          <time>1708059843087</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
          <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
          <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
          <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
          <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
          <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
          <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
          <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
          <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
          <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
          <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
          <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
          <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
          <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
          <string>65812908-9544-4095-b393-ad53972a9f43</string>
          <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
          <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
          <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
          <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
          <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
          <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
          <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
          <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
          <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
          <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
          <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
          <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
          <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
          <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
          <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
          <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
          <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
          <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
          <string>a577bab2-a561-4471-be71-eaada751fa60</string>
          <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
          <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
          <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
          <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
          <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
          <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
          <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
          <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
          <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
          <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
          <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
          <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
          <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
          <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
          <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
          <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
          <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
          <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
          <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
          <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
          <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
          <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
          <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
          <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
          <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
          <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
          <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
          <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
          <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
          <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
          <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
          <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
          <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
          <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
          <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
          <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
          <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
          <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
          <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
          <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
          <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
          <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
          <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
          <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
          <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
          <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
          <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
          <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
          <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
          <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
          <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
          <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
          <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
          <string>398d94f0-2316-44cb-8005-54b94610679a</string>
          <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
          <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
          <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
          <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
          <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
          <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
          <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
          <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
          <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
          <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
          <string>52978319-dd01-438b-925f-9fea38881afa</string>
          <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
          <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
          <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
          <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
          <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
          <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
          <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.4.1">
            <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
            <name>ACK Processing</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538956</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
            <name>AES Methods</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538861</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
            <name>Allergy Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538614</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
            <name>AppointmentLocation</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538444</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
            <name>CancellationReason Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539250</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
            <name>CPT Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538330</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
            <name>Database Functions -ScheduleSignaling</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538479</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
            <name>Date Format Conversion</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538823</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
            <name>DisplayOrderMapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538411</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
            <name>ED Disposition</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538750</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
            <name>Exceute Post Method</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538805</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
            <name>Execute Get Method</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538906</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
            <name>Forms Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539125</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
            <name>Get Corey Server Token</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539149</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
            <name>Get Patient IDs</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538766</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
            <name>get Token from org table</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538887</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
            <name>getAnonymizeName</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539305</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
            <name>H-Loc</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539021</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
            <name>Hospital Location</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539275</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
            <name>Immunization Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538842</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
            <name>Lab Order Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538785</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
            <name>Lab result date formatting</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539077</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>00186681-e251-49fd-acec-804362cd3c52</id>
            <name>Medication Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538676</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
            <name>OR FORM MAPPINGS</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539197</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
            <name>Problems Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538551</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
            <name>Provider mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538307</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
            <name>Radiology Modifiers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538583</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
            <name>Specialty Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538698</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
            <name>Symptom Mapping</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539103</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
            <name>Template 2</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347539221</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
            <name>TestDeployTemplate</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538732</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
            <name>TIU Note</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538715</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
            <name>Vista Integration</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538353</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.4.1">
            <id>b604002d-b028-4620-9f43-04268f61087e</id>
            <name>Vitals Qualifier</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538644</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>