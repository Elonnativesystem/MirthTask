<channelGroup version="4.4.1">
  <id>5e3273dc-3067-40b0-8d0f-f01c2f62ed55</id>
  <name>CCDA to FHIR</name>
  <revision>13</revision>
  <lastModified>
    <time>1706765936229</time>
    <timezone>Asia/Calcutta</timezone>
  </lastModified>
  <description></description>
  <channels>
    <channel version="4.4.1">
      <id>30be9040-b730-497f-b217-424cf4b6ffcd</id>
      <nextMetaDataId>12</nextMetaDataId>
      <name>patientCCDA to FHIR</name>
      <description></description>
      <revision>84</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>PatientDetails CCDA to FHIR</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>PatientDetails</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var patient = {};

patient.resourceType = &quot;Patient&quot;;
patient.id = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
patient.languageCode = msg[&apos;languageCode&apos;][&apos;@code&apos;].toString();

patient.identifier = [];
var identifiers = {};
identifiers.type = {};

identifiers.type.coding = [];
var coding = {};

coding.system = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
coding.value = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
var coding1 = {};
coding1.value = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][1][&apos;@extension&apos;].toString();
coding1.system = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][1][&apos;@root&apos;].toString();

identifiers.type.coding.push(coding);
identifiers.type.coding.push(coding1);

identifiers.system = &quot;http://www.acme.com/identifiers/patient&quot;;
identifiers.value = &quot;123456&quot;;

patient.identifier.push(identifiers);

patient.name = [];
var patientName = {};
patientName.use = &quot;Official&quot;;
patientName.family = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][&apos;family&apos;].toString();
patientName.given = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][&apos;given&apos;].toString();

patient.name.push(patientName);

patient.telecom = [];
var home = {};
home.system = &quot;Phone&quot;;
home.value = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;][&apos;@value&apos;].toString();
home.use = &quot;work&quot;;
patient.telecom.push(home);

var gender = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();

if (gender === &quot;M&quot;) {
    patient.gender = &quot;male&quot;;
} else if (gender === &quot;F&quot;) {
    patient.gender = &quot;female&quot;;
} else if (gender === &quot;O&quot;) {
    patient.gender = &quot;other&quot;;
} else {
    patient.gender = &quot;unknown&quot;;
}

patient.birthDate = DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;].toString());

patient.address = [];
var address = {};
address.use = &quot;home&quot;;
address.line = [msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;streetAddressLine&apos;].toString()];
address.city = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;city&apos;].toString();
address.state = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;state&apos;].toString();
address.postalCode = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;postalCode&apos;].toString();
address.country = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;][&apos;country&apos;].toString();

patient.address.push(address);

patient.maritalStatus = [];
var maritalStatus1 = {};
maritalStatus1.coding = {};
maritalStatus1.coding.code = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;maritalStatusCode&apos;][&apos;@code&apos;].toString();
maritalStatus1.coding.system = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;maritalStatusCode&apos;][&apos;@codeSystem&apos;].toString();
maritalStatus1.coding.display = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;maritalStatusCode&apos;][&apos;@displayName&apos;].toString();

patient.maritalStatus.push(maritalStatus1);

patient.race = [];
var race1 = {};
race1.coding = {};
race1.coding.code = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;][&apos;@code&apos;].toString();
race1.coding.system = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;][&apos;@codeSystem&apos;].toString();
race1.coding.display = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;][&apos;@displayName&apos;].toString();

patient.race.push(race1);

patient.contact = [];
var contact1 = {};
contact1.relationship = {};
contact1.relationship.coding = {};
contact1.relationship.coding.code = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
contact1.relationship.coding.system = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
contact1.relationship.coding.display = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

contact1.address = {};
var address1 = {};
address1.use = &quot;home&quot;;
address1.line = [msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;addr&apos;][&apos;streetAddressLine&apos;].toString()];
address1.city = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;addr&apos;][&apos;city&apos;].toString();
address1.state = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;addr&apos;][&apos;state&apos;].toString();
address1.postalCode = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;addr&apos;][&apos;postalCode&apos;].toString();
address1.country = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;addr&apos;][&apos;country&apos;].toString();

contact1.address = address1;

contact1.telecom = {};
var telecom = {};
telecom.system = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;telecom&apos;][&apos;@use&apos;].toString();
telecom.value = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;guardian&apos;][&apos;telecom&apos;][&apos;@value&apos;].toString();

contact1.telecom = telecom;

patient.contact.push(contact1);

patient.communication = [];
var communication = {};
communication.language = {};
var language = {};
language.coding = {};
language.coding.code = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;languageCommunication&apos;][&apos;languageCode&apos;][&apos;@code&apos;].toString();

patient.communication.push(language);

patient.generalPractitioner = [];
var generalPractitioner1 = {};
generalPractitioner1.reference = {};

generalPractitioner1.reference.type = msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][0][&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString();
generalPractitioner1.reference.display = msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][0][&apos;functionCode&apos;][&apos;@displayName&apos;].toString();

patient.generalPractitioner.push(generalPractitioner1.reference);

patient.managingOrganization={}
patient.managingOrganization.reference=msg[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;][&apos;name&apos;].toString();



var tmp = JSON.stringify(patient);

channelMap.put(&quot;patient&quot;, tmp);

logger.info(JSON.stringify(patient));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIj8+Cjw/eG1sLXN0eWxlc2hlZXQgdHlwZT0idGV4dC94c2wiIGhyZWY9IkNEQS54c2wiPz4KCjxDbGluaWNhbERvY3VtZW50IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiB4c2k6c2NoZW1hTG9jYXRpb249InVybjpobDctb3JnOnYzIC4uLy4uLy4uL0NEQSUyMFIyL2NkYS1zY2hlbWFzLWFuZC1zYW1wbGVzL2luZnJhc3RydWN0dXJlL2NkYS9DREEueHNkIgogeG1sbnM9InVybjpobDctb3JnOnYzIgogeG1sbnM6Y2RhPSJ1cm46aGw3LW9yZzp2MyIKIHhtbG5zOnNkdGM9InVybjpobDctb3JnOnNkdGMiPgogICAKICAgPHJlYWxtQ29kZQogICAgICBjb2RlPSJVUyIvPgogICA8dHlwZUlkCiAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEuMyIKICAgICAgZXh0ZW5zaW9uPSJQT0NEX0hEMDAwMDQwIi8+CiAgIAogICA8dGVtcGxhdGVJZAogICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4xLjEiLz4KICAgPHRlbXBsYXRlSWQKICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMS4yIi8+CiAgIAogICAKICAgPGlkCiAgICAgIGV4dGVuc2lvbj0iVGVzdCBDQ0RBIgogICAgICByb290PSIxLjEuMS4xLjEuMS4xLjEuMSIvPgogICAKIAogICA8Y29kZQogICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgY29kZT0iMzQxMzMtOSIKICAgICAgZGlzcGxheU5hbWU9IlN1bW1hcml6YXRpb24gb2YgRXBpc29kZSBOb3RlIi8+CiAgIAogICA8IS0tIENPTkYgNTI1NCAtLT4KICAgPHRpdGxlPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczogSGVhbHRoIFN1bW1hcnk8L3RpdGxlPgogICAKICAgPCEtLSBDT05GIDUyNTYgLS0+CiAgIDxlZmZlY3RpdmVUaW1lCiAgICAgIHZhbHVlPSIyMDEyMDkxMjAwMDAwMC0wMDAwIi8+CiAgIAogICA8IS0tIDUyNTkgLS0+CiAgIDxjb25maWRlbnRpYWxpdHlDb2RlCiAgICAgIGNvZGU9Ik4iCiAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuMjUiLz4KICAgCiAgIDwhLS0gNTM3MiAtLT4KICAgPGxhbmd1YWdlQ29kZQogICAgICBjb2RlPSJlbi1VUyIvPgogICAKICAgPCEtLSBDT05GIDUyNjYgLS0+CiAgIDxyZWNvcmRUYXJnZXQ+CiAgICAgIAogICAgICA8IS0tIENPTkYgNTI2NyAtLT4KICAgICAgPHBhdGllbnRSb2xlPgogICAgICAgICAKICAgICAgICAgPCEtLSBDT05GIDUyNjgtLT4KICAgICAgICAgPGlkCiAgICAgICAgICAgIGV4dGVuc2lvbj0iMSIKICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuNC42Ii8+CiAgICAgICAgIDwhLS0gRmFrZSBJRCB1c2luZyBITDcgZXhhbXBsZSBPSUQuIC0tPgogICAgICAgICAKICAgICAgICAgPCEtLSBQYXRpZW50IFNTTiByZWNvcmRlZCBhcyBhbiBJRCAtLT4KICAgICAgICAgPGlkCiAgICAgICAgICAgIGV4dGVuc2lvbj0iMTIzLTEwMS01MjMwIgogICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjEiLz4KICAgICAgICAgCiAgICAgICAgIDwhLS0gQ09ORiA1MjcxIC0tPgogICAgICAgICA8YWRkcgogICAgICAgICAgICB1c2U9IkhQIj4KICAgICAgICAgICAgPCEtLSBIUCBpcyAicHJpbWFyeSBob21lIiBmcm9tIGNvZGVTeXN0ZW0gMi4xNi44NDAuMS4xMTM4ODMuNS4xMTE5IC0tPgogICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTM1NyBBbWJlciBEcml2ZTwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgIDxjaXR5PkJlYXZlcnRvbjwvY2l0eT4KICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcwMDY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICA8IS0tIFVTIGlzICJVbml0ZWQgU3RhdGVzIiBmcm9tIElTTyAzMTY2LTEgQ291bnRyeSBDb2RlczogMS4wLjMxNjYuMSAtLT4KICAgICAgICAgPC9hZGRyPgogICAgICAgICAKICAgICAgICAgPCEtLSBDT05GIDUyODAgLS0+CiAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgIHZhbHVlPSJ0ZWw6KDgxNikyNzYtNjkwOSIKICAgICAgICAgICAgdXNlPSJIUCIvPgogIAogICAgCiAgICAgICAgIDxwYXRpZW50PgogICAgICAgICAgICAKCiAgICAgICAgICAgIDxuYW1lCiAgICAgICAgICAgICAgIHVzZT0iTCI+CiAgICAgICAgICAgICAgIDwhLS0gTCBpcyAiTGVnYWwiIGZyb20gSEw3IEVudGl0eU5hbWVVc2UgMi4xNi44NDAuMS4xMTM4ODMuNS40NSAtLT4KICAgICAgICAgICAgICAgPGdpdmVuPk15cmE8L2dpdmVuPgogICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxmYW1pbHk+Sm9uZXM8L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8YWRtaW5pc3RyYXRpdmVHZW5kZXJDb2RlCiAgICAgICAgICAgICAgIGNvZGU9IkYiCiAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuMSIKICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkZlbWFsZSIvPgogICAgICAgICAgICA8YmlydGhUaW1lCiAgICAgICAgICAgICAgIHZhbHVlPSIxOTQ3MDUwMSIvPgogICAgICAgICAgICAKICAgICAgICAgICAgPG1hcml0YWxTdGF0dXNDb2RlCiAgICAgICAgICAgICAgIGNvZGU9Ik0iCiAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJNYXJyaWVkIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjIiCiAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJNYXJpdGFsU3RhdHVzQ29kZSIvPgogICAgICAgICAgICA8cmVsaWdpb3VzQWZmaWxpYXRpb25Db2RlCiAgICAgICAgICAgICAgIGNvZGU9IjEwMTMiCiAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDaHJpc3RpYW4gKG5vbi1DYXRob2xpYywgbm9uLXNwZWNpZmljKSIKICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkhMNyBSZWxpZ2lvdXMgQWZmaWxpYXRpb24gIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjEwNzYiLz4KICAgICAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPHJhY2VDb2RlCiAgICAgICAgICAgICAgIGNvZGU9IjIxMDYtMyIKICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IldoaXRlIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjIzOCIKICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJhY2UgYW5kIEV0aG5pY2l0eSAtIENEQyIvPgogICAgICAgICAgICA8ZXRobmljR3JvdXBDb2RlCiAgICAgICAgICAgICAgIGNvZGU9IjIxODYtNSIKICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ik5vdCBIaXNwYW5pYyBvciBMYXRpbm8iCiAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMjM4IgogICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUmFjZSBhbmQgRXRobmljaXR5IC0gQ0RDIi8+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDxndWFyZGlhbj4KICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iR1BBUk5UIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iR3JhbmRmYXRoZXIiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuMTExIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iSEw3IFJvbGUgY29kZSIvPgogICAgICAgICAgICAgICA8YWRkcgogICAgICAgICAgICAgICAgICB1c2U9IkhQIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTM1NyBBbWJlciBEcml2ZTwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgIDxjaXR5PkJlYXZlcnRvbjwvY2l0eT4KICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcwMDY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICB2YWx1ZT0idGVsOig4MTYpMjc2LTY5MDkiCiAgICAgICAgICAgICAgICAgIHVzZT0iSFAiLz4KICAgICAgICAgICAgICAgPGd1YXJkaWFuUGVyc29uPgogICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPlJhbHBoPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5Kb25lczwvZmFtaWx5PgogICAgICAgICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgIDwvZ3VhcmRpYW5QZXJzb24+CiAgICAgICAgICAgIDwvZ3VhcmRpYW4+CiAgICAgICAgICAgIDxiaXJ0aHBsYWNlPgogICAgICAgICAgICAgICA8cGxhY2U+CiAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICA8Y2l0eT5CZWF2ZXJ0b248L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MDA2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICA8L3BsYWNlPgogICAgICAgICAgICA8L2JpcnRocGxhY2U+CiAgICAgICAgICAgIAogICAgICAgICAgICA8bGFuZ3VhZ2VDb21tdW5pY2F0aW9uPgogICAgICAgICAgICAgICA8bGFuZ3VhZ2VDb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9ImVuZyIvPgogICAgICAgICAgICAgICA8bW9kZUNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iRVNQIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iRXhwcmVzc2VkIHNwb2tlbiIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS42MCIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9Ikxhbmd1YWdlQWJpbGl0eU1vZGUiLz4KICAgICAgICAgICAgICAgPHByZWZlcmVuY2VJbmQKICAgICAgICAgICAgICAgICAgdmFsdWU9InRydWUiLz4KICAgICAgICAgICAgPC9sYW5ndWFnZUNvbW11bmljYXRpb24+CiAgICAgICAgIDwvcGF0aWVudD4KICAgICAgICAgPHByb3ZpZGVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgcm9vdD0iMS4xLjEuMS4xLjEuMS4xLjQiLz4KICAgICAgICAgICAgPG5hbWU+Q29tbXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzPC9uYW1lPgogICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICB1c2U9IldQIgogICAgICAgICAgICAgICB2YWx1ZT0idGVsOiA1NTUtNTU1LTUwMDAiLz4KICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgIDwvcHJvdmlkZXJPcmdhbml6YXRpb24+CiAgICAgIDwvcGF0aWVudFJvbGU+CiAgIDwvcmVjb3JkVGFyZ2V0PgogICAKICAgPGF1dGhvcj4KICAgICAgPHRpbWUKICAgICAgICAgdmFsdWU9IjIwMDUwODEzMDAwMDAwKzA1MDAiLz4KICAgICAgPGFzc2lnbmVkQXV0aG9yPgogICAgICAgICA8aWQKICAgICAgICAgICAgZXh0ZW5zaW9uPSIxMTExMTEiCiAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICA8YWRkcj4KICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcml2ZSA8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICA8L2FkZHI+CiAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgIHVzZT0iV1AiCiAgICAgICAgICAgIHZhbHVlPSJ0ZWw6NTU1LTU1NS0xMDAyIi8+CiAgICAgICAgIDxhc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxwcmVmaXg+RHI8L3ByZWZpeD4KICAgICAgICAgICAgICAgPGdpdmVuPkhlbnJ5PC9naXZlbj4KICAgICAgICAgICAgICAgPGZhbWlseT5TZXZlbjwvZmFtaWx5PgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgIDwvYXNzaWduZWRQZXJzb24+CiAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgIDwvYXV0aG9yPgogICA8ZGF0YUVudGVyZXI+CiAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgPGlkCiAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIKICAgICAgICAgICAgZXh0ZW5zaW9uPSI5OTk5OTk5NDMyNTIiLz4KICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgPC9hZGRyPgogICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICB1c2U9IldQIgogICAgICAgICAgICB2YWx1ZT0idGVsOjU1NS01NTUtMTAwMiIvPgogICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICA8Z2l2ZW4+TWFyeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+TWNEb25hbGQ8L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICA8L2RhdGFFbnRlcmVyPgogICA8aW5mb3JtYW50PgogICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgIDxpZAogICAgICAgICAgICBleHRlbnNpb249IktQMDAwMTciCiAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjE5LjUiLz4KICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgPC9hZGRyPgogICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICB1c2U9IldQIgogICAgICAgICAgICB2YWx1ZT0idGVsOjU1NS01NTUtMTAwMiIvPgogICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgPC9pbmZvcm1hbnQ+CiAgIDxpbmZvcm1hbnQ+CiAgICAgIDxyZWxhdGVkRW50aXR5CiAgICAgICAgIGNsYXNzQ29kZT0iUFJTIj4KICAgICAgICAgCiAgICAgICAgIDxjb2RlCiAgICAgICAgICAgIGNvZGU9IlNQUyIKICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNQT1VTRSIKICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4xOTU2MyIKICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlBlcnNvbmFsIFJlbGF0aW9uc2hpcCBSb2xlIFR5cGUgVmFsdWUgU2V0Ii8+CiAgICAgICAgIDxyZWxhdGVkUGVyc29uPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgPGdpdmVuPkZyYW5rPC9naXZlbj4KICAgICAgICAgICAgICAgPGZhbWlseT5Kb25lczwvZmFtaWx5PgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgIDwvcmVsYXRlZFBlcnNvbj4KICAgICAgPC9yZWxhdGVkRW50aXR5PgogICA8L2luZm9ybWFudD4KICAgPGN1c3RvZGlhbj4KICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAgICA8cmVwcmVzZW50ZWRDdXN0b2RpYW5Pcmdhbml6YXRpb24+CiAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICBleHRlbnNpb249Ijk5OTk5OTk5IgogICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgICAgPG5hbWU+Q29tbXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzPC9uYW1lPgogICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICB2YWx1ZT0idGVsOiA1NTUtNTU1LTEwMDIiCiAgICAgICAgICAgICAgIHVzZT0iV1AiLz4KICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgdXNlPSJXUCI+CiAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICA8L3JlcHJlc2VudGVkQ3VzdG9kaWFuT3JnYW5pemF0aW9uPgogICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICA8L2N1c3RvZGlhbj4KICAgPGluZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICA8aW50ZW5kZWRSZWNpcGllbnQ+CiAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAgICA8cmVjZWl2ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgIDxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT4KICAgICAgICAgPC9yZWNlaXZlZE9yZ2FuaXphdGlvbj4KICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgPGxlZ2FsQXV0aGVudGljYXRvcj4KICAgICAgPHRpbWUKICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgIDxzaWduYXR1cmVDb2RlCiAgICAgICAgIGNvZGU9IlMiLz4KICAgICAgPGFzc2lnbmVkRW50aXR5PgogICAgICAgICA8aWQKICAgICAgICAgICAgZXh0ZW5zaW9uPSI5OTk5OTk5OTkiCiAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICA8YWRkcj4KICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcml2ZSA8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICA8L2FkZHI+CiAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgIHVzZT0iV1AiCiAgICAgICAgICAgIHZhbHVlPSJ0ZWw6NTU1LTU1NS0xMDAyIi8+CiAgICAgICAgIDxhc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICA8L2xlZ2FsQXV0aGVudGljYXRvcj4KICAgPGF1dGhlbnRpY2F0b3I+CiAgICAgIDx0aW1lCiAgICAgICAgIHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICA8c2lnbmF0dXJlQ29kZQogICAgICAgICBjb2RlPSJTIi8+CiAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgPGlkCiAgICAgICAgICAgIGV4dGVuc2lvbj0iOTk5OTk5OTk5IgogICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgPC9hZGRyPgogICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICB1c2U9IldQIgogICAgICAgICAgICB2YWx1ZT0idGVsOjU1NS01NTUtMTAwMiIvPgogICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgPC9hdXRoZW50aWNhdG9yPgogICA8cGFydGljaXBhbnQgdHlwZUNvZGU9IklORCI+CiAgICAgIDxhc3NvY2lhdGVkRW50aXR5IGNsYXNzQ29kZT0iUFJTIj4KICAgICAgICAgPGNvZGUKICAgICAgICAgICAgY29kZT0iR1BBUk5UIgogICAgICAgICAgICBkaXNwbGF5TmFtZT0iR3JhbmQgUGFyZW50IgogICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4xLjExLjE5NTYzIgogICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUGVyc29uYWwgUmVsYXRpb25zaGlwIFJvbGUgVHlwZSBWYWx1ZSBTZXQiLz4KICAgICAgICAgPGFkZHIKICAgICAgICAgICAgdXNlPSJIUCI+CiAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTM1NyBBbWJlciBEcml2ZTwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgIDxjaXR5PkJlYXZlcnRvbjwvY2l0eT4KICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcwMDY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgIAogICAgICAgICA8L2FkZHI+CiAgICAgICAgIDx0ZWxlY29tIHZhbHVlPSd0ZWw6KDU1NSk1NTUtMjAwNicgdXNlPSdXUCcvPgogICAgICAgICA8YXNzb2NpYXRlZFBlcnNvbj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxwcmVmaXg+TXIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgIDxnaXZlbj5SYWxwaDwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+Sm9uZXM8L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2Fzc29jaWF0ZWRQZXJzb24+CiAgICAgIDwvYXNzb2NpYXRlZEVudGl0eT4KICAgPC9wYXJ0aWNpcGFudD4KICAgPHBhcnRpY2lwYW50IHR5cGVDb2RlPSJJTkQiPgogICAgICA8YXNzb2NpYXRlZEVudGl0eSBjbGFzc0NvZGU9IlBSUyI+CiAgICAgICAgIDxjb2RlCiAgICAgICAgICAgIGNvZGU9IlNQUyIKICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNQT1VTRSIKICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4xOTU2MyIKICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlBlcnNvbmFsIFJlbGF0aW9uc2hpcCBSb2xlIFR5cGUgVmFsdWUgU2V0Ii8+CiAgICAgICAgIDxhZGRyCiAgICAgICAgICAgIHVzZT0iSFAiPgogICAgICAgICAgICA8IS0tIEhQIGlzICJwcmltYXJ5IGhvbWUiIGZyb20gY29kZVN5c3RlbSAyLjE2Ljg0MC4xLjExMzg4My41LjExMTkgLS0+CiAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMzU3IEFtYmVyIERyaXZlPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgPGNpdHk+QmVhdmVydG9uPC9jaXR5PgogICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICA8cG9zdGFsQ29kZT45NzAwNjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgIDwhLS0gVVMgaXMgIlVuaXRlZCBTdGF0ZXMiIGZyb20gSVNPIDMxNjYtMSBDb3VudHJ5IENvZGVzOiAxLjAuMzE2Ni4xIC0tPgogICAgICAgICA8L2FkZHI+CiAgICAgICAgIDx0ZWxlY29tIHZhbHVlPSd0ZWw6KDU1NSk1NTUtMjAwNicgdXNlPSdXUCcvPgogICAgICAgICA8YXNzb2NpYXRlZFBlcnNvbj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxwcmVmaXg+TXIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgIDxnaXZlbj5GcmFuazwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+Sm9uZXM8L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2Fzc29jaWF0ZWRQZXJzb24+CiAgICAgIDwvYXNzb2NpYXRlZEVudGl0eT4KICAgPC9wYXJ0aWNpcGFudD4KICAgPGRvY3VtZW50YXRpb25PZgogICAgICB0eXBlQ29kZT0iRE9DIj4KICAgICAgPHNlcnZpY2VFdmVudAogICAgICAgICBjbGFzc0NvZGU9IlBDUFIiPgogICAgICAgICA8Y29kZQogICAgICAgICAgICBjb2RlPSIyMzM2MDQwMDciCiAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQtQ1QiCiAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJQbnVlbW9uaWEiLz4KICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgIDxoaWdoCiAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICAgICAgICAKICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICA8cGVyZm9ybWVyCiAgICAgICAgICAgIHR5cGVDb2RlPSJQUkYiPgogICAgICAgICAgICA8ZnVuY3Rpb25Db2RlCiAgICAgICAgICAgICAgIGNvZGU9IlBQIgogICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUHJpbWFyeSBDYXJlIFByb3ZpZGVyIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4xMi40NDMiCiAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJQcm92aWRlciBSb2xlIj4KICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD5QcmltYXJ5IENhcmUgUHJvdmlkZXI8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgPC9mdW5jdGlvbkNvZGU+CiAgICAgICAgICAgIDx0aW1lPgogICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgPC90aW1lPgogICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICBleHRlbnNpb249IlBzZXVkb01ELTEiCiAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSIyMDhEMDAwMDBYIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iR2VuZXJhbCBQcmFjdGljZSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlByb3ZpZGVyIENvZGVzIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEwMSIvPgogICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcjwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgIDxjaXR5PlBvcnRsYW5kPC9jaXR5PgogICAgICAgICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgdmFsdWU9InRlbDorMS01NTUtNTU1LTUwMDAiCiAgICAgICAgICAgICAgICAgIHVzZT0iV1AiLz4KICAgICAgICAgICAgICAgPGFzc2lnbmVkUGVyc29uPgogICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkhlbnJ5PC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5TZXZlbjwvZmFtaWx5PgogICAgICAgICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgIDwvYXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjE5LjUuOTk5OS4xMzkzIi8+CiAgICAgICAgICAgICAgICAgIDxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT4KICAgICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgICAgdmFsdWU9InRlbDorMS01NTUtNTU1LTUwMDAiCiAgICAgICAgICAgICAgICAgICAgIHVzZT0iV1AiLz4KICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICA8L3BlcmZvcm1lcj4KICAgICAgICAgPHBlcmZvcm1lcgogICAgICAgICAgICB0eXBlQ29kZT0iUFJGIj4KICAgICAgICAgICAgPGZ1bmN0aW9uQ29kZQogICAgICAgICAgICAgICBjb2RlPSJQUCIKICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlByaW1hcnkgQ2FyZSBQcm92aWRlciIKICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMTIuNDQzIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUHJvdmlkZXIgUm9sZSI+CiAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+UHJpbWFyeSBDYXJlIFByb3ZpZGVyPC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgIDwvZnVuY3Rpb25Db2RlPgogICAgICAgICAgICA8dGltZT4KICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgIDwvdGltZT4KICAgICAgICAgICAgPGFzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uPSJQc2V1ZG9NRC0zIgogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iMjA4RDAwMDAwWCIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkdlbmVyYWwgUHJhY3RpY2UiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJQcm92aWRlciBDb2RlcyIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xMDEiLz4KICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0ZWw6KzEtNTU1LTU1NS01MDAwIgogICAgICAgICAgICAgICAgICB1c2U9IkhQIi8+CiAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ljk5OTkuMTM5MyIvPgogICAgICAgICAgICAgICAgICA8bmFtZT5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0ZWw6KzEtNTU1LTU1NS01MDAwIgogICAgICAgICAgICAgICAgICAgICB1c2U9IkhQIi8+CiAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTAwMiBIZWFsdGhjYXJlIERyaXZlIDwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlBvcnRsYW5kPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgPC9wZXJmb3JtZXI+CiAgICAgIDwvc2VydmljZUV2ZW50PgogICA8L2RvY3VtZW50YXRpb25PZj4KICAgCiAgIDxjb21wb25lbnRPZj4KICAgICAgPGVuY29tcGFzc2luZ0VuY291bnRlcj4KICAgICAgICAgPGlkIGV4dGVuc2lvbj0iMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuNC42Ii8+CiAgICAgICAgIDxjb2RlCiAgICAgICAgICAgIGNvZGU9IjIzMzYwNDAwNyIKICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRC1DVCIKICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBudWVtb25pYSIvPgogICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgPHJlc3BvbnNpYmxlUGFydHk+CiAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgPGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICA8L3Jlc3BvbnNpYmxlUGFydHk+CiAgICAgICAgIDxlbmNvdW50ZXJQYXJ0aWNpcGFudCB0eXBlQ29kZT0iQVRORCI+CiAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgPGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICA8L2VuY291bnRlclBhcnRpY2lwYW50PgogICAgICAgICA8bG9jYXRpb24+CiAgICAgICAgICAgIDxoZWFsdGhDYXJlRmFjaWxpdHk+CiAgICAgICAgICAgICAgIDxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgICAgPC9oZWFsdGhDYXJlRmFjaWxpdHk+CiAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgIDwvZW5jb21wYXNzaW5nRW5jb3VudGVyPgogICA8L2NvbXBvbmVudE9mPgogICA8IS0tICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgQ0RBIEJvZHkKICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAtLT4KICAgPGNvbXBvbmVudD4KICAgICAgPHN0cnVjdHVyZWRCb2R5PgogICAgICAgCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjYuMSIvPgogICAgICAgICAgICAgICA8IS0tIEFsZXJ0cyBzZWN0aW9uIHRlbXBsYXRlIC0tPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSI0ODc2NS0yIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgPHRpdGxlPkFMTEVSR0lFUywgQURWRVJTRSBSRUFDVElPTlMsIEFMRVJUUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3Vic3RhbmNlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJlYWN0aW9uPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNldmVyaXR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXR1czwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UGVuaWNpbGxpbiBHIGJlbnphdGhpbmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InJlYWN0aW9uMSI+SGl2ZXM8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJzZXZlcml0eTEiPk1vZGVyYXRlIHRvIHNldmVyZTwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SW5hY3RpdmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db2RlaW5lPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJyZWFjdGlvbjIiPlNob3J0bmVzcyBvZiBCcmVhdGg8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJzZXZlcml0eTIiPk1vZGVyYXRlPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BY3RpdmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Bc3BpcmluPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJyZWFjdGlvbjMiPkhpdmVzPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0ic2V2ZXJpdHkzIj5NaWxkIHRvIG1vZGVyYXRlPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BY3RpdmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgIDxlbnRyeQogICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iRFJJViI+CiAgICAgICAgICAgICAgICAgIDxhY3QKICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJBQ1QiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMwIi8+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMzZlM2U5MzAtN2IxNC0xMWRiLTlmZTEtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ4NzY1LTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWxsZXJnaWVzLCBhZHZlcnNlIHJlYWN0aW9ucywgYWxlcnRzIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNzA1MDEiPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA3MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC43Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSI0YWRjMTAyMC03YjE0LTExZGItOWZlMS0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93IG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDE5NTExMDAzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUHJvcGVuc2l0eSB0byBhZHZlcnNlIHJlYWN0aW9uIHRvIGRydWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjcmVhY3Rpb24xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkNTTSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJ0aWNpcGFudFJvbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYXlpbmdFbnRpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNTUFUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNzk4MiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBlbmljaWxsaW4gRyBiZW56YXRoaW5lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BsYXlpbmdFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnRSb2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BhcnRpY2lwYW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBBbGxlcmd5IHN0YXR1cyBvYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzM5OTktNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTdGF0dXMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjczNDI1MDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSW5hY3RpdmUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJNRlNUIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBSZWFjdGlvbiBvYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjRhZGMxMDIwLTdiMTQtMTFkYi05ZmUxLTA4MDAyMDBjOWE2NCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNzA1MDEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIyNDc0NzIwMDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJIaXZlcyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICoqIFNldmVyaXR5IG9ic2VydmF0aW9uIHRlbXBsYXRlICoqIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IlNFViIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNldmVyaXR5IE9ic2VydmF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJBY3RDb2RlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjc2V2ZXJpdHkxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjM3MTkyNDAwOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ik1vZGVyYXRlIHRvIHNldmVyZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMzAiLz4KICAgICAgICAgICAgICAgICAgICAgPCEtLSAqKiBBbGxlcmd5IHByb2JsZW0gYWN0ICoqIC0tPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMzZlM2U5MzAtN2IxNC0xMWRiLTlmZTEtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ4NzY1LTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWxsZXJnaWVzLCBhZHZlcnNlIHJlYWN0aW9ucywgYWxlcnRzIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNjA1MDEiPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA2MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC43Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSI0YWRjMTAyMC03YjE0LTExZGItOWZlMS0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA2MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQxOTUxMTAwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlByb3BlbnNpdHkgdG8gYWR2ZXJzZSByZWFjdGlvbiB0byBkcnVnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJDU00iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnRSb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGF5aW5nRW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTU1BVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjI2NzAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb2RlaW5lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BsYXlpbmdFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnRSb2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BhcnRpY2lwYW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzM5OTktNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTdGF0dXMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU1NTYxMDAzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWN0aXZlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iTUZTVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzaW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC45Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUmVhY3Rpb24gb2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSI0YWRjMTAyMC03YjE0LTExZGItOWZlMS0wODAwMjAwYzlhNjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNyZWFjdGlvbjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDYwNTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjY3MDM2MDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iU2hvcnRuZXNzIG9mIEJyZWF0aCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICoqIFNldmVyaXR5IG9ic2VydmF0aW9uIHRlbXBsYXRlICoqIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IlNFViIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNldmVyaXR5IE9ic2VydmF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJBY3RDb2RlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjc2V2ZXJpdHkyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjY3MzYwMDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJNb2RlcmF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMzAiLz4KICAgICAgICAgICAgICAgICAgICAgPCEtLSAqKiBBbGxlcmd5IHByb2JsZW0gYWN0ICoqIC0tPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMzZlM2U5MzAtN2IxNC0xMWRiLTlmZTEtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ4NzY1LTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWxsZXJnaWVzLCBhZHZlcnNlIHJlYWN0aW9ucywgYWxlcnRzIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwODA1MDEiPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA4MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjciLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjRhZGMxMDIwLTdiMTQtMTFkYi05ZmUxLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJBU1NFUlRJT04iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDgwNTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQxOTUxMTAwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlByb3BlbnNpdHkgdG8gYWR2ZXJzZSByZWFjdGlvbiB0byBkcnVnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJDU00iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnRSb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGF5aW5nRW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTU1BVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExOTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBc3BpcmluIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BsYXlpbmdFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnRSb2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BhcnRpY2lwYW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMzk5OS00IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlN0YXR1cyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNTU1NjEwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBY3RpdmUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJNRlNUIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSI0YWRjMTAyMC03YjE0LTExZGItOWZlMS0wODAwMjAwYzlhNjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNyZWFjdGlvbjMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDgwNTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjQ3NDcyMDA0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSGl2ZXMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJTRVYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTZXZlcml0eSBPYnNlcnZhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS40IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQWN0Q29kZSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3NldmVyaXR5MyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzNzE5MjMwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJNaWxkIHRvIG1vZGVyYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgIDwvYWN0PgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAKICAgCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjIyLjEiLz4KICAgICAgICAgIAogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSI0NjI0MC04IgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ikhpc3Rvcnkgb2YgZW5jb3VudGVycyIvPgogICAgICAgICAgICAgICA8dGl0bGU+RU5DT1VOVEVSUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RW5jb3VudGVyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBlcmZvcm1lcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Mb2NhdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9IkVuY291bnRlcjEiLz4gUG51ZW1vbmlhPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRyIEhlbnJ5IFNldmVuPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDEyMDgwNjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGVuY291bnRlcgogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkVOQyIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNDkiLz4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGRlOCIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI5OTIyMiIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkluUGF0aWVudCBBZG1pc3Npb24iCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJDUFQiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1WZXJzaW9uPSI0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD5NaWxkIEZldmVyPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI0VuY291bnRlcjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmEzLTVkOTgxNWZmNGRlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI1OTA1ODAwMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkdlbmVyYWwgUGh5c2ljaWFuIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgIDwvcGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnQKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJ0aWNpcGFudFJvbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMzIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExNjAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4yNTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJIZWFsdGhjYXJlU2VydmljZUxvY2F0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iVXJnZW50IENhcmUgQ2VudGVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTAwMiBIZWFsdGhjYXJlIERyPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYXlpbmdFbnRpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJQTEMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGxheWluZ0VudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXJ0aWNpcGFudFJvbGU+CiAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnQ+CiAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUlNPTiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMTkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImRiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uPSI0NTY2NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDQ2ODQwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJGaW5kaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIyMzM2MDQwMDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJQbmV1bW9uaWEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIiBpbnZlcnNpb25JbmQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGFjdCBjbGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjgwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgcm9vdD0iNWE3ODQyNjAtNjg1Ni00ZjM4LTk2MzgtODBjNzUxYWZmMmZiIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjI5MzA4LTQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkVOQ09VTlRFUiBESUFHTk9TSVMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iYWN0aXZlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93IHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iU1VCSiIgaW52ZXJzaW9uSW5kPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IkVWTiIgbmVnYXRpb25JbmQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC40Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUHJvYmxlbSBPYnNlcnZhdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImFiMTc5MWIwLTVjNzEtMTFkYi1iMGRlLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDk1ODYwMDYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb21wbGFpbnQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjIzMzYwNDAwNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBuZXVtb25pYSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgPC9lbmNvdW50ZXI+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgCgogICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi4yLjEiLz4KICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9IjExMzY5LTYiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSGlzdG9yeSBvZiBpbW11bml6YXRpb25zIi8+CiAgICAgICAgICAgICAgIDx0aXRsZT5JTU1VTklaQVRJT05TPC90aXRsZT4KICAgICAgICAgICAgICAgPHRleHQ+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgSUQ9ImltbXVuU2VjdCIvPgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFjY2luZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXR1czwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9ImltbXVuMiIvPkluZmx1ZW56YSB2aXJ1cyB2YWNjaW5lLCBJTTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5NYXkgMjAxMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db21wbGV0ZWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0iaW1tdW40Ii8+VGV0YW51cyBhbmQgZGlwaHRoZXJpYSB0b3hvaWRzLCBJTTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHIgMjAxMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db21wbGV0ZWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0iaW1tdW42Ii8+SW5mbHVlbnphIHZpcnVzIHZhY2NpbmUsIElNPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkF1ZyAyMDEyPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlY2xpbmVkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0JBRE0iCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iCiAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uSW5kPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNTIiLz4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSJlNmYxYmE0My1jMGVkLTRiOWItOWYxMi1mNDM1ZDhhZDhmOTIiLz4KICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNpbW11bjIiLz4KICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IklWTF9UUyIKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwNTEwIi8+CiAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZUNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQzI4MTYxIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI2LjEuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9Ik5hdGlvbmFsIENhbmNlciBJbnN0aXR1dGUgKE5DSSkgVGhlc2F1cnVzIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSW50cmFtdXNjdWxhciBpbmplY3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgPGRvc2VRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNTAiCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9Im1jZyIvPgogICAgICAgICAgICAgICAgICAgICA8Y29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZFByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41NCIvPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZE1hdGVyaWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi41OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkluZmx1ZW56YSB2aXJ1cyB2YWNjaW5lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQ1ZYIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD5JbmZsdWVuemEgdmlydXMgdmFjY2luZTwvb3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhbnNsYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTExIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iaW5mbHVlbnphLCBsaXZlLCBpbnRyYW5hc2FsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQ1ZYIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+SGVhbHRoIExTIC0gSW1tdW5vIEluYy48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlZFByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgIDwvY29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIiBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iQUNUIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iSU5UIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICoqIEluc3RydWN0aW9ucyBUZW1wbGF0ZSAqKiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxNzEwNDQwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJpbW11bml6YXRpb24gZWR1Y2F0aW9uIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNpbW11blNlY3QiLz5Qb3NzaWJsZSBmbHUtbGlrZSBzeW1wdG9tcyBmb3IgdGhyZWUgZGF5cy48L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgPC9zdWJzdGFuY2VBZG1pbmlzdHJhdGlvbj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0JBRE0iCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iCiAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uSW5kPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNTIiLz4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSJlNmYxYmE0My1jMGVkLTRiOWItOWYxMi1mNDM1ZDhhZDhmOTIiLz4KICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNpbW11bjQiLz4KICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IklWTF9UUyIKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwNDAxIi8+CiAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZUNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQzI4MTYxIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI2LjEuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9Ik5hdGlvbmFsIENhbmNlciBJbnN0aXR1dGUgKE5DSSkgVGhlc2F1cnVzIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSW50cmFtdXNjdWxhciBpbmplY3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgPGRvc2VRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNTAiCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9Im1jZyIvPgogICAgICAgICAgICAgICAgICAgICA8Y29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZFByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41NCIvPgogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTAzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iVGV0YW51cyBhbmQgZGlwaHRoZXJpYSB0b3hvaWRzIC0gcHJlc2VydmF0aXZlIGZyZWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJDVlgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PlRldGFudXMgYW5kIGRpcGh0aGVyaWEgdG94b2lkcyAtIHByZXNlcnZhdGl2ZSBmcmVlPC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFuc2xhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIwOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlRldGFudXMgYW5kIGRpcGh0aGVyaWEgdG94b2lkcyAtIHByZXNlcnZhdGl2ZSBmcmVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQ1ZYIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+SGVhbHRoIExTIC0gSW1tdW5vIEluYy48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlZFByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgIDwvY29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIgogICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iQUNUIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iSU5UIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICoqIEluc3RydWN0aW9ucyBUZW1wbGF0ZSAqKiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxNzEwNDQwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJpbW11bml6YXRpb24gZWR1Y2F0aW9uIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNpbW11blNlY3QiLz5Qb3NzaWJsZSBmbHUtbGlrZSBzeW1wdG9tcyBmb3IgdGhyZWUgZGF5cy48L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgPC9zdWJzdGFuY2VBZG1pbmlzdHJhdGlvbj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0JBRE0iCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iCiAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41MiIvPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImU2ZjFiYTQzLWMwZWQtNGI5Yi05ZjEyLWY0MzVkOGFkOGY5MiIvPgogICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI2ltbXVuNiIvPgogICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iSVZMX1RTIgogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA2MDMiLz4KICAgICAgICAgICAgICAgICAgICAgPHJvdXRlQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDMjgxNjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjMuMjYuMS4xIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTmF0aW9uYWwgQ2FuY2VyIEluc3RpdHV0ZSAoTkNJKSBUaGVzYXVydXMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJbnRyYW11c2N1bGFyIGluamVjdGlvbiIvPgogICAgICAgICAgICAgICAgICAgICA8ZG9zZVF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI1MCIKICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0ibWNnIi8+CiAgICAgICAgICAgICAgICAgICAgIDxjb25zdW1hYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkUHJvZHVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1BTlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjU0Ii8+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuNTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJbmZsdWVuemEgdmlydXMgdmFjY2luZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkNWWCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+SW5mbHVlbnphIHZpcnVzIHZhY2NpbmU8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9ImluZmx1ZW56YSwgbGl2ZSwgaW50cmFuYXNhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkNWWCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi41OSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkhlYWx0aCBMUyAtIEltbXVubyBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICA8L2NvbnN1bWFibGU+CiAgICAgICAgICAgICAgICAgIDwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgIAogICAgICAgIAogICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi4xLjEiLz4KICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iMTAxNjAtMCIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJISVNUT1JZIE9GIE1FRElDQVRJT04gVVNFIi8+CiAgICAgICAgICAgICAgIDx0aXRsZT5NZWRpY2F0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVkaWNhdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EaXJlY3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXJ0IERhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3RhdHVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkluZGljYXRpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZpbGwgSW5zdHJ1Y3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0iTWVkMSI+QWxidXRlcm9sIDAuMDkgTUcvQUNUVUFUIGluaGFsYW50IHNvbHV0aW9uPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4wLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiwgMiBwdWZmcyBvbmNlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjIwMTIwODA2PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjdGl2ZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QbmV1bW9uaWEgKDIzMzYwNDAwNyBTTk9NRUQgQ1QpPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50IElEPSJGaWxsSW5zIj5HZW5lcmljIFN1YnN0aXRpdGlvbiBBbGxvd2VkPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0JBRE0iCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjE2Ii8+CiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImNkYmQzM2YwLTZjZGUtMTFkYi05ZmUxLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI01lZDEiLz4wLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiwgMiBwdWZmcyA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iSVZMX1RTIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBJVkxfVFMiCiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RpdHV0aW9uU3BlY2lmaWVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcj0iQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJpb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEyIgogICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJoIi8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgPHJvdXRlQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDMzgyMTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjMuMjYuMS4xIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTkNJIFRoZXNhdXJ1cyIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlJFU1BJUkFUT1JZIChJTkhBTEFUSU9OKSIvPgogICAgICAgICAgICAgICAgICAgICA8ZG9zZVF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIwLjA5IgogICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJtZy9hY3R1YXQiLz4KICAgICAgICAgICAgICAgICAgICAgPHJhdGVRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iOTAiCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9Im1sL21pbiIvPgogICAgICAgICAgICAgICAgICAgICA8YWRtaW5pc3RyYXRpb25Vbml0Q29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDNDI5NDQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJTkhBTEFOVCIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNi4xLjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJOQ0kgVGhlc2F1cnVzIi8+CiAgICAgICAgICAgICAgICAgICAgIDxjb25zdW1hYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkUHJvZHVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1BTlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZjRlZTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZE1hdGVyaWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI1NzM2MjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBbGJ1dGVyb2wgMC4wOSBNRy9BQ1RVQVQgaW5oYWxhbnQgc29sdXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNNZWQxIi8+PC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFuc2xhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI1NzM2MjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJQcm92ZW50aWwgMC4wOSBNRy9BQ1RVQVQgaW5oYWxhbnQgc29sdXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJSeE5vcm0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlZE1hdGVyaWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5NZWRpY2F0aW9uIEZhY3RvcnkgSW5jLjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkUHJvZHVjdD4KICAgICAgICAgICAgICAgICAgICAgPC9jb25zdW1hYmxlPgogICAgICAgICAgICAgICAgICAgICA8cGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJOSSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjE5LjUuOTk5OS4xMzkzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICAgICAgICA8L3BlcmZvcm1lcj4KICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJDU00iPgogICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnRSb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDEyMzA3MDA5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iZHJ1ZyB2ZWhpY2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGF5aW5nRW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTU1BVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjMyNDA0OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFlcm9zb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJSeE5vcm0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QWVyb3NvbDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wbGF5aW5nRW50aXR5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3BhcnRpY2lwYW50Um9sZT4KICAgICAgICAgICAgICAgICAgICAgPC9wYXJ0aWNpcGFudD4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJSU09OIj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4xOSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iZGI3MzQ2NDctZmM5OS00MjRjLWE4NjQtN2UzY2RhODJlNzAzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjQ1NjY1Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQwNDY4NDAwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkZpbmRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93IG51bGxGbGF2b3I9IlVOSyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2ggdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjMzNjA0MDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUG5ldW1vbmlhIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUkVGUiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdXBwbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJTUExZIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iSU5UIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4xNyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iTkkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJJVkxfVFMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVwZWF0TnVtYmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNzUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRQcm9kdWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGVlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU3MzYyMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFsYnV0ZXJvbCAwLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+PHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI01lZDEiLz48L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU3MzYyMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFsYnV0ZXJvbCAwLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJ4Tm9ybSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1lZGljYXRpb24gRmFjdG9yeSBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbj0iMjk4MTgyMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNS45OTk5LjQ1NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcjwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlBvcnRsYW5kPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZTRkZTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iU1VCSiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzaW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IklOVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAqKiBJbnN0cnVjdGlvbnMgVGVtcGxhdGUgKiogLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5MDczMDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iaW5zdHJ1Y3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+PHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI0ZpbGxJbnMiLz5sYWJlbCBpbiBzcGFuaXNoPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3VwcGx5PgogICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3VwcGx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU1BMWSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMS4yLjMuNC41Njc4OS4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249ImNiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXBlYXROdW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRQcm9kdWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGVlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU3MzYyMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFsYnV0ZXJvbCAwLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+PHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI01lZDEiLz48L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU3MzYyMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFsYnV0ZXJvbCAwLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJ4Tm9ybSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1lZGljYXRpb24gRmFjdG9yeSBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ljk5OTkuNDU2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjI5ODE4MjMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNS45OTk5LjEzOTMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q29tbXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3N1cHBseT4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgPHByZWNvbmRpdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUFJDTiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGNyaXRlcmlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNTYwMTgwMDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJXaGVlemluZyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2NyaXRlcmlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9wcmVjb25kaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgIAogICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi4xMCIvPgogICAgICAgIAogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSIxODc3Ni01IgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlRyZWF0bWVudCBwbGFuIi8+CiAgICAgICAgICAgICAgIDx0aXRsZT5DQVJFIFBMQU48L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBsYW5uZWQgQWN0aXZpdHk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UGxhbm5lZCBEYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db25zdWx0YXRpb24gd2l0aCBEciBHZW9yZ2UgUG90b21hYyBmb3IgQXN0aG1hPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjIwMTIwODIwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2hlc3QgWC1yYXk8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MjAxMjA4MjY8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TcHV0dW0gQ3VsdHVyZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDEyMDgyMDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5PgogICAgICAgICAgICAgICAgICA8ZW5jb3VudGVyCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJJTlQiCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iRU5DIj4KICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC40MCIvPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjlhNmQxYmFjLTE3ZDMtNDE5NS04OWE0LTExMjFiYzgwOWI0ZCIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI5OTI0MSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ik9mZmljZSBjb25zdWx0YXRpb24gLSAxNSBtaW51dGVzIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQ1BUIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEyIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8Y2VudGVyIHZhbHVlPSIyMDEyMDgyMCIvPgogICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iU1VCSiIgaW52ZXJzaW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IklOVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5MDczMDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iaW5zdHJ1Y3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+Rm9sbG93IHVwIHdpdGggRHIgR2VvcmdlIFBvdG9tYWMgZm9yIEFzdGhtYTwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYWN0PgogICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICA8L2VuY291bnRlcj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5PgogICAgICAgICAgICAgICAgICA8cHJvY2VkdXJlCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJSUU8iCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iUFJPQyI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNDEiLz4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjlhNmQxYmFjLTE3ZDMtNDE5NS04OWM0LTExMjFiYzgwOWI1YSIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxNjg3MzEwMDkiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDaGVzdCBYLVJheSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRC1DVCIvPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJuZXciLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxjZW50ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODI2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgPC9wcm9jZWR1cmU+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgICAgIDxlbnRyeQogICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iRFJJViI+CiAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IlJRTyI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNDQiLz4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSI5YTZkMWJhYy0xN2QzLTQxOTUtODlhNC0xMTIxYmM4MDliNGEiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNjI0LTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNwdXR1bSBDdWx0dXJlIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Im5ldyIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGNlbnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MjAiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgoKCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjExLjEiLz4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICBjb2RlPSIxMDE4My0yIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iIEhPU1BJVEFMIERJU0NIQVJHRSBNRURJQ0FUSU9OUyAiLz4KICAgICAgICAgICAgICAgPHRpdGxlPkhPU1BJVEFMIERJU0NIQVJHRSBNRURJQ0FUSU9OUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVkaWNhdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EaXJlY3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXJ0IERhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3RhdHVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkluZGljYXRpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZpbGwgSW5zdHJ1Y3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudCBJRD0iRE0iPjEyMCBBQ1RVQVQgRmx1dGljYXNvbmUgcHJvcGlvbmF0ZSAwLjExIE1HL0FDVFVBVCBNZXRlcmVkIERvc2UgSW5oYWxlcjwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvbnRlbnQgSUQ9IkRNMSI+MC4xMSBNRy9BQ1RVQVQgTWV0ZXJlZCBEb3NlIE9uY2UgRGFpbHk8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjIwMTIwODEzPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjdGl2ZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ccm9uY2hpdGlzICgzMjM5ODAwNCBTTk9NRUQgQ1QpPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50IElEPSJGaWxsSW5zX0RNIj5HZW5lcmljIFN1YnN0aXRpdGlvbiBBbGxvd2VkPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjM1Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSI1YTc4NDI2MC02ODU2LTRmMzgtOTYzOC04MGM3NTFhZmYyZmIiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTAxODMtMiIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJEaXNjaGFyZ2UgbWVkaWNhdGlvbiIvPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJhY3RpdmUiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoIHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdWJzdGFuY2VBZG1pbmlzdHJhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IlNCQURNIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4xNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSJjZGJkMzNmMC02Y2RlLTExZGItOWZlMS0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNETTEiLz4wLjExIE1HL0FDVFVBVCBNZXRlcmVkIERvc2UgT25jZSBEYWlseSA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iSVZMX1RTIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdyB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2ggdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBJVkxfVFMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RpdHV0aW9uU3BlY2lmaWVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcj0iQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJpb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJoIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDMzgyMTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjMuMjYuMS4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTkNJIFRoZXNhdXJ1cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlJFU1BJUkFUT1JZIChJTkhBTEFUSU9OKSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZG9zZVF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJtZy9hY3R1YXQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJhdGVRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTEwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJtbC9taW4iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1heERvc2VRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnVtZXJhdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVub21pbmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF4RG9zZVF1YW50aXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRtaW5pc3RyYXRpb25Vbml0Q29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDNDI5NDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJTkhBTEFOVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNi4xLjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJOQ0kgVGhlc2F1cnVzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb25zdW1hYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkUHJvZHVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1BTlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZjRlZTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZE1hdGVyaWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4OTYwMDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSIxMjAgQUNUVUFUIEZsdXRpY2Fzb25lIHByb3Bpb25hdGUgMC4xMSBNRy9BQ1RVQVQgTWV0ZXJlZCBEb3NlIEluaGFsZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNETSIvPjwvb3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhbnNsYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODk2MDAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iMTIwIEFDVFVBVCBGbHV0aWNhc29uZSBwcm9waW9uYXRlIDAuMTEgTUcvQUNUVUFUIE1ldGVyZWQgRG9zZSBJbmhhbGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TWVkaWNhdGlvbiBGYWN0b3J5IEluYy48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlZFByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBlcmZvcm1lcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iTkkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ljk5OTkuMTM5NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJ0aWNpcGFudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iQ1NNIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50Um9sZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1BTlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQxMjMwNzAwOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9ImRydWcgdmVoaWNsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxheWluZ0VudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1NQVQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMjQwNDkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBZXJvc29sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFlcm9zb2w8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGxheWluZ0VudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXJ0aWNpcGFudFJvbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUlNPTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMTkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImRiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uPSI0NTY2NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDQ2ODQwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJGaW5kaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMTAxMTMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMjM5ODAwNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkJyb25jaGl0aXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJSRUZSIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN1cHBseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IlNQTFkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJJTlQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjE3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJOSSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IklWTF9UUyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXBlYXROdW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI3NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvZHVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZFByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMmE2MjAxNTUtOWQxMS00MzllLTkyYjMtNWQ5ODE1ZmY0ZWU4Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODk2MDAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iMTIwIEFDVFVBVCBGbHV0aWNhc29uZSBwcm9waW9uYXRlIDAuMTEgTUcvQUNUVUFUIE1ldGVyZWQgRG9zZSBJbmhhbGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjRE0iLz48L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ijg5NjAwMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IjEyMCBBQ1RVQVQgRmx1dGljYXNvbmUgcHJvcGlvbmF0ZSAwLjExIE1HL0FDVFVBVCBNZXRlcmVkIERvc2UgSW5oYWxlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJ4Tm9ybSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1lZGljYXRpb24gRmFjdG9yeSBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbj0iMjk4MTgyNSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNS45OTk5LjQ1NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcjwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlBvcnRsYW5kPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZTRkZTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iU1VCSiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzaW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IklOVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5MDczMDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iaW5zdHJ1Y3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+PHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI0ZpbGxJbnNfRE0iLz5HZW5lcmljIFN1YnN0aXR1dGlvbiBBbGxvd2VkPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3VwcGx5PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3VwcGx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU1BMWSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMS4yLjMuNC41Njc4OS4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249ImNiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXBlYXROdW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI3NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvZHVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZFByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMmE2MjAxNTUtOWQxMS00MzllLTkyYjMtNWQ5ODE1ZmY0ZWU4Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODk2MDAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iMTIwIEFDVFVBVCBGbHV0aWNhc29uZSBwcm9waW9uYXRlIDAuMTEgTUcvQUNUVUFUIE1ldGVyZWQgRG9zZSBJbmhhbGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjRE0iLz48L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ijg5NjAwMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IjEyMCBBQ1RVQVQgRmx1dGljYXNvbmUgcHJvcGlvbmF0ZSAwLjExIE1HL0FDVFVBVCBNZXRlcmVkIERvc2UgSW5oYWxlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJ4Tm9ybSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1lZGljYXRpb24gRmFjdG9yeSBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ljk5OTkuNDU2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjI5ODE4MjUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNS45OTk5LjEzOTUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q29tbXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N1cHBseT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZWNvbmRpdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUFJDTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNyaXRlcmlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNTYwMTgwMDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJXaGVlemluZyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NyaXRlcmlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wcmVjb25kaXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgIDwvYWN0PgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgoKCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjUuMy4xLjMuMSIvPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgY29kZT0iNDIzNDktMSIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlJFQVNPTiBGT1IgUkVGRVJSQUwiLz4KICAgICAgICAgICAgICAgPHRpdGxlPlJFQVNPTiBGT1IgUkVGRVJSQUw8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHBhcmFncmFwaD5Gb2xsb3cgdXAgd2l0aCBEciBHZW9yZ2UgUG90b21hYyBmb3IgQXN0aG1hPC9wYXJhZ3JhcGg+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICA8L2NvbXBvbmVudD4KCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjUuMSIvPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSIxMTQ1MC00IgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBST0JMRU0gTElTVCIvPgogICAgICAgICAgICAgICA8dGl0bGU+UFJPQkxFTVM8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICBJRD0icHJvYmxlbXMiLz4KICAgICAgICAgICAgICAgICAgPGxpc3QKICAgICAgICAgICAgICAgICAgICAgbGlzdFR5cGU9Im9yZGVyZWQiPgogICAgICAgICAgICAgICAgICAgICA8aXRlbT48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0icHJvYmxlbTEiPlBuZXVtb25pYSA6IFN0YXR1cyAtIFJlc29sdmVkPC9jb250ZW50PjwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgPGl0ZW0+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InByb2JsZW0yIj5Bc3RobWEgOiBTdGF0dXMgLSBBY3RpdmU8L2NvbnRlbnQ+PC9pdGVtPgogICAgICAgICAgICAgICAgICA8L2xpc3Q+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMyIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iZWM4YTZmZjgtZWQ0Yi00ZjdlLTgyYzMtZTk4ZTU4YjQ1ZGU3Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IkNPTkMiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuNiIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkNvbmNlcm4iLz4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2JsZW0gb2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQwOTU4NjAwNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkNvbXBsYWludCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3Byb2JsZW0xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjIzMzYwNDAwNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBuZXVtb25pYSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2JsZW0gb2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImFiMTc5MWIwLTVjNzEtMTFkYi1iMGRlLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDk1ODYwMDYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb21wbGFpbnQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNwcm9ibGVtMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIyMzM2MDQwMDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJQbmV1bW9uaWEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gICAgQWdlIG9ic2VydmF0aW9uIHRlbXBsYXRlICAgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ0NTUxODAwOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFnZSBBdCBPbnNldCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJQUSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjY1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJhIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUkVGUiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExMzIzLTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSGVhbHRoIHN0YXR1cyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjcHJvYmxlbXMiLz48L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxNjI0NjcwMDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTeW1wdG9tIEZyZWUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwIHR5cGVDb2RlPSJSRUZSIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMzk5OS00IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iU3RhdHVzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNwcm9ibGVtMiIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZSB4c2k6dHlwZT0iQ0QiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MTMzMjIwMDkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUmVzb2x2ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgICAgIDxlbnRyeQogICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iRFJJViI+CiAgICAgICAgICAgICAgICAgIDxhY3QKICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJBQ1QiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMiLz4KICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImVjOGE2ZmY4LWVkNGItNGY3ZS04MmMzLWU5OGU1OGI0NWRlNyIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDT05DIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb25jZXJuIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNzAxMDMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQwOTU4NjAwNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkNvbXBsYWludCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3Byb2JsZW0yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA3MDEwMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjE5NTk2NzAwMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFzdGhtYSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2JsZW0gb2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImFiMTc5MWIwLTVjNzEtMTFkYi1iMGRlLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDk1ODYwMDYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb21wbGFpbnQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNwcm9ibGVtMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxOTU5NjcwMDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBc3RobWEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDQ1NTE4MDA4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWdlIEF0IE9uc2V0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNjUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9ImEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJSRUZSIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTEzMjMtMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJIZWFsdGggc3RhdHVzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNwcm9ibGVtcyIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjE2MjQ2NzAwNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlN5bXB0b20gRnJlZSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24gY2xhc3NDb2RlPSJPQlMiIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzM5OTktNCIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlN0YXR1cyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjcHJvYmxlbTIiLz48L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUgeHNpOnR5cGU9IkNEIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNTU1NjEwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWN0aXZlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgIDwvYWN0PgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgogCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjcuMSIvPgogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iNDc1MTktNCIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJISVNUT1JZIE9GIFBST0NFRFVSRVMiLz4KICAgICAgICAgICAgICAgPHRpdGxlPlBST0NFRFVSRVM8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlByb2NlZHVyZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQgSUQ9IlByb2MyIj5DaGVzdCBYLVJheTwvY29udGVudD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjgvNy8yMDEyPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgPC90ZXh0PiAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgICAgPHByb2NlZHVyZQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IlBST0MiCiAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjE0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjEyMzQ1Njc4OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTY4NzMxMDA5IgogICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ2hlc3QgWC1SYXkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQtQ1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjUHJvYzIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8cHJpb3JpdHlDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IkNSIgogICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjciCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJBY3RQcmlvcml0eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkNhbGxiYWNrIHJlc3VsdHMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGhvZENvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0YXJnZXRTaXRlQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4MjA5NDAwOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ikxvd2VyIFJlc3BpcmF0b3J5IFRyYWN0IFN0cnVjdHVyZSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8cGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjEyMzQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZT0iV1AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIoNTU1KTU1NS01NTUtMTIzNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3BlcmZvcm1lcj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnRSb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExNjAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4yNTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJIZWFsdGhjYXJlU2VydmljZUxvY2F0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iVXJnZW50IENhcmUgQ2VudGVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTAwMiBIZWFsdGhjYXJlIERyPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYXlpbmdFbnRpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJQTEMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGxheWluZ0VudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXJ0aWNpcGFudFJvbGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnQ+CiAgICAgICAgICAgICAgICAgICAgIDwvcHJvY2VkdXJlPgogICAgICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAKCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjE0Ii8+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9IjQ3NDIwLTUiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICA8dGl0bGU+RlVOQ1RJT05BTCBTVEFUVVM8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZ1bmN0aW9uYWwgQ29uZGl0aW9uPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkVmZmVjdGl2ZSBEYXRlczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db25kaXRpb24gU3RhdHVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29udGVudCBJRD0iZnMxIj5EZXBlbmRlbmNlIG9uIGNhbmU8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjIwMDg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWN0aXZlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb250ZW50IElEPSJmczIiPk1lbW9yeSBpbXBhaXJtZW50PC9jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDA4PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjdGl2ZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC42OCIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5NTg2MDA2IgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ29tcGxhaW50Ii8+CiAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjZnMxIi8+CiAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA4MTEwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxMDU1MDQwMDIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJEZXBlbmRlbmNlIG9uIENhbmUiLz4KICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC42OCIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5NTg2MDA2IgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ29tcGxhaW50Ii8+CiAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjZnMyIi8+CiAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA4MTEwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCBudWxsRmxhdm9yPSJVTksiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzODY4MDcwMDYiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJNZW1vcnkgSW1wYWlybWVudCIvPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC43MyIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzczOTMwMDAwIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ29nbml0aXZlIEZ1bmN0aW9uIEZpbmRpbmciLz4KICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNmczIiLz4KICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDgxMTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ4MTY3MDAwIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQW1uZXNpYSIvPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAKCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjMuMSIvPgogICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9IjMwOTU0LTIiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUkVTVUxUUyIvPgogICAgICAgICAgICAgICA8dGl0bGU+UkVTVUxUUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sc3Bhbj0iMiI+TEFCT1JBVE9SWSBJTkZPUk1BVElPTjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW49IjIiPkNoZW1pc3RyaWVzIGFuZCBkcnVnIGxldmVsczwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJyZXN1bHQxIj5IR0IgKE0gMTMtMTggZy9kbDsgRiAxMi0xNiBnL2RsKTwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MTMuMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJyZXN1bHQyIj5XQkMgKDQuMy0xMC44IDEwKzMvdWwpPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD42Ljc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0icmVzdWx0MyI+UExUICgxMzUtMTQ1IG1lcS9sKTwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MTIzIChMKTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPG9yZ2FuaXplcgogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkJBVFRFUlkiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8IS0tIFJlc3VsdCBvcmdhbml6ZXIgdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMSIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iN2Q1YTAyYjAtNjdhNC0xMWRiLWJkMTMtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDM3ODkwMDkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDQkMgV08gRElGRkVSRU5USUFMIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFJlc3VsdCBvYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIxMDdjMmRjMC02N2E1LTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMDMxMy0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSEdCIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyI+IDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNyZXN1bHQxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgxMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTAuMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iZy9kbCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJwcmV0YXRpb25Db2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ik4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGhvZENvZGUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFyZ2V0U2l0ZUNvZGUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGltZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNmZmNGRlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2F1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZVJhbmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb25SYW5nZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+TSAxMy0xOCBnL2RsOyBGIDEyLTE2IGcvZGw8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb25SYW5nZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9yZWZlcmVuY2VSYW5nZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjEwN2MyZGMwLTY3YTUtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjMzNzY1LTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJXQkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIj4gPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3Jlc3VsdDIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iUFEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxMi4zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSIxMCszL3VsIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcnByZXRhdGlvbkNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iTiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0aG9kQ29kZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YXJnZXRTaXRlQ29kZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMmE2MjAxNTQtOWQxMS00MzllLTkyYjMtNWQ5ODE1ZmY0ZGU4Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvblJhbmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IklWTF9QUSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjQuMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iMTArMy91bCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTAuOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iMTArMy91bCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVmZXJlbmNlUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMTA3YzJkYzAtNjdhNS0xMWRiLWJkMTMtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjY1MTUtNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBMVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiPiA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjcmVzdWx0MyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MTAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJQUSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEyMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iMTArMy91bCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJwcmV0YXRpb25Db2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IkwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGhvZENvZGUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFyZ2V0U2l0ZUNvZGUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGltZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGRlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2F1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZVJhbmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb25SYW5nZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJJVkxfUFEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxNTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9IjEwKzMvdWwiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjM1MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iMTArMy91bCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVmZXJlbmNlUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICA8L29yZ2FuaXplcj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICA8L2NvbXBvbmVudD4KICAgCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgIAogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi4xNyIvPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSIyOTc2Mi0yIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTb2NpYWwgSGlzdG9yeSIvPgogICAgICAgICAgICAgICA8dGl0bGU+U09DSUFMIEhJU1RPUlk8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNvY2lhbCBIaXN0b3J5IEVsZW1lbnQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RWZmZWN0aXZlIERhdGVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InNvYzEiLz4gc21va2luZzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Gb3JtZXIgU21va2VyICgxIHBhY2sgcGVyIGRheTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDA1MDUwMSB0byAyMDExMDIyNzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0ic29jMiIvPiBzbW9raW5nPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkN1cnJlbnQgRXZlcnlkYXkgU21va2VyIDIgcGFja3MgcGVyIGRheTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDExMDIyNyAtIHRvZGF5PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8IS0tIFNtb2tpbmcgc3RhdHVzIG9ic2VydmF0aW9uIHRlbXBsYXRlIC0tPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMi40Ljc4Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjEyMzQ1Njc4OSIKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA1MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMTAyMjciLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4NTE3MDA2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iRm9ybWVyIHNtb2tlciIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIvPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjM4Ii8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjliNTZjMjVkLTkxMDQtNDVlZS05ZmE0LWUwZjNhZmFhMDFjMSIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIyMzAwNTYwMDQiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDaWdhcmV0dGUgc21va2luZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNzb2MxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNTA1MDEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTEwMjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJTVCI+MSBwYWNrIHBlciBkYXk8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjM4Ii8+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSI0NWVmYjYwNC03MDQ5LTRhMmUtYWQzMy1kMzg1NTZjOTYzNmMiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjMwMDU2MDA0IgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ2lnYXJldHRlIHNtb2tpbmciPgogICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjc29jMiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTEwMjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ0OTg2ODAwMiIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkN1cnJlbnQgRXZlcnlkYXkgU21va2VyIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2Ii8+CiAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAKICAgICAgICAgPGNvbXBvbmVudD4KICAgICAgICAgICAgPHNlY3Rpb24+CiAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjIuNC4xIi8+CiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9Ijg3MTYtMyIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJWSVRBTCBTSUdOUyIvPgogICAgICAgICAgICAgICA8dGl0bGU+VklUQUwgU0lHTlM8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduPSJyaWdodCI+RGF0ZSAvIFRpbWU6IDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Ob3YgMSwgMjAxMTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BdWd1c3QgNiwgMjAxMjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ249ImxlZnQiPkhlaWdodDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InZpdDEiPjY5IGluY2hlczwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJ2aXQyIj42OSBpbmNoZXM8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ249ImxlZnQiPldlaWdodDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InZpdDMiPjE4OSBsYnM8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0idml0NCI+MTk0IGxiczwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbj0ibGVmdCI+Qmxvb2QgUHJlc3N1cmU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InZpdDUiPjEzMi84NiBtbUhnPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0idml0NiI+MTQ1Lzg4IG1tSGc8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b3JnYW5pemVyCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iQ0xVU1RFUiIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjYiLz4KICAgICAgICAgICAgICAgICAgICAgPCEtLSBWaXRhbCBzaWducyBvcmdhbml6ZXIgdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSJjNmY4ODMyMC02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDY2ODAwMDUiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgLUNUIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iVml0YWwgc2lnbnMiLz4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDExMTEwMSIvPgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVml0YWwgU2lnbiBPYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImM2Zjg4MzIxLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4MzAyLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSGVpZ2h0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiN2aXQxIi8+PC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDgxMTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iUFEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI2OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iaW4iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVycHJldGF0aW9uQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJOIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjgzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVml0YWwgU2lnbiBPYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImM2Zjg4MzIxLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMTQxLTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUGF0aWVudCBCb2R5IFdlaWdodCAtIE1lYXN1cmVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiN2aXQ0Ii8+PC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTExMTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iUFEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxODkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9ImxicyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJwcmV0YXRpb25Db2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ik4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjciLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBWaXRhbCBTaWduIE9ic2VydmF0aW9uIHRlbXBsYXRlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYzZmODgzMjEtNjdhZC0xMWRiLWJkMTMtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ijg0ODAtNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJbnRyYXZhc2N1bGFyIFN5c3RvbGljIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiN2aXQ1Ii8+PC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTExMTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iUFEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxMzIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9Im1tW0hnXSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJwcmV0YXRpb25Db2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ik4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgIDwvb3JnYW5pemVyPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b3JnYW5pemVyCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iQ0xVU1RFUiIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjYiLz4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImM2Zjg4MzIwLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0NjY4MDAwNSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCAtQ1QiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJWaXRhbCBzaWducyIvPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjciLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSJjNmY4ODMyMS02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODMwMi0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkhlaWdodCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjdml0MiIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNjkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9ImluIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcnByZXRhdGlvbkNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iTiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICA8L2NvbXBvbmVudD4KICAgICAgICAgICAgICAgICAgICAgPGNvbXBvbmVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yNyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSJjNmY4ODMyMS02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzE0MS05IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBhdGllbnQgQm9keSBXZWlnaHQgLSBNZWFzdXJlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjdml0NCIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTk0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJsYnMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVycHJldGF0aW9uQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJOIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjgzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVml0YWwgU2lnbiBPYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImM2Zjg4MzIxLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4NDgwLTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSW50cmF2YXNjdWxhciBTeXN0b2xpYyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjdml0NiIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTQ1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJtbVtIZ10iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVycHJldGF0aW9uQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJOIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjgzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICA8L29yZ2FuaXplcj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICA8L2NvbXBvbmVudD4KICAKICAgIAogICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi40MSIvPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSI4NjUzLTgiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSE9TUElUQUwgRElTQ0hBUkdFIElOU1RSVUNUSU9OUyIvPgogICAgICAgICAgICAgICA8dGl0bGU+SE9TUElUQUwgRElTQ0hBUkdFIElOU1RSVUNUSU9OUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8Y29udGVudD4KICAgICAgICAgICAgICAgICAgICAgTXMuIEpvbmVzLCB5b3UgaGF2ZSBiZWVuIHNlZW4gYnkgRHIuIEhlbnJ5IFNldmVuIGF0IExvY2FsIENvbW11bml0eSBIb3NwaXRhbCBmcm9tIEF1Z3VzdCA4dGggdW50aWwgQXVndXN0IDEzdGggMjAxMi4gWW91IGFyZSBjdXJyZW50bHkgYmVpbmcgZGlzY2hhcmdlZCBmcm9tIExvY2FsIENvbW11bml0eSBIb3NwaXRhbC4gRHIuIFNldmVuIGhhcyBwcm92aWRlZCB0aGUgZm9sbG93aW5nIGluc3RydWN0aW9ucyB0byB5b3UgYXQgdGhpcyB0aW1lOyBzaG91bGQgeW91IGhhdmUgYW55IHF1ZXN0aW9ucyBwbGVhc2UgY29udGFjdCBhIG1lbWJlciBvZiB5b3VyIGhlYWx0aGNhcmUgdGVhbSBwcmlvciB0byBkaXNjaGFyZ2UuIElmIHlvdSBoYXZlIGxlZnQgdGhlIGhvc3BpdGFsIGFuZCBoYXZlIHF1ZXN0aW9ucywgcGxlYXNlIGNvbnRhY3QgRHIuIFNldmVuIGF0IDU1NS01NTUtMTAwMi4gCiAgICAgICAgICAgICAgICAgICAgIEluc3RydWN0aW9uczoKICAgICAgICAgICAgICAgICAgPC9jb250ZW50PgogICAgICAgICAgICAgICAgICA8bGlzdAogICAgICAgICAgICAgICAgICAgICBsaXN0VHlwZT0ib3JkZXJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxpdGVtPlRha2UgYWxsIG1lZGljYXRpb25zIGFzIHByZXNjcmliZWQuPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICA8aXRlbT5QbGVhc2UgbW9uaXRvciB5b3VyIHBlYWsgZmxvd3MuIElmIHlvdXIgcGVhayBmbG93cyBkcm9wIHRvIDUwJSBvZiBub3JtYWwsIGNhbGwgbXkgb2ZmaWNlIGltbWVkaWF0ZWx5IG9yIHJldHVybiB0byB0aGUgRW1lcmdlbmN5IFJvb20uPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICA8aXRlbT5JZiB5b3UgZXhwZXJpZW5jZSBhbnkgb2YgdGhlIGZvbGxvd2luZyBzeW1wdG9tcywgY2FsbCBteSBvZmZpY2UgaW1tZWRpYXRlbHkgb3IgcmV0dXJuIHRvIHRoZSBFbWVyZ2VuY3kgUm9vbToKICAgICAgICAgICAgICAgICAgICAgICAgPGxpc3QgbGlzdFR5cGU9Im9yZGVyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT5TaG9ydG5lc3Mgb2YgQnJlYXRoPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT5EaXp6aW5lc3Mgb3IgTGlnaHQtaGVhZGVkbmVzczwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGl0ZW0+RmV2ZXIsIGNoaWxscywgb3IgZGlmZnVzZSBib2R5IGFjaGVzPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT5QYWluIG9yIHJlZG5lc3MgYXQgdGhlIHNpdGUgb2YgYW55IHByZXZpb3VzIGludHJhdmVub3VzIGNhdGhldGVyPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT5Bbnkgb3RoZXIgdW51c3VhbCBwcm9ibGVtPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpc3Q+CiAgICAgICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICAgICAgPC9saXN0PgogICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjQ1Ii8+CiAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjY5NzMwLTAiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiBkaXNwbGF5TmFtZT0iSW5zdHJ1Y3Rpb25zIi8+CiAgICAgICAgICAgICAgIDx0aXRsZT5JbnN0cnVjdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICA8ZW50cnk+CiAgICAgICAgICAgICAgICAgIDxhY3QgY2xhc3NDb2RlPSJBQ1QiIG1vb2RDb2RlPSJJTlQiPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIwIi8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjQyMzU2NDAwNiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMTEuMjAuOS4zNCIgY29kZVN5c3RlbU5hbWU9InBhdGllbnRFZHVjYXRpb25UeXBlIiBkaXNwbGF5TmFtZT0iUHJvdmlkZXJJbnN0cnVjdGlvbnMiLz4KICAgICAgICAgICAgICAgICAgICAgPHRleHQ+ZGlldCBhbmQgZXhlcmNpc2UgY291bnNlbGluZyBwcm92aWRlZCBkdXJpbmcgdmlzaXQ8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93IHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgICAgIDxlbnRyeT4KICAgICAgICAgICAgICAgICAgPGFjdCBjbGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IklOVCI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iNDIzNTY0MDA2IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4xMS4yMC45LjM0IiBjb2RlU3lzdGVtTmFtZT0icGF0aWVudEVkdWNhdGlvblR5cGUiIGRpc3BsYXlOYW1lPSJQcm92aWRlckluc3RydWN0aW9ucyIvPgogICAgICAgICAgICAgICAgICAgICA8dGV4dD5yZXNvdXJjZXMgYW5kIGluc3RydWN0aW9ucyBwcm92aWRlZCBkdXJpbmcgdmlzaXQ8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93IHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgCiAgICAgIDwvc3RydWN0dXJlZEJvZHk+CiAgIDwvY29tcG9uZW50Pgo8L0NsaW5pY2FsRG9jdW1lbnQ+Cg==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1706764814478</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>a251ae6f-92a4-452e-b7b2-ecc3bdf6eccc</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>EncounterCCDA to FHIR</name>
      <description></description>
      <revision>21</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>Encounter</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var encounter = {};
encounter.resourceType = &quot;Encounter&quot;;


encounter.identifier = [];
var identifier = {};
identifier.type = {};
identifier.type.coding = [];
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &apos;https://loinc.org/&apos;;
coding.display = msg[&apos;section&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
identifier.type.coding.push(coding);

encounter.identifier.push(identifier);

encounter.status=&quot;completed&quot;

encounter.class = [];

var coding = {};
coding.code =msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;@classCode&apos;].toString();

encounter.class.push(coding);

encounter.type = []; 
var coding = {}; 

coding.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://www.ama-assn.org/go/cpt&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

encounter.type.push(coding);

//
//
//encounter.assignedEntity = [];
//
//var assignedEntity = {};
//assignedEntity.id = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;performer&apos;][&apos;assignedEntity&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
//assignedEntity.coding = [];
//
//var codingassignedEntity = {};
//codingassignedEntity.system = &quot;http://snomed.info/sct&quot;;
//codingassignedEntity.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;performer&apos;][&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
//codingassignedEntity.display = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;performer&apos;][&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
//assignedEntity.coding.push(codingassignedEntity);
//
//encounter.assignedEntity.push(assignedEntity);


encounter.participant = [];


var participant = {};
participant.type = {};
participant.type.coding = [];


var coding = {};
coding.system = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();


participant.type.coding.push(coding);


encounter.participant.push(participant);


encounter.diagnosis = [];


var diagnosisCoding = {};


diagnosisCoding.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][1][&apos;act&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
diagnosisCoding.system = &apos;https://loinc.org/&apos;;
diagnosisCoding.display = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][1][&apos;act&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();


encounter.diagnosis.push(diagnosisCoding);





//participant.address = [];
//
//var address = {};
//address.line = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;addr&apos;][&apos;streetAddressLine&apos;].toString();
//address.city = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;addr&apos;][&apos;city&apos;].toString();
//address.state = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;addr&apos;][&apos;state&apos;].toString();
//address.postalCode = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;addr&apos;][&apos;postalCode&apos;].toString();
//address.country = msg[&apos;section&apos;][&apos;entry&apos;][&apos;encounter&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;addr&apos;][&apos;country&apos;].toString();
//participant.address.push(address);
//
//encounter.participant.push(participant);

var json = JSON.stringify(encounter);
channelMap.put(&quot;Encounter&quot;, json);
logger.info(json);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">IDxjb21wb25lbnQgeG1sbnM9InVybjpobDctb3JnOnYzIj48c2VjdGlvbj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjIyLjEiLz48Y29kZSBjb2RlPSI0NjI0MC04IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIgZGlzcGxheU5hbWU9Ikhpc3Rvcnkgb2YgZW5jb3VudGVycyIvPjx0aXRsZT5FTkNPVU5URVJTPC90aXRsZT48dGV4dD48dGFibGUgYm9yZGVyPSIxIiB3aWR0aD0iMTAwJSI+PHRoZWFkPjx0cj48dGg+RW5jb3VudGVyPC90aD48dGg+UGVyZm9ybWVyPC90aD48dGg+TG9jYXRpb248L3RoPjx0aD5EYXRlPC90aD48L3RyPjwvdGhlYWQ+PHRib2R5Pjx0cj48dGQ+PGNvbnRlbnQgSUQ9IkVuY291bnRlcjEiLz4gUG51ZW1vbmlhPC90ZD48dGQ+RHIgSGVucnkgU2V2ZW48L3RkPjx0ZD5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L3RkPjx0ZD4yMDEyMDgwNjwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+PC90ZXh0PjxlbnRyeSB0eXBlQ29kZT0iRFJJViI+PGVuY291bnRlciBjbGFzc0NvZGU9IkVOQyIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC40OSIvPjxpZCByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZjRkZTgiLz48Y29kZSBjb2RlPSI5OTIyMiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xMiIgY29kZVN5c3RlbU5hbWU9IkNQVCIgY29kZVN5c3RlbVZlcnNpb249IjQiIGRpc3BsYXlOYW1lPSJJblBhdGllbnQgQWRtaXNzaW9uIj48b3JpZ2luYWxUZXh0Pk1pbGQgRmV2ZXI8cmVmZXJlbmNlIHZhbHVlPSIjRW5jb3VudGVyMSIvPjwvb3JpZ2luYWxUZXh0PjwvY29kZT48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxMjA4MDYiLz48cGVyZm9ybWVyPjxhc3NpZ25lZEVudGl0eT48aWQgcm9vdD0iMmE2MjAxNTUtOWQxMS00MzllLTkyYTMtNWQ5ODE1ZmY0ZGU4Ii8+PGNvZGUgY29kZT0iNTkwNTgwMDEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiIGRpc3BsYXlOYW1lPSJHZW5lcmFsIFBoeXNpY2lhbiIvPjwvYXNzaWduZWRFbnRpdHk+PC9wZXJmb3JtZXI+PHBhcnRpY2lwYW50IHR5cGVDb2RlPSJMT0MiPjxwYXJ0aWNpcGFudFJvbGUgY2xhc3NDb2RlPSJTRExPQyI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4zMiIvPjxjb2RlIGNvZGU9IjExNjAtMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4yNTkiIGNvZGVTeXN0ZW1OYW1lPSJIZWFsdGhjYXJlU2VydmljZUxvY2F0aW9uIiBkaXNwbGF5TmFtZT0iVXJnZW50IENhcmUgQ2VudGVyIi8+PGFkZHI+PHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcjwvc3RyZWV0QWRkcmVzc0xpbmU+PGNpdHk+UG9ydGxhbmQ8L2NpdHk+PHN0YXRlPk9SPC9zdGF0ZT48cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT48Y291bnRyeT5VUzwvY291bnRyeT48L2FkZHI+PHRlbGVjb20gbnVsbEZsYXZvcj0iVU5LIi8+PHBsYXlpbmdFbnRpdHkgY2xhc3NDb2RlPSJQTEMiPjxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT48L3BsYXlpbmdFbnRpdHk+PC9wYXJ0aWNpcGFudFJvbGU+PC9wYXJ0aWNpcGFudD48ZW50cnlSZWxhdGlvbnNoaXAgdHlwZUNvZGU9IlJTT04iPjxvYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4xOSIvPjxpZCBleHRlbnNpb249IjQ1NjY1IiByb290PSJkYjczNDY0Ny1mYzk5LTQyNGMtYTg2NC03ZTNjZGE4MmU3MDMiLz48Y29kZSBjb2RlPSI0MDQ2ODQwMDMiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiIGRpc3BsYXlOYW1lPSJGaW5kaW5nIi8+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWU+PGxvdyB2YWx1ZT0iMjAxMjA4MDYiLz48L2VmZmVjdGl2ZVRpbWU+PHZhbHVlIGNvZGU9IjIzMzYwNDAwNyIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIgZGlzcGxheU5hbWU9IlBuZXVtb25pYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9IkNEIi8+PC9vYnNlcnZhdGlvbj48L2VudHJ5UmVsYXRpb25zaGlwPjxlbnRyeVJlbGF0aW9uc2hpcCBpbnZlcnNpb25JbmQ9ImZhbHNlIiB0eXBlQ29kZT0iU1VCSiI+PGFjdCBjbGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC44MCIvPjxpZCByb290PSI1YTc4NDI2MC02ODU2LTRmMzgtOTYzOC04MGM3NTFhZmYyZmIiLz48Y29kZSBjb2RlPSIyOTMwOC00IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIgZGlzcGxheU5hbWU9IkVOQ09VTlRFUiBESUFHTk9TSVMiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJDRSIvPjxzdGF0dXNDb2RlIGNvZGU9ImFjdGl2ZSIvPjxlZmZlY3RpdmVUaW1lPjxsb3cgdmFsdWU9IjIwMTIwODA2Ii8+PC9lZmZlY3RpdmVUaW1lPjxlbnRyeVJlbGF0aW9uc2hpcCBpbnZlcnNpb25JbmQ9ImZhbHNlIiB0eXBlQ29kZT0iU1VCSiI+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIiBuZWdhdGlvbkluZD0iZmFsc2UiPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNCIvPjwhLS0gUHJvYmxlbSBPYnNlcnZhdGlvbiAtLT48aWQgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+PGNvZGUgY29kZT0iNDA5NTg2MDA2IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IiBkaXNwbGF5TmFtZT0iQ29tcGxhaW50Ii8+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWU+PGxvdyB2YWx1ZT0iMjAxMjA4MDYiLz48L2VmZmVjdGl2ZVRpbWU+PHZhbHVlIGNvZGU9IjIzMzYwNDAwNyIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIgZGlzcGxheU5hbWU9IlBuZXVtb25pYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9IkNEIi8+PC9vYnNlcnZhdGlvbj48L2VudHJ5UmVsYXRpb25zaGlwPjwvYWN0PjwvZW50cnlSZWxhdGlvbnNoaXA+PC9lbmNvdW50ZXI+PC9lbnRyeT48L3NlY3Rpb24+PC9jb21wb25lbnQ+</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707192235496</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>fbe833fb-44f3-488e-90dd-dda84ef7ca90</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>PatientAllergy</name>
      <description></description>
      <revision>21</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>Allergy</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var allergy = {};

allergy.resourceType = msg[&apos;section&apos;][&apos;title&apos;].toString();

//allergy.clinicalStatus = {};
//allergy.clinicalStatus.coding = [];
//var coding1 = {};
//coding1.system = &quot;http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical&quot;;
//coding1.display = &quot;Active&quot;;
//allergy.clinicalStatus.coding.push(coding1);
//
//allergy.type = {};
//allergy.type.coding = [];
//var coding2 = {};
//coding2.system = &quot;http://hl7.org/fhir/allergy-intolerance-type&quot;;
//coding2.code = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
//allergy.type.coding.push(coding2);
//
//allergy.category = [];

allergy.code = {};
allergy.code.coding = [];
var coding3 = {};
coding3.system = &quot;http://snomed.info/sct&quot;;
coding3.code = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
coding3.display = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();
allergy.code.coding.push(coding3);

allergy.onSetDate = DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
allergy.recordedDate = DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString());

//allergy.participant = [];
//var participant1 = {};
//participant1.coding = [];
//var coding4 = {};
//coding4.system = &quot;http://terminology.hl7.org/CodeSystem/provenance-participant-type&quot;;
//coding4.code = &quot;author&quot;;
//coding4.display = &quot;Author&quot;;
//participant1.coding.push(coding4);
////participant1.actor = {};
////participant1.actor.reference = &quot;Practitioner/&quot; + msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
//allergy.participant.push(participant1);
//
//var participant2 = {};
//participant2.coding = [];
//var coding5 = {};
//coding5.system = &quot;http://terminology.hl7.org/CodeSystem/provenance-participant-type&quot;;
//coding5.code = &quot;informant&quot;;
//coding5.display = &quot;Informant&quot;;
//participant2.coding.push(coding5);
////participant2.actor = {};
////participant2.actor.reference = &quot;Patient/&quot; + msg[&apos;informant&apos;][0][&apos;assignedEntity&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
//allergy.participant.push(participant2);
//
//allergy.lastOccurrence = DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;effectiveTime&apos;][&apos;@value&apos;].toString());

allergy.reaction = [];

for (var i = 0; i &lt; 3; i++) {
    var reaction = {};
    reaction.substance = {};
    reaction.substance.coding = [];
    var coding6 = {};
    coding6.system = &quot;http://www.nlm.nih.gov/research/umls/rxnorm&quot;;
    coding6.code = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;playingEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
    coding6.display = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;playingEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
    reaction.substance.coding.push(coding6);

    reaction.manifestation = [];
    var manifestation = {};
    manifestation.concept = {};
    manifestation.concept.coding = [];
    var coding7 = {};
    coding7.system = &quot;http://snomed.info/sct&quot;;
    coding7.code = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][1][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
    coding7.display = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][1][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();
    manifestation.concept.coding.push(coding7);
    reaction.manifestation.push(manifestation);

    reaction.status = {};
    reaction.status.code = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][0][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
    reaction.status.display = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][0][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
    reaction.status.value = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][0][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();

    reaction.onsetDate = DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][1][&apos;observation&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString());
    reaction.severity = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][2][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();

    allergy.reaction.push(reaction);
}

var tmp = JSON.stringify(allergy);
channelMap.put(&quot;Allergy&quot;, tmp);
logger.info(tmp);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707204119328</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>a994d7f5-0da5-4bcd-8016-347d3b180fbc</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>ImmunizationCCDA to FHIR</name>
      <description></description>
      <revision>14</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>Immunization</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var immunization = {};
immunization.resourceType = &quot;Immunization&quot;;
immunization.identifier = [];

var identifiers = {};
identifiers.type = {};
identifiers.type.coding = [];

var coding = {};
coding.system = &quot;https://loinc.org/&quot;;
coding.code = msg[&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.display = msg[&apos;section&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
identifiers.type.coding.push(coding);

immunization.identifier.push(identifiers);

immunization.status = &quot;completed&quot;;

immunization.vaccineCode = [];
    
for (var i = 0; i &lt; 3; i++) {
    var vaccineEntry = {};
    vaccineEntry.coding = [];
    
    coding = {};
    coding.system = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;routeCode&apos;][&apos;@codeSystemName&apos;].toString();
    coding.code = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;routeCode&apos;][&apos;@code&apos;].toString();
    coding.display = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;routeCode&apos;][&apos;@displayName&apos;].toString();
    vaccineEntry.coding.push(coding);
    
    vaccineEntry.manufacturer = {};
    vaccineEntry.manufacturer.name = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturerOrganization&apos;][&apos;name&apos;].toString();
    vaccineEntry.manufacturer.coding = [];
    
    coding = {};
    coding.system = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
    coding.Material = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
    coding.code = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
    coding.display = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;translation&apos;][&apos;@displayName&apos;].toString();
    vaccineEntry.manufacturer.coding.push(coding);
    
    vaccineEntry.route = {};
    vaccineEntry.route.code = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;routeCode&apos;][&apos;@code&apos;].toString();
    vaccineEntry.route.system = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;routeCode&apos;][&apos;@codeSystemName&apos;].toString();
    vaccineEntry.route.display = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;routeCode&apos;][&apos;@displayName&apos;].toString();
    
    immunization.vaccineCode.push(vaccineEntry);
    
    var doseQuantity = {};
    doseQuantity.value = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@value&apos;].toString();
    doseQuantity.unit = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;].toString();
    immunization.doseQuantity = doseQuantity;
}

var tmp = JSON.stringify(immunization);
channelMap.put(&quot;immunization&quot;, tmp);
logger.info(JSON.stringify(immunization));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PGNvbXBvbmVudCB4bWxucz0idXJuOmhsNy1vcmc6djMiPjxzZWN0aW9uPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjIuMi4xIi8+PGNvZGUgY29kZT0iMTEzNjktNiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIGRpc3BsYXlOYW1lPSJIaXN0b3J5IG9mIGltbXVuaXphdGlvbnMiLz48dGl0bGU+SU1NVU5JWkFUSU9OUzwvdGl0bGU+PHRleHQ+PGNvbnRlbnQgSUQ9ImltbXVuU2VjdCIvPjx0YWJsZSBib3JkZXI9IjEiIHdpZHRoPSIxMDAlIj48dGhlYWQ+PHRyPjx0aD5WYWNjaW5lPC90aD48dGg+RGF0ZTwvdGg+PHRoPlN0YXR1czwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT48dHI+PHRkPjxjb250ZW50IElEPSJpbW11bjIiLz5JbmZsdWVuemEgdmlydXMgdmFjY2luZSwgSU08L3RkPjx0ZD5NYXkgMjAxMjwvdGQ+PHRkPkNvbXBsZXRlZDwvdGQ+PC90cj48dHI+PHRkPjxjb250ZW50IElEPSJpbW11bjQiLz5UZXRhbnVzIGFuZCBkaXBodGhlcmlhIHRveG9pZHMsIElNPC90ZD48dGQ+QXByIDIwMTI8L3RkPjx0ZD5Db21wbGV0ZWQ8L3RkPjwvdHI+PHRyPjx0ZD48Y29udGVudCBJRD0iaW1tdW42Ii8+SW5mbHVlbnphIHZpcnVzIHZhY2NpbmUsIElNPC90ZD48dGQ+QXVnIDIwMTI8L3RkPjx0ZD5EZWNsaW5lZDwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+PC90ZXh0PjxlbnRyeSB0eXBlQ29kZT0iRFJJViI+PHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uIGNsYXNzQ29kZT0iU0JBRE0iIG1vb2RDb2RlPSJFVk4iIG5lZ2F0aW9uSW5kPSJmYWxzZSI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41MiIvPjxpZCByb290PSJlNmYxYmE0My1jMGVkLTRiOWItOWYxMi1mNDM1ZDhhZDhmOTIiLz48dGV4dD48cmVmZXJlbmNlIHZhbHVlPSIjaW1tdW4yIi8+PC90ZXh0PjxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDEyMDUxMCIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9IklWTF9UUyIvPjxyb3V0ZUNvZGUgY29kZT0iQzI4MTYxIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI2LjEuMSIgY29kZVN5c3RlbU5hbWU9Ik5hdGlvbmFsIENhbmNlciBJbnN0aXR1dGUgKE5DSSkgVGhlc2F1cnVzIiBkaXNwbGF5TmFtZT0iSW50cmFtdXNjdWxhciBpbmplY3Rpb24iLz48ZG9zZVF1YW50aXR5IHVuaXQ9Im1jZyIgdmFsdWU9IjUwIi8+PGNvbnN1bWFibGU+PG1hbnVmYWN0dXJlZFByb2R1Y3QgY2xhc3NDb2RlPSJNQU5VIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjU0Ii8+PG1hbnVmYWN0dXJlZE1hdGVyaWFsPjxjb2RlIGNvZGU9Ijg4IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5IiBjb2RlU3lzdGVtTmFtZT0iQ1ZYIiBkaXNwbGF5TmFtZT0iSW5mbHVlbnphIHZpcnVzIHZhY2NpbmUiPjxvcmlnaW5hbFRleHQ+SW5mbHVlbnphIHZpcnVzIHZhY2NpbmU8L29yaWdpbmFsVGV4dD48dHJhbnNsYXRpb24gY29kZT0iMTExIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5IiBjb2RlU3lzdGVtTmFtZT0iQ1ZYIiBkaXNwbGF5TmFtZT0iaW5mbHVlbnphLCBsaXZlLCBpbnRyYW5hc2FsIi8+PC9jb2RlPjwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+PG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj48bmFtZT5IZWFsdGggTFMgLSBJbW11bm8gSW5jLjwvbmFtZT48L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj48L21hbnVmYWN0dXJlZFByb2R1Y3Q+PC9jb25zdW1hYmxlPjxlbnRyeVJlbGF0aW9uc2hpcCBpbnZlcnNpb25JbmQ9InRydWUiIHR5cGVDb2RlPSJTVUJKIj48YWN0IGNsYXNzQ29kZT0iQUNUIiBtb29kQ29kZT0iSU5UIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIwIi8+PCEtLSAqKiBJbnN0cnVjdGlvbnMgVGVtcGxhdGUgKiogLS0+PGNvZGUgY29kZT0iMTcxMDQ0MDAzIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IiBkaXNwbGF5TmFtZT0iaW1tdW5pemF0aW9uIGVkdWNhdGlvbiIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9IkNFIi8+PHRleHQ+PHJlZmVyZW5jZSB2YWx1ZT0iI2ltbXVuU2VjdCIvPlBvc3NpYmxlIGZsdS1saWtlIHN5bXB0b21zIGZvciB0aHJlZSBkYXlzLjwvdGV4dD48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+PC9lbnRyeT48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjxzdWJzdGFuY2VBZG1pbmlzdHJhdGlvbiBjbGFzc0NvZGU9IlNCQURNIiBtb29kQ29kZT0iRVZOIiBuZWdhdGlvbkluZD0iZmFsc2UiPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNTIiLz48aWQgcm9vdD0iZTZmMWJhNDMtYzBlZC00YjliLTlmMTItZjQzNWQ4YWQ4ZjkyIi8+PHRleHQ+PHJlZmVyZW5jZSB2YWx1ZT0iI2ltbXVuNCIvPjwvdGV4dD48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxMjA0MDEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJJVkxfVFMiLz48cm91dGVDb2RlIGNvZGU9IkMyODE2MSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNi4xLjEiIGNvZGVTeXN0ZW1OYW1lPSJOYXRpb25hbCBDYW5jZXIgSW5zdGl0dXRlIChOQ0kpIFRoZXNhdXJ1cyIgZGlzcGxheU5hbWU9IkludHJhbXVzY3VsYXIgaW5qZWN0aW9uIi8+PGRvc2VRdWFudGl0eSB1bml0PSJtY2ciIHZhbHVlPSI1MCIvPjxjb25zdW1hYmxlPjxtYW51ZmFjdHVyZWRQcm9kdWN0IGNsYXNzQ29kZT0iTUFOVSI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41NCIvPjxtYW51ZmFjdHVyZWRNYXRlcmlhbD48Y29kZSBjb2RlPSIxMDMiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuNTkiIGNvZGVTeXN0ZW1OYW1lPSJDVlgiIGRpc3BsYXlOYW1lPSJUZXRhbnVzIGFuZCBkaXBodGhlcmlhIHRveG9pZHMgLSBwcmVzZXJ2YXRpdmUgZnJlZSI+PG9yaWdpbmFsVGV4dD5UZXRhbnVzIGFuZCBkaXBodGhlcmlhIHRveG9pZHMgLSBwcmVzZXJ2YXRpdmUgZnJlZTwvb3JpZ2luYWxUZXh0Pjx0cmFuc2xhdGlvbiBjb2RlPSIwOSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi41OSIgY29kZVN5c3RlbU5hbWU9IkNWWCIgZGlzcGxheU5hbWU9IlRldGFudXMgYW5kIGRpcGh0aGVyaWEgdG94b2lkcyAtIHByZXNlcnZhdGl2ZSBmcmVlIi8+PC9jb2RlPjwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+PG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj48bmFtZT5IZWFsdGggTFMgLSBJbW11bm8gSW5jLjwvbmFtZT48L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj48L21hbnVmYWN0dXJlZFByb2R1Y3Q+PC9jb25zdW1hYmxlPjxlbnRyeVJlbGF0aW9uc2hpcCBpbnZlcnNpb25JbmQ9InRydWUiIHR5cGVDb2RlPSJTVUJKIj48YWN0IGNsYXNzQ29kZT0iQUNUIiBtb29kQ29kZT0iSU5UIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIwIi8+PCEtLSAqKiBJbnN0cnVjdGlvbnMgVGVtcGxhdGUgKiogLS0+PGNvZGUgY29kZT0iMTcxMDQ0MDAzIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IiBkaXNwbGF5TmFtZT0iaW1tdW5pemF0aW9uIGVkdWNhdGlvbiIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9IkNFIi8+PHRleHQ+PHJlZmVyZW5jZSB2YWx1ZT0iI2ltbXVuU2VjdCIvPlBvc3NpYmxlIGZsdS1saWtlIHN5bXB0b21zIGZvciB0aHJlZSBkYXlzLjwvdGV4dD48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+PC9lbnRyeT48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjxzdWJzdGFuY2VBZG1pbmlzdHJhdGlvbiBjbGFzc0NvZGU9IlNCQURNIiBtb29kQ29kZT0iRVZOIiBuZWdhdGlvbkluZD0idHJ1ZSI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41MiIvPjxpZCByb290PSJlNmYxYmE0My1jMGVkLTRiOWItOWYxMi1mNDM1ZDhhZDhmOTIiLz48dGV4dD48cmVmZXJlbmNlIHZhbHVlPSIjaW1tdW42Ii8+PC90ZXh0PjxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDEyMDYwMyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9IklWTF9UUyIvPjxyb3V0ZUNvZGUgY29kZT0iQzI4MTYxIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI2LjEuMSIgY29kZVN5c3RlbU5hbWU9Ik5hdGlvbmFsIENhbmNlciBJbnN0aXR1dGUgKE5DSSkgVGhlc2F1cnVzIiBkaXNwbGF5TmFtZT0iSW50cmFtdXNjdWxhciBpbmplY3Rpb24iLz48ZG9zZVF1YW50aXR5IHVuaXQ9Im1jZyIgdmFsdWU9IjUwIi8+PGNvbnN1bWFibGU+PG1hbnVmYWN0dXJlZFByb2R1Y3QgY2xhc3NDb2RlPSJNQU5VIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjU0Ii8+PG1hbnVmYWN0dXJlZE1hdGVyaWFsPjxjb2RlIGNvZGU9Ijg4IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5IiBjb2RlU3lzdGVtTmFtZT0iQ1ZYIiBkaXNwbGF5TmFtZT0iSW5mbHVlbnphIHZpcnVzIHZhY2NpbmUiPjxvcmlnaW5hbFRleHQ+SW5mbHVlbnphIHZpcnVzIHZhY2NpbmU8L29yaWdpbmFsVGV4dD48dHJhbnNsYXRpb24gY29kZT0iMTExIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5IiBjb2RlU3lzdGVtTmFtZT0iQ1ZYIiBkaXNwbGF5TmFtZT0iaW5mbHVlbnphLCBsaXZlLCBpbnRyYW5hc2FsIi8+PC9jb2RlPjwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+PG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj48bmFtZT5IZWFsdGggTFMgLSBJbW11bm8gSW5jLjwvbmFtZT48L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj48L21hbnVmYWN0dXJlZFByb2R1Y3Q+PC9jb25zdW1hYmxlPjwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+PC9lbnRyeT48L3NlY3Rpb24+PC9jb21wb25lbnQ+</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707211812292</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>00b90a79-1db7-4215-b468-3a8b41c8f926</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>MedicationsCCDA to FHIR</name>
      <description></description>
      <revision>6</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>Medication</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var medications = {};

medications.resourceType = &quot;Medications&quot;;

medications.code = [];
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &quot;https://loinc.org/&quot;
coding.display = msg[&apos;section&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

medications.code.push(coding);

//medications.status = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString();

//medications.consumable = {};
//medications.consumable.manufacture = [];
//var manufactureCoding = {};
//manufactureCoding.id = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
//manufactureCoding.display = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
//medications.consumable.manufacture.push(manufactureCoding);
//
//var material = {};
//material.code = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
//material.system = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
//material.display = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;consumable&apos;][&apos;manufacturedProduct&apos;][&apos;manufacturedMaterial&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
//medications.consumable.manufacture.push(material);

medications.doseForm = {};
medications.doseForm.unit = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;].toString();
medications.doseForm.value = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@value&apos;].toString();


medications.amount=msg[&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;entryRelationship&apos;][1][&apos;supply&apos;][&apos;quantity&apos;][&apos;@value&apos;].toString();
 
medications.manufacture = [];
var manufacture1 = {};
manufacture1.reference = {};
reference.id = msg[&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;entryRelationship&apos;][1][&apos;supply&apos;][&apos;product&apos;][&apos;manufacturedProduct&apos;][&apos;id&apos;][&apos;@root&apos;].toString();

medications.manufacture.push(manufacture1.reference);


medications.ingredient = []; 
var ingredient = {}; 
ingredient.unit = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;rateQuantity&apos;][&apos;@unit&apos;].toString();
ingredient.value = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][3][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;rateQuantity&apos;][&apos;@value&apos;].toString();
medications.ingredient.push(ingredient);


var tmp = JSON.stringify(medications);

channelMap.put(&quot;medications&quot;, tmp);

logger.info(JSON.stringify(medications));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707222929308</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>2932c97a-c14d-44c3-8eb5-1543b86e11b4</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>TreatmentcareplanCCDA to FHIR</name>
      <description></description>
      <revision>21</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var carePlan = {};
carePlan.resourceType = msg[&apos;section&apos;][&apos;title&apos;].toString();

// Initialize empty array for identifiers
carePlan.identifier = [];

var identifier = { type: [] };
var coding = {};
coding.code =  msg.section.code[&apos;@code&apos;].toString();
coding.system = msg.section.code[&apos;@codeSystem&apos;].toString();
coding.display = msg.section.code[&apos;@displayName&apos;].toString();

identifier.type.push(coding);
carePlan.identifier = [identifier];




carePlan.status = &quot;completed&quot;;
carePlan.intent = &quot;plan&quot;;

carePlan.subject = {};
carePlan.subject.reference = msg[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString();

carePlan.category = [];
carePlan.category.push({ coding: {} });
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;encounter&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://www.ama-assn.org/go/cpt&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;encounter&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
carePlan.category[0].coding = coding;

carePlan.activity = [];
carePlan.activity.push({ detail: { code: [] } });
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;procedure&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://snomed.info/sct&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;procedure&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
carePlan.activity[0].detail.code.push(coding);

carePlan.detail={}
carePlan.detail.status=msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;procedure&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString();

carePlan.activity1 = [];
carePlan.activity1.push({ detail: { code: [] } });
var coding1 = {};
coding1.code = msg[&apos;section&apos;][&apos;entry&apos;][2][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding1.system = msg[&apos;section&apos;][&apos;entry&apos;][2][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
coding1.display = msg[&apos;section&apos;][&apos;entry&apos;][2][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
carePlan.activity1[0].detail.code.push(coding1);

carePlan.detail1 = {};
carePlan.detail1.status = msg[&apos;section&apos;][&apos;entry&apos;][2][&apos;observation&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString();

var tmp = JSON.stringify(carePlan);
channelMap.put(&quot;carePlan&quot;, tmp);
logger.info(tmp);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">IDxjb21wb25lbnQgeG1sbnM9InVybjpobDctb3JnOnYzIj48c2VjdGlvbj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjEwIi8+PGNvZGUgY29kZT0iMTg3NzYtNSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIGRpc3BsYXlOYW1lPSJUcmVhdG1lbnQgcGxhbiIvPjx0aXRsZT5DQVJFIFBMQU48L3RpdGxlPjx0ZXh0Pjx0YWJsZSBib3JkZXI9IjEiIHdpZHRoPSIxMDAlIj48dGhlYWQ+PHRyPjx0aD5QbGFubmVkIEFjdGl2aXR5PC90aD48dGg+UGxhbm5lZCBEYXRlPC90aD48L3RyPjwvdGhlYWQ+PHRib2R5Pjx0cj48dGQ+Q29uc3VsdGF0aW9uIHdpdGggRHIgR2VvcmdlIFBvdG9tYWMgZm9yIEFzdGhtYTwvdGQ+PHRkPjIwMTIwODIwPC90ZD48L3RyPjx0cj48dGQ+Q2hlc3QgWC1yYXk8L3RkPjx0ZD4yMDEyMDgyNjwvdGQ+PC90cj48dHI+PHRkPlNwdXR1bSBDdWx0dXJlPC90ZD48dGQ+MjAxMjA4MjA8L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPjwvdGV4dD48ZW50cnk+PGVuY291bnRlciBjbGFzc0NvZGU9IkVOQyIgbW9vZENvZGU9IklOVCI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC40MCIvPjxpZCByb290PSI5YTZkMWJhYy0xN2QzLTQxOTUtODlhNC0xMTIxYmM4MDliNGQiLz48Y29kZSBjb2RlPSI5OTI0MSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xMiIgY29kZVN5c3RlbU5hbWU9IkNQVCIgZGlzcGxheU5hbWU9Ik9mZmljZSBjb25zdWx0YXRpb24gLSAxNSBtaW51dGVzIi8+PGVmZmVjdGl2ZVRpbWU+PGNlbnRlciB2YWx1ZT0iMjAxMjA4MjAiLz48L2VmZmVjdGl2ZVRpbWU+PGVudHJ5UmVsYXRpb25zaGlwIGludmVyc2lvbkluZD0idHJ1ZSIgdHlwZUNvZGU9IlNVQkoiPjxhY3QgY2xhc3NDb2RlPSJBQ1QiIG1vb2RDb2RlPSJJTlQiPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz48Y29kZSBjb2RlPSI0MDkwNzMwMDciIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiIGRpc3BsYXlOYW1lPSJpbnN0cnVjdGlvbiIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9IkNFIi8+PHRleHQ+Rm9sbG93IHVwIHdpdGggRHIgR2VvcmdlIFBvdG9tYWMgZm9yIEFzdGhtYTwvdGV4dD48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjwvZW5jb3VudGVyPjwvZW50cnk+PGVudHJ5Pjxwcm9jZWR1cmUgY2xhc3NDb2RlPSJQUk9DIiBtb29kQ29kZT0iUlFPIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjQxIi8+PGlkIHJvb3Q9IjlhNmQxYmFjLTE3ZDMtNDE5NS04OWM0LTExMjFiYzgwOWI1YSIvPjxjb2RlIGNvZGU9IjE2ODczMTAwOSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIgY29kZVN5c3RlbU5hbWU9IlNOT01FRC1DVCIgZGlzcGxheU5hbWU9IkNoZXN0IFgtUmF5Ii8+PHN0YXR1c0NvZGUgY29kZT0ibmV3Ii8+PGVmZmVjdGl2ZVRpbWU+PGNlbnRlciB2YWx1ZT0iMjAxMjA4MjYiLz48L2VmZmVjdGl2ZVRpbWU+PC9wcm9jZWR1cmU+PC9lbnRyeT48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjxvYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IlJRTyI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC40NCIvPjxpZCByb290PSI5YTZkMWJhYy0xN2QzLTQxOTUtODlhNC0xMTIxYmM4MDliNGEiLz48Y29kZSBjb2RlPSI2MjQtNyIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBkaXNwbGF5TmFtZT0iU3B1dHVtIEN1bHR1cmUiLz48c3RhdHVzQ29kZSBjb2RlPSJuZXciLz48ZWZmZWN0aXZlVGltZT48Y2VudGVyIHZhbHVlPSIyMDEyMDgyMCIvPjwvZWZmZWN0aXZlVGltZT48L29ic2VydmF0aW9uPjwvZW50cnk+PC9zZWN0aW9uPjwvY29tcG9uZW50Pg==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707285258182</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>9e3027f5-df9b-49a9-8a15-039cfa5a8d9e</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>patientproblemCCDA to FHIR</name>
      <description></description>
      <revision>18</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>problem</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var problem = {};
problem.resourceType = msg[&apos;section&apos;][&apos;title&apos;].toString();


problem.identifier = [];

var identifier = { type: [] };
var coding = {};
coding.code =  msg.section.code[&apos;@code&apos;].toString();
coding.system = msg.section.code[&apos;@codeSystem&apos;].toString();
coding.display = msg.section.code[&apos;@displayName&apos;].toString();

identifier.type.push(coding);
problem.identifier = [identifier];

problem.status=&quot;completed&quot;

problem.subject = {};
problem.subject.reference = msg[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString();

problem.category = { code: [] };
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

problem.category.code.push(coding);

problem.category1={healthstatus : []};
var coding1={}
coding1.code=msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][2][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding1.system=&quot;https://loinc.org/&quot;;
coding1.display=msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][2][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

problem.category1.healthstatus.push(coding1);


//
//problem.severity = { code: [] };
//var coding = {};
//coding.code = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][0][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
//coding.system = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][0][&apos;observation&apos;][&apos;value&apos;][&apos;@codeSystem&apos;].toString();
//coding.display = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][0][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();
//
//problem.severity.code.push(coding);
//
problem.code1 = [];
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][2][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://snomed.info/sct&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][2][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();

problem.code1.push(coding);

problem.code2 = [];
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][3][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://snomed.info/sct&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][3][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();

problem.code2.push(coding);

problem.code3 = [];
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][2][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://snomed.info/sct&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][2][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();

problem.code3.push(coding);

problem.code4 = [];
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][0][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://snomed.info/sct&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][0][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();

problem.code4.push(coding);

problem.code5 = [];
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][3][&apos;observation&apos;][&apos;value&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://snomed.info/sct&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][1][&apos;act&apos;][&apos;entryRelationship&apos;][&apos;observation&apos;][&apos;entryRelationship&apos;][3][&apos;observation&apos;][&apos;value&apos;][&apos;@displayName&apos;].toString();

problem.code5.push(coding);


var tmp = JSON.stringify(problem);

channelMap.put(&quot;problem&quot;, tmp);

logger.info(tmp);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707302945680</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>21c1442b-3c85-4ae8-82a4-f489beb15d90</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>procedure CCDA to FHIR</name>
      <description></description>
      <revision>10</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>procedure</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var procedure = {};

procedure.resourceType=msg[&apos;section&apos;][&apos;title&apos;].toString();

procedure.identifier = [];
var identifier = { type: [] };
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = msg[&apos;section&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
coding.display = msg[&apos;section&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

identifier.type.push(coding);
procedure.identifier = [identifier];

procedure.status=&quot;completed&quot;;


procedure.code=[]
var coding={}
coding.code=msg[&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &quot;https://www.snomed.org/&quot;;
coding.display =msg[&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
procedure.code.push(coding);

procedure.subject={}
procedure.subject.reference=msg[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString();

procedure.performer=[]
var performer1={};
performer1.id=msg[&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;performer&apos;][&apos;assignedEntity&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
procedure.performer.push(performer1);




//procedure.participant = [];
//var participantCode = {};
//var coding = {};
//coding.code = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][8][&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
//coding.system = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][8][&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
//coding.display = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][8][&apos;section&apos;][&apos;entry&apos;][&apos;procedure&apos;][&apos;participant&apos;][&apos;participantRole&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
//
//participantCode.coding = coding;
//procedure.participant.push(participantCode);

var tmp = JSON.stringify(procedure);

channelMap.put(&quot;procedure&quot;, tmp);

logger.info(JSON.stringify(procedure));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PGNvbXBvbmVudCB4bWxucz0idXJuOmhsNy1vcmc6djMiPjxzZWN0aW9uPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjIuNy4xIi8+PGNvZGUgY29kZT0iNDc1MTktNCIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIGRpc3BsYXlOYW1lPSJISVNUT1JZIE9GIFBST0NFRFVSRVMiLz48dGl0bGU+UFJPQ0VEVVJFUzwvdGl0bGU+PHRleHQ+PHRhYmxlIGJvcmRlcj0iMSIgd2lkdGg9IjEwMCUiPjx0aGVhZD48dHI+PHRoPlByb2NlZHVyZTwvdGg+PHRoPkRhdGU8L3RoPjwvdHI+PC90aGVhZD48dGJvZHk+PHRyPjx0ZD48Y29udGVudCBJRD0iUHJvYzIiPkNoZXN0IFgtUmF5PC9jb250ZW50PjwvdGQ+PHRkPjgvNy8yMDEyPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48L3RleHQ+PGVudHJ5IHR5cGVDb2RlPSJEUklWIj48cHJvY2VkdXJlIGNsYXNzQ29kZT0iUFJPQyIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4xNCIvPjxpZCBleHRlbnNpb249IjEyMzQ1Njc4OSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkiLz48Y29kZSBjb2RlPSIxNjg3MzEwMDkiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQtQ1QiIGRpc3BsYXlOYW1lPSJDaGVzdCBYLVJheSI+PG9yaWdpbmFsVGV4dD48cmVmZXJlbmNlIHZhbHVlPSIjUHJvYzIiLz48L29yaWdpbmFsVGV4dD48L2NvZGU+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTIwODA3Ii8+PHByaW9yaXR5Q29kZSBjb2RlPSJDUiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS43IiBjb2RlU3lzdGVtTmFtZT0iQWN0UHJpb3JpdHkiIGRpc3BsYXlOYW1lPSJDYWxsYmFjayByZXN1bHRzIi8+PG1ldGhvZENvZGUgbnVsbEZsYXZvcj0iVU5LIi8+PHRhcmdldFNpdGVDb2RlIGNvZGU9IjgyMDk0MDA4IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IiBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIiBkaXNwbGF5TmFtZT0iTG93ZXIgUmVzcGlyYXRvcnkgVHJhY3QgU3RydWN0dXJlIi8+PHBlcmZvcm1lcj48YXNzaWduZWRFbnRpdHk+PGlkIGV4dGVuc2lvbj0iMTIzNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNSIvPjxhZGRyPjxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPjxjaXR5PlBvcnRsYW5kPC9jaXR5PjxzdGF0ZT5PUjwvc3RhdGU+PHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+PGNvdW50cnk+VVM8L2NvdW50cnk+PC9hZGRyPjx0ZWxlY29tIHVzZT0iV1AiIHZhbHVlPSIoNTU1KTU1NS01NTUtMTIzNCIvPjxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbj48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNSIvPjxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT48dGVsZWNvbSBudWxsRmxhdm9yPSJVTksiLz48YWRkciBudWxsRmxhdm9yPSJVTksiLz48L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPjwvYXNzaWduZWRFbnRpdHk+PC9wZXJmb3JtZXI+PHBhcnRpY2lwYW50IHR5cGVDb2RlPSJMT0MiPjxwYXJ0aWNpcGFudFJvbGUgY2xhc3NDb2RlPSJTRExPQyI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4zMiIvPjxjb2RlIGNvZGU9IjExNjAtMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4yNTkiIGNvZGVTeXN0ZW1OYW1lPSJIZWFsdGhjYXJlU2VydmljZUxvY2F0aW9uIiBkaXNwbGF5TmFtZT0iVXJnZW50IENhcmUgQ2VudGVyIi8+PGFkZHI+PHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcjwvc3RyZWV0QWRkcmVzc0xpbmU+PGNpdHk+UG9ydGxhbmQ8L2NpdHk+PHN0YXRlPk9SPC9zdGF0ZT48cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT48Y291bnRyeT5VUzwvY291bnRyeT48L2FkZHI+PHRlbGVjb20gbnVsbEZsYXZvcj0iVU5LIi8+PHBsYXlpbmdFbnRpdHkgY2xhc3NDb2RlPSJQTEMiPjxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT48L3BsYXlpbmdFbnRpdHk+PC9wYXJ0aWNpcGFudFJvbGU+PC9wYXJ0aWNpcGFudD48L3Byb2NlZHVyZT48L2VudHJ5Pjwvc2VjdGlvbj48L2NvbXBvbmVudD4=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707309781775</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>c7440439-58cc-475f-81ff-322ebe1789eb</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>vital CCDA to FHIR</name>
      <description></description>
      <revision>16</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>Vital</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var vital = {};

vital.resourceType = msg[&apos;section&apos;][&apos;title&apos;].toString();

vital.subject = {};
vital.subject.reference = msg[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString();

vital.identifier = [];
var identifier = { type: [] };
var coding = {}
coding.code = msg[&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &quot;https://loinc.org/&quot;;
coding.display = msg[&apos;section&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

identifier.type.push(coding);
vital.identifier.push(identifier);

vital.status = &quot;completed&quot;;

vital.category = [];
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;organizer&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &quot;http://terminology.hl7.org/CodeSystem/observation-category&quot;;
coding.display = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;organizer&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

vital.category.push(coding);

for (var i = 0; i &lt; 3; i++) {
    var observation = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;organizer&apos;][&apos;component&apos;][i][&apos;observation&apos;];
    var codeKey = &apos;code&apos; + (i + 1);
    var valueKey = &apos;value&apos; + (i + 1);
    var interpretationKey = &apos;interpretationcode&apos; + (i + 1);

    vital[codeKey] = [];
    var coding = {};
    coding.code = observation[&apos;code&apos;][&apos;@code&apos;].toString();
    coding.system = &quot;https://loinc.org/&quot;;
    coding.display = observation[&apos;code&apos;][&apos;@displayName&apos;].toString();
    vital[codeKey].push(coding);

    vital[valueKey] = [];
    var Quantity = {};
    Quantity.unit = observation[&apos;value&apos;][&apos;@unit&apos;].toString();
    Quantity.value = observation[&apos;value&apos;][&apos;@value&apos;].toString();
    vital[valueKey].push(Quantity);

    vital[interpretationKey] = [];
    var intercoding = {};
    intercoding.code = observation[&apos;interpretationCode&apos;][&apos;@code&apos;].toString();
    intercoding.system = observation[&apos;interpretationCode&apos;][&apos;@codeSystem&apos;].toString();
    vital[interpretationKey].push(intercoding);

    vital.effectiveDateTime = DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, observation[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
}

var tmp = JSON.stringify(vital);

channelMap.put(&quot;vital&quot;, tmp);

logger.info(JSON.stringify(vital));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PGNvbXBvbmVudCB4bWxucz0idXJuOmhsNy1vcmc6djMiPjxzZWN0aW9uPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjIuNC4xIi8+PGNvZGUgY29kZT0iODcxNi0zIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIgZGlzcGxheU5hbWU9IlZJVEFMIFNJR05TIi8+PHRpdGxlPlZJVEFMIFNJR05TPC90aXRsZT48dGV4dD48dGFibGUgYm9yZGVyPSIxIiB3aWR0aD0iMTAwJSI+PHRoZWFkPjx0cj48dGggYWxpZ249InJpZ2h0Ij5EYXRlIC8gVGltZTogPC90aD48dGg+Tm92IDEsIDIwMTE8L3RoPjx0aD5BdWd1c3QgNiwgMjAxMjwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT48dHI+PHRoIGFsaWduPSJsZWZ0Ij5IZWlnaHQ8L3RoPjx0ZD48Y29udGVudCBJRD0idml0MSI+NjkgaW5jaGVzPC9jb250ZW50PjwvdGQ+PHRkPjxjb250ZW50IElEPSJ2aXQyIj42OSBpbmNoZXM8L2NvbnRlbnQ+PC90ZD48L3RyPjx0cj48dGggYWxpZ249ImxlZnQiPldlaWdodDwvdGg+PHRkPjxjb250ZW50IElEPSJ2aXQzIj4xODkgbGJzPC9jb250ZW50PjwvdGQ+PHRkPjxjb250ZW50IElEPSJ2aXQ0Ij4xOTQgbGJzPC9jb250ZW50PjwvdGQ+PC90cj48dHI+PHRoIGFsaWduPSJsZWZ0Ij5CbG9vZCBQcmVzc3VyZTwvdGg+PHRkPjxjb250ZW50IElEPSJ2aXQ1Ij4xMzIvODYgbW1IZzwvY29udGVudD48L3RkPjx0ZD48Y29udGVudCBJRD0idml0NiI+MTQ1Lzg4IG1tSGc8L2NvbnRlbnQ+PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48L3RleHQ+PGVudHJ5IHR5cGVDb2RlPSJEUklWIj48b3JnYW5pemVyIGNsYXNzQ29kZT0iQ0xVU1RFUiIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yNiIvPjwhLS0gVml0YWwgc2lnbnMgb3JnYW5pemVyIHRlbXBsYXRlIC0tPjxpZCByb290PSJjNmY4ODMyMC02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz48Y29kZSBjb2RlPSI0NjY4MDAwNSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIgY29kZVN5c3RlbU5hbWU9IlNOT01FRCAtQ1QiIGRpc3BsYXlOYW1lPSJWaXRhbCBzaWducyIvPjxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDExMTEwMSIvPjxjb21wb25lbnQ+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+PCEtLSBWaXRhbCBTaWduIE9ic2VydmF0aW9uIHRlbXBsYXRlIC0tPjxpZCByb290PSJjNmY4ODMyMS02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz48Y29kZSBjb2RlPSI4MzAyLTIiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiBkaXNwbGF5TmFtZT0iSGVpZ2h0Ii8+PHRleHQ+PHJlZmVyZW5jZSB2YWx1ZT0iI3ZpdDEiLz48L3RleHQ+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMDgxMTAxIi8+PHZhbHVlIHVuaXQ9ImluIiB2YWx1ZT0iNjkiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJQUSIvPjxpbnRlcnByZXRhdGlvbkNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPjwvb2JzZXJ2YXRpb24+PC9jb21wb25lbnQ+PGNvbXBvbmVudD48b2JzZXJ2YXRpb24gY2xhc3NDb2RlPSJPQlMiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjciLz48IS0tIFZpdGFsIFNpZ24gT2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+PGlkIHJvb3Q9ImM2Zjg4MzIxLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPjxjb2RlIGNvZGU9IjMxNDEtOSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIGRpc3BsYXlOYW1lPSJQYXRpZW50IEJvZHkgV2VpZ2h0IC0gTWVhc3VyZWQiLz48dGV4dD48cmVmZXJlbmNlIHZhbHVlPSIjdml0NCIvPjwvdGV4dD48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxMTExMDEiLz48dmFsdWUgdW5pdD0ibGJzIiB2YWx1ZT0iMTg5IiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iUFEiLz48aW50ZXJwcmV0YXRpb25Db2RlIGNvZGU9Ik4iIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz48L29ic2VydmF0aW9uPjwvY29tcG9uZW50Pjxjb21wb25lbnQ+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+PCEtLSBWaXRhbCBTaWduIE9ic2VydmF0aW9uIHRlbXBsYXRlIC0tPjxpZCByb290PSJjNmY4ODMyMS02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz48Y29kZSBjb2RlPSI4NDgwLTYiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiBkaXNwbGF5TmFtZT0iSW50cmF2YXNjdWxhciBTeXN0b2xpYyIvPjx0ZXh0PjxyZWZlcmVuY2UgdmFsdWU9IiN2aXQ1Ii8+PC90ZXh0PjxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDExMTEwMSIvPjx2YWx1ZSB1bml0PSJtbVtIZ10iIHZhbHVlPSIxMzIiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJQUSIvPjxpbnRlcnByZXRhdGlvbkNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPjwvb2JzZXJ2YXRpb24+PC9jb21wb25lbnQ+PC9vcmdhbml6ZXI+PC9lbnRyeT48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjxvcmdhbml6ZXIgY2xhc3NDb2RlPSJDTFVTVEVSIiBtb29kQ29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI2Ii8+PGlkIHJvb3Q9ImM2Zjg4MzIwLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPjxjb2RlIGNvZGU9IjQ2NjgwMDA1IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IiBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIC1DVCIgZGlzcGxheU5hbWU9IlZpdGFsIHNpZ25zIi8+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTIwODA2Ii8+PGNvbXBvbmVudD48b2JzZXJ2YXRpb24gY2xhc3NDb2RlPSJPQlMiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjciLz48aWQgcm9vdD0iYzZmODgzMjEtNjdhZC0xMWRiLWJkMTMtMDgwMDIwMGM5YTY2Ii8+PGNvZGUgY29kZT0iODMwMi0yIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIgZGlzcGxheU5hbWU9IkhlaWdodCIvPjx0ZXh0PjxyZWZlcmVuY2UgdmFsdWU9IiN2aXQyIi8+PC90ZXh0PjxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDEyMDgwNiIvPjx2YWx1ZSB1bml0PSJpbiIgdmFsdWU9IjY5IiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iUFEiLz48aW50ZXJwcmV0YXRpb25Db2RlIGNvZGU9Ik4iIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz48L29ic2VydmF0aW9uPjwvY29tcG9uZW50Pjxjb21wb25lbnQ+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+PGlkIHJvb3Q9ImM2Zjg4MzIxLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPjxjb2RlIGNvZGU9IjMxNDEtOSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIGRpc3BsYXlOYW1lPSJQYXRpZW50IEJvZHkgV2VpZ2h0IC0gTWVhc3VyZWQiLz48dGV4dD48cmVmZXJlbmNlIHZhbHVlPSIjdml0NCIvPjwvdGV4dD48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxMjA4MDYiLz48dmFsdWUgdW5pdD0ibGJzIiB2YWx1ZT0iMTk0IiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iUFEiLz48aW50ZXJwcmV0YXRpb25Db2RlIGNvZGU9Ik4iIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz48L29ic2VydmF0aW9uPjwvY29tcG9uZW50Pjxjb21wb25lbnQ+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+PCEtLSBWaXRhbCBTaWduIE9ic2VydmF0aW9uIHRlbXBsYXRlIC0tPjxpZCByb290PSJjNmY4ODMyMS02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz48Y29kZSBjb2RlPSI4NDgwLTYiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiBkaXNwbGF5TmFtZT0iSW50cmF2YXNjdWxhciBTeXN0b2xpYyIvPjx0ZXh0PjxyZWZlcmVuY2UgdmFsdWU9IiN2aXQ2Ii8+PC90ZXh0PjxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDEyMDgwNiIvPjx2YWx1ZSB1bml0PSJtbVtIZ10iIHZhbHVlPSIxNDUiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJQUSIvPjxpbnRlcnByZXRhdGlvbkNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPjwvb2JzZXJ2YXRpb24+PC9jb21wb25lbnQ+PC9vcmdhbml6ZXI+PC9lbnRyeT48L3NlY3Rpb24+PC9jb21wb25lbnQ+</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707457646580</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>ba557cda-1be1-4bd3-bf53-de8af2a5455d</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>socialhistoryCCDA to FHIR</name>
      <description></description>
      <revision>17</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>SocialHistory</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var socialHistory = {};
socialHistory.resourceType = &quot;Social History&quot;;

socialHistory.identifier = [];
var identifierCode = {};
var coding = {};

coding.code = msg[&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = msg[&apos;section&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
coding.display = msg[&apos;section&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

identifierCode.coding = coding;
socialHistory.identifier.push(identifierCode);

socialHistory.subject = {};
socialHistory.subject.reference = msg[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString();

socialHistory.status = msg[&apos;section&apos;][&apos;entry&apos;][0][&apos;observation&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString();

socialHistory.category=[];

for (var i = 0; i &lt; msg[&apos;section&apos;][&apos;entry&apos;].length; i++) {
    var categoryObj = {};
    var categoryCodingObj = {};

    categoryCodingObj.code = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
    categoryCodingObj.system = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;observation&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
    categoryCodingObj.display = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

    categoryObj.code = categoryCodingObj;
    categoryObj.status = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;observation&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString();
    categoryObj.effectiveTime = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;observation&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString();

    socialHistory.category.push(categoryObj);
    
    socialHistory[&apos;value&apos; + (i + 1)] = msg[&apos;section&apos;][&apos;entry&apos;][i][&apos;observation&apos;][&apos;value&apos;];
}

var tmp = JSON.stringify(socialHistory);

channelMap.put(&quot;socialHistory&quot;, tmp);

logger.info(tmp);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PGNvbXBvbmVudCB4bWxucz0idXJuOmhsNy1vcmc6djMiPjxzZWN0aW9uPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjIuMTciLz48Y29kZSBjb2RlPSIyOTc2Mi0yIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGRpc3BsYXlOYW1lPSJTb2NpYWwgSGlzdG9yeSIvPjx0aXRsZT5TT0NJQUwgSElTVE9SWTwvdGl0bGU+PHRleHQ+PHRhYmxlIGJvcmRlcj0iMSIgd2lkdGg9IjEwMCUiPjx0aGVhZD48dHI+PHRoPlNvY2lhbCBIaXN0b3J5IEVsZW1lbnQ8L3RoPjx0aD5EZXNjcmlwdGlvbjwvdGg+PHRoPkVmZmVjdGl2ZSBEYXRlczwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT48dHI+PHRkPjxjb250ZW50IElEPSJzb2MxIi8+IHNtb2tpbmc8L3RkPjx0ZD5Gb3JtZXIgU21va2VyICgxIHBhY2sgcGVyIGRheTwvdGQ+PHRkPjIwMDUwNTAxIHRvIDIwMTEwMjI3PC90ZD48L3RyPjx0cj48dGQ+PGNvbnRlbnQgSUQ9InNvYzIiLz4gc21va2luZzwvdGQ+PHRkPkN1cnJlbnQgRXZlcnlkYXkgU21va2VyIDIgcGFja3MgcGVyIGRheTwvdGQ+PHRkPjIwMTEwMjI3IC0gdG9kYXk8L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPjwvdGV4dD48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjxvYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IkVWTiI+PCEtLSBTbW9raW5nIHN0YXR1cyBvYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMi40Ljc4Ii8+PGlkIGV4dGVuc2lvbj0iMTIzNDU2Nzg5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOSIvPjxjb2RlIGNvZGU9IkFTU0VSVElPTiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS40Ii8+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWU+PGxvdyB2YWx1ZT0iMjAwNTA1MDEiLz48aGlnaCB2YWx1ZT0iMjAxMTAyMjciLz48L2VmZmVjdGl2ZVRpbWU+PHZhbHVlIGNvZGU9Ijg1MTcwMDYiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiIGRpc3BsYXlOYW1lPSJGb3JtZXIgc21va2VyIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iQ0QiLz48L29ic2VydmF0aW9uPjwvZW50cnk+PGVudHJ5IHR5cGVDb2RlPSJEUklWIj48b2JzZXJ2YXRpb24gY2xhc3NDb2RlPSJPQlMiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMzgiLz48aWQgcm9vdD0iOWI1NmMyNWQtOTEwNC00NWVlLTlmYTQtZTBmM2FmYWEwMWMxIi8+PGNvZGUgY29kZT0iMjMwMDU2MDA0IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IiBkaXNwbGF5TmFtZT0iQ2lnYXJldHRlIHNtb2tpbmciPjxvcmlnaW5hbFRleHQ+PHJlZmVyZW5jZSB2YWx1ZT0iI3NvYzEiLz48L29yaWdpbmFsVGV4dD48L2NvZGU+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWU+PGxvdyB2YWx1ZT0iMjAwNTA1MDEiLz48aGlnaCB2YWx1ZT0iMjAxMTAyMjciLz48L2VmZmVjdGl2ZVRpbWU+PHZhbHVlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJTVCI+MSBwYWNrIHBlciBkYXk8L3ZhbHVlPjwvb2JzZXJ2YXRpb24+PC9lbnRyeT48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjxvYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4zOCIvPjxpZCByb290PSI0NWVmYjYwNC03MDQ5LTRhMmUtYWQzMy1kMzg1NTZjOTYzNmMiLz48Y29kZSBjb2RlPSIyMzAwNTYwMDQiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiIGRpc3BsYXlOYW1lPSJDaWdhcmV0dGUgc21va2luZyI+PG9yaWdpbmFsVGV4dD48cmVmZXJlbmNlIHZhbHVlPSIjc29jMiIvPjwvb3JpZ2luYWxUZXh0PjwvY29kZT48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz48ZWZmZWN0aXZlVGltZT48bG93IHZhbHVlPSIyMDExMDIyNyIvPjxoaWdoIG51bGxGbGF2b3I9IlVOSyIvPjwvZWZmZWN0aXZlVGltZT48dmFsdWUgY29kZT0iNDQ5ODY4MDAyIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IiBkaXNwbGF5TmFtZT0iQ3VycmVudCBFdmVyeWRheSBTbW9rZXIiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJDRCIvPjwvb2JzZXJ2YXRpb24+PC9lbnRyeT48L3NlY3Rpb24+PC9jb21wb25lbnQ+</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707486117801</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>34269cf3-4706-4dec-aff8-447b1991b2ae</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>Result CCDA to FHIR</name>
      <description></description>
      <revision>20</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>Result</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var result = {};

result.resourceType = msg[&apos;section&apos;][&apos;title&apos;].toString();

result.identifier = [];

var identifier = { type: [] };
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding.system = &quot;https://loinc.org/&quot;;
coding.display = msg[&apos;section&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

identifier.type.push(coding);
result.identifier.push(identifier);

result.code = {};
result.code.coding = [];

var code1 = {};
code1.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
code1.system = &quot;http://snomed.info/sct&quot;;
code1.display = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

result.code.coding.push(code1);

result.status = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString();

result.subject = {};
result.subject.reference = msg[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString();

result.observation1 = [];
var observation1 = {};
observation1.code = {};
observation1.code.coding = [];

var coding1 = {};
coding1.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding1.system = &quot;https://loinc.org/&quot;;
coding1.display = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

observation1.code.coding.push(coding1);

//observation1.status = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString();


result.observation1.push(observation1);

result.effectiveTime = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;effectiveTime&apos;][&apos;@value&apos;].toString();

result.value = [];
var valueQuantity = {};
valueQuantity.unit = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;value&apos;][&apos;@unit&apos;].toString();
valueQuantity.value = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;value&apos;][&apos;@value&apos;].toString();

result.value.push(valueQuantity);

result.interpretation1= [];
var interpretationType1 = { coding: []};
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;interpretationCode&apos;][&apos;@code&apos;].toString();
coding.system = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;interpretationCode&apos;][&apos;@codeSystem&apos;].toString();
interpretationType1.coding.push(coding);
result.interpretation1.push(interpretationType1);



result.referenceRange1 = [];
var referenceRange2 = {};
referenceRange2.text = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][0][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;text&apos;].toString();
result.referenceRange1.push(referenceRange2);

result.observation2 = [];
var observation2 = {};
observation2.code = {};
observation2.code.coding = [];

var coding2 = {};
coding2.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding2.system = &quot;https://loinc.org/&quot;;
coding2.display = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

observation2.code.coding.push(coding2);


result.observation2.push(observation2);

result.effectiveTime = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;effectiveTime&apos;][&apos;@value&apos;].toString();


result.value1 = [];
var valueQuantity1 = {};
valueQuantity1.unit = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;value&apos;][&apos;@unit&apos;].toString();
valueQuantity1.value = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;value&apos;][&apos;@value&apos;].toString();

result.value1.push(valueQuantity1);

result.interpretation2= [];
var interpretationType2 = { coding: []};
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;interpretationCode&apos;][&apos;@code&apos;].toString();
coding.system = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;interpretationCode&apos;][&apos;@codeSystem&apos;].toString();
interpretationType2.coding.push(coding);
result.interpretation2.push(interpretationType2);


result.referenceRange3 = [];
var referenceRange4 = {};

var low = {};
low.unit = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;value&apos;][&apos;low&apos;][&apos;@unit&apos;].toString();
low.value = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;value&apos;][&apos;low&apos;][&apos;@value&apos;].toString();

referenceRange4.low = low;

var high = {};
high.unit = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;value&apos;][&apos;high&apos;][&apos;@unit&apos;].toString();
high.value = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][1][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;value&apos;][&apos;high&apos;][&apos;@value&apos;].toString();

referenceRange4.high = high;

result.referenceRange3.push(referenceRange4);

result.observation3 = [];
var observation3 = {};
observation3.code = {};
observation3.code.coding = [];

var coding3 = {};
coding3.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
coding3.system = &quot;https://loinc.org/&quot;;
coding3.display = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();

observation3.code.coding.push(coding3);

//observation3.status = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString();

result.observation3.push(observation3);

result.effectiveDateTime = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;effectiveTime&apos;][&apos;@value&apos;].toString();
result.value2 = [];
var valueQuantity2 = {};
valueQuantity2.unit = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;value&apos;][&apos;@unit&apos;].toString();
valueQuantity2.value = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;value&apos;][&apos;@value&apos;].toString();

result.value2.push(valueQuantity2);

result.interpretation3= [];
var interpretationType3 = { coding: []};
var coding = {};
coding.code = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;interpretationCode&apos;][&apos;@code&apos;].toString();
coding.system = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;interpretationCode&apos;][&apos;@codeSystem&apos;].toString();
interpretationType3.coding.push(coding);
result.interpretation3.push(interpretationType3);

result.referenceRange5 = [];
var referenceRange6 = {};

var low = {};
low.unit = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;value&apos;][&apos;low&apos;][&apos;@unit&apos;].toString();
low.value = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;value&apos;][&apos;low&apos;][&apos;@value&apos;].toString();

referenceRange6.low = low;

var high = {};
high.unit = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;value&apos;][&apos;high&apos;][&apos;@unit&apos;].toString();
high.value = msg[&apos;section&apos;][&apos;entry&apos;][&apos;organizer&apos;][&apos;component&apos;][2][&apos;observation&apos;][&apos;referenceRange&apos;][&apos;observationRange&apos;][&apos;value&apos;][&apos;high&apos;][&apos;@value&apos;].toString();

referenceRange6.high = high;

result.referenceRange5.push(referenceRange6);

var tmp = JSON.stringify(result);

channelMap.put(&quot;result&quot;, tmp);

logger.info(JSON.stringify(result));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PGNvbXBvbmVudCB4bWxucz0idXJuOmhsNy1vcmc6djMiPjxzZWN0aW9uPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjIuMy4xIi8+PGNvZGUgY29kZT0iMzA5NTQtMiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIGRpc3BsYXlOYW1lPSJSRVNVTFRTIi8+PHRpdGxlPlJFU1VMVFM8L3RpdGxlPjx0ZXh0Pjx0YWJsZT48dGJvZHk+PHRyPjx0ZCBjb2xzcGFuPSIyIj5MQUJPUkFUT1JZIElORk9STUFUSU9OPC90ZD48L3RyPjx0cj48dGQgY29sc3Bhbj0iMiI+Q2hlbWlzdHJpZXMgYW5kIGRydWcgbGV2ZWxzPC90ZD48L3RyPjx0cj48dGQ+PGNvbnRlbnQgSUQ9InJlc3VsdDEiPkhHQiAoTSAxMy0xOCBnL2RsOyBGIDEyLTE2IGcvZGwpPC9jb250ZW50PjwvdGQ+PHRkPjEzLjI8L3RkPjwvdHI+PHRyPjx0ZD48Y29udGVudCBJRD0icmVzdWx0MiI+V0JDICg0LjMtMTAuOCAxMCszL3VsKTwvY29udGVudD48L3RkPjx0ZD42Ljc8L3RkPjwvdHI+PHRyPjx0ZD48Y29udGVudCBJRD0icmVzdWx0MyI+UExUICgxMzUtMTQ1IG1lcS9sKTwvY29udGVudD48L3RkPjx0ZD4xMjMgKEwpPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48L3RleHQ+PGVudHJ5IHR5cGVDb2RlPSJEUklWIj48b3JnYW5pemVyIGNsYXNzQ29kZT0iQkFUVEVSWSIgbW9vZENvZGU9IkVWTiI+PCEtLSBSZXN1bHQgb3JnYW5pemVyIHRlbXBsYXRlIC0tPjx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMSIvPjxpZCByb290PSI3ZDVhMDJiMC02N2E0LTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz48Y29kZSBjb2RlPSI0Mzc4OTAwOSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIgZGlzcGxheU5hbWU9IkNCQyBXTyBESUZGRVJFTlRJQUwiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJDRSIvPjxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPjxjb21wb25lbnQ+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj48IS0tIFJlc3VsdCBvYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT48dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIiLz48aWQgcm9vdD0iMTA3YzJkYzAtNjdhNS0xMWRiLWJkMTMtMDgwMDIwMGM5YTY2Ii8+PGNvZGUgY29kZT0iMzAzMTMtMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIGRpc3BsYXlOYW1lPSJIR0IiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJDRSI+IDwvY29kZT48dGV4dD48cmVmZXJlbmNlIHZhbHVlPSIjcmVzdWx0MSIvPjwvdGV4dD48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxMjA4MTAiLz48dmFsdWUgdW5pdD0iZy9kbCIgdmFsdWU9IjEwLjIiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJQUSIvPjxpbnRlcnByZXRhdGlvbkNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPjxtZXRob2RDb2RlLz48dGFyZ2V0U2l0ZUNvZGUvPjxhdXRob3I+PHRpbWUvPjxhc3NpZ25lZEF1dGhvcj48aWQgcm9vdD0iMmE2MjAxNTUtOWQxMS00MzllLTkyYjMtNWQ5ODE2ZmY0ZGU4Ii8+PC9hc3NpZ25lZEF1dGhvcj48L2F1dGhvcj48cmVmZXJlbmNlUmFuZ2U+PG9ic2VydmF0aW9uUmFuZ2U+PHRleHQ+TSAxMy0xOCBnL2RsOyBGIDEyLTE2IGcvZGw8L3RleHQ+PC9vYnNlcnZhdGlvblJhbmdlPjwvcmVmZXJlbmNlUmFuZ2U+PC9vYnNlcnZhdGlvbj48L2NvbXBvbmVudD48Y29tcG9uZW50PjxvYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yIi8+PGlkIHJvb3Q9IjEwN2MyZGMwLTY3YTUtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPjxjb2RlIGNvZGU9IjMzNzY1LTkiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiBkaXNwbGF5TmFtZT0iV0JDIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iQ0UiPiA8L2NvZGU+PHRleHQ+PHJlZmVyZW5jZSB2YWx1ZT0iI3Jlc3VsdDIiLz48L3RleHQ+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTIwODEwIi8+PHZhbHVlIHVuaXQ9IjEwKzMvdWwiIHZhbHVlPSIxMi4zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iUFEiLz48aW50ZXJwcmV0YXRpb25Db2RlIGNvZGU9Ik4iIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz48bWV0aG9kQ29kZS8+PHRhcmdldFNpdGVDb2RlLz48YXV0aG9yPjx0aW1lLz48YXNzaWduZWRBdXRob3I+PGlkIHJvb3Q9IjJhNjIwMTU0LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGRlOCIvPjwvYXNzaWduZWRBdXRob3I+PC9hdXRob3I+PHJlZmVyZW5jZVJhbmdlPjxvYnNlcnZhdGlvblJhbmdlPjx2YWx1ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iSVZMX1BRIj48bG93IHVuaXQ9IjEwKzMvdWwiIHZhbHVlPSI0LjMiLz48aGlnaCB1bml0PSIxMCszL3VsIiB2YWx1ZT0iMTAuOCIvPjwvdmFsdWU+PC9vYnNlcnZhdGlvblJhbmdlPjwvcmVmZXJlbmNlUmFuZ2U+PC9vYnNlcnZhdGlvbj48L2NvbXBvbmVudD48Y29tcG9uZW50PjxvYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yIi8+PGlkIHJvb3Q9IjEwN2MyZGMwLTY3YTUtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPjxjb2RlIGNvZGU9IjI2NTE1LTciIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiBkaXNwbGF5TmFtZT0iUExUIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iQ0UiPiA8L2NvZGU+PHRleHQ+PHJlZmVyZW5jZSB2YWx1ZT0iI3Jlc3VsdDMiLz48L3RleHQ+PHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+PGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTIwODEwIi8+PHZhbHVlIHVuaXQ9IjEwKzMvdWwiIHZhbHVlPSIxMjMiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJQUSIvPjxpbnRlcnByZXRhdGlvbkNvZGUgY29kZT0iTCIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPjxtZXRob2RDb2RlLz48dGFyZ2V0U2l0ZUNvZGUvPjxhdXRob3I+PHRpbWUvPjxhc3NpZ25lZEF1dGhvcj48aWQgcm9vdD0iMmE2MjAxNTUtOWQxMS00MzllLTkyYjMtNWQ5ODE1ZmY0ZGU4Ii8+PC9hc3NpZ25lZEF1dGhvcj48L2F1dGhvcj48cmVmZXJlbmNlUmFuZ2U+PG9ic2VydmF0aW9uUmFuZ2U+PHZhbHVlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJJVkxfUFEiPjxsb3cgdW5pdD0iMTArMy91bCIgdmFsdWU9IjE1MCIvPjxoaWdoIHVuaXQ9IjEwKzMvdWwiIHZhbHVlPSIzNTAiLz48L3ZhbHVlPjwvb2JzZXJ2YXRpb25SYW5nZT48L3JlZmVyZW5jZVJhbmdlPjwvb2JzZXJ2YXRpb24+PC9jb21wb25lbnQ+PC9vcmdhbml6ZXI+PC9lbnRyeT48L3NlY3Rpb24+PC9jb21wb25lbnQ+</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707374918274</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.4.1">
      <id>7dae3c56-a793-44f7-a061-310e48dbc3d5</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>Channel CCDA to FHIR</name>
      <description></description>
      <revision>71</revision>
      <sourceConnector version="4.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.1">
          <elements/>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.1">
                <name>CCDA to FHIR</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var allergychannelId = &quot;fbe833fb-44f3-488e-90dd-dda84ef7ca90&quot;;
var encounterchannelId = &quot;a251ae6f-92a4-452e-b7b2-ecc3bdf6eccc&quot;;
var immunizationchannelId = &quot;a994d7f5-0da5-4bcd-8016-347d3b180fbc&quot;;
var medicationchannelId = &quot;00b90a79-1db7-4215-b468-3a8b41c8f926&quot;;
var careplanchannelId = &quot;2932c97a-c14d-44c3-8eb5-1543b86e11b4&quot;;
var problemchannelId = &quot;9e3027f5-df9b-49a9-8a15-039cfa5a8d9e&quot;;
var procedurechannelId = &quot;21c1442b-3c85-4ae8-82a4-f489beb15d90&quot;;
var vitalchannelId = &quot;c7440439-58cc-475f-81ff-322ebe1789eb&quot;;
var socialhistorychannelId = &quot;ba557cda-1be1-4bd3-bf53-de8af2a5455d&quot;;
var resultchannelId = &quot;34269cf3-4706-4dec-aff8-447b1991b2ae&quot;;
   
var components = msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;];

for each(var component in components) {
    var templateId = component[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString();
    
    if (templateId === &apos;2.16.840.1.113883.10.20.22.2.6.1&apos;) {
        var patientAllergy =component.toString();
        //logger.info(&quot;Patient Allergy details are present. &quot; + patientAllergy); 
       router.routeMessageByChannelId(&apos;fbe833fb-44f3-488e-90dd-dda84ef7ca90&apos;, patientAllergy);
    }
     if (templateId === &apos;2.16.840.1.113883.10.20.22.2.22.1&apos;) {
      var patientEncounter = component.toString();
      router.routeMessageByChannelId(&apos;a251ae6f-92a4-452e-b7b2-ecc3bdf6eccc&apos;, patientEncounter);
    }

   if (templateId ===&apos;2.16.840.1.113883.10.20.22.2.2.1&apos;) {
        var patientImmunization = component.toString();
        //logger.info(&quot;patientImmunization details are present. &quot; + patientImmunization);
       router.routeMessageByChannelId(&apos;a994d7f5-0da5-4bcd-8016-347d3b180fbc&apos;, patientImmunization); 
    }
    
    if (templateId ===&apos;2.16.840.1.113883.10.20.22.2.1.1&apos;) {
        var medication = component.toString();
        //logger.info(&quot;medication details are present. &quot; + medication); 
        router.routeMessageByChannelId(&apos;00b90a79-1db7-4215-b468-3a8b41c8f926&apos;, medication); 
        
    }
    
    if (templateId ===&apos;2.16.840.1.113883.10.20.22.2.10&apos;) {
        var carePlan = component.toString();
        //logger.info(&quot;carePlan details are present. &quot; + carePlan); 
       router.routeMessageByChannelId(&apos;2932c97a-c14d-44c3-8eb5-1543b86e11b4&apos;, medication); 
    }
    
    if (templateId ===&apos;2.16.840.1.113883.10.20.22.2.5.1&apos;) {
        var problem = component.toString();
        //logger.info(&quot;problem details are present. &quot; + problem); 
        router.routeMessageByChannelId(&apos;9e3027f5-df9b-49a9-8a15-039cfa5a8d9e&apos;, problem); 
    }
    
   if (templateId ===&apos;2.16.840.1.113883.10.20.22.2.7.1&apos;) {
        var procedure = component.toString();
        //logger.info(&quot;procedure details are present. &quot; + procedure); 
        router.routeMessageByChannelId(&apos;21c1442b-3c85-4ae8-82a4-f489beb15d90&apos;, procedure); 
    }
    
   if (templateId ===&apos;2.16.840.1.113883.10.20.22.2.3.1&apos;) {
        var result = component.toString();
        logger.info(&quot;result details are present. &quot; + result); 
        //router.routeMessageByChannelId(&apos;34269cf3-4706-4dec-aff8-447b1991b2ae&apos;, result); 
    }
    
   if (templateId ===&apos;2.16.840.1.113883.10.20.22.2.17&apos;) {
        var socialhistory = component.toString();
        logger.info(&quot;socialhistory details are present. &quot; + socialhistory); 
         //router.routeMessageByChannelId(&apos;ba557cda-1be1-4bd3-bf53-de8af2a5455d&apos;, socialhistory); 
    }
    
    if (templateId ===&apos;2.16.840.1.113883.10.20.22.2.4.1&apos;) {
        var vital = component.toString();
        logger.info(&quot;vital details are present. &quot; + vital); 
        //router.routeMessageByChannelId(&apos;c7440439-58cc-475f-81ff-322ebe1789eb&apos;, vital); 
    }
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIj8+Cjw/eG1sLXN0eWxlc2hlZXQgdHlwZT0idGV4dC94c2wiIGhyZWY9IkNEQS54c2wiPz4KCjxDbGluaWNhbERvY3VtZW50IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiCiB4c2k6c2NoZW1hTG9jYXRpb249InVybjpobDctb3JnOnYzIC4uLy4uLy4uL0NEQSUyMFIyL2NkYS1zY2hlbWFzLWFuZC1zYW1wbGVzL2luZnJhc3RydWN0dXJlL2NkYS9DREEueHNkIgogeG1sbnM9InVybjpobDctb3JnOnYzIgogeG1sbnM6Y2RhPSJ1cm46aGw3LW9yZzp2MyIKIHhtbG5zOnNkdGM9InVybjpobDctb3JnOnNkdGMiPgogICAKICAgPHJlYWxtQ29kZQogICAgICBjb2RlPSJVUyIvPgogICA8dHlwZUlkCiAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEuMyIKICAgICAgZXh0ZW5zaW9uPSJQT0NEX0hEMDAwMDQwIi8+CiAgIAogICA8dGVtcGxhdGVJZAogICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4xLjEiLz4KICAgPHRlbXBsYXRlSWQKICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMS4yIi8+CiAgIAogICAKICAgPGlkCiAgICAgIGV4dGVuc2lvbj0iVGVzdCBDQ0RBIgogICAgICByb290PSIxLjEuMS4xLjEuMS4xLjEuMSIvPgogICAKIAogICA8Y29kZQogICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgY29kZT0iMzQxMzMtOSIKICAgICAgZGlzcGxheU5hbWU9IlN1bW1hcml6YXRpb24gb2YgRXBpc29kZSBOb3RlIi8+CiAgIAogICA8IS0tIENPTkYgNTI1NCAtLT4KICAgPHRpdGxlPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczogSGVhbHRoIFN1bW1hcnk8L3RpdGxlPgogICAKICAgPCEtLSBDT05GIDUyNTYgLS0+CiAgIDxlZmZlY3RpdmVUaW1lCiAgICAgIHZhbHVlPSIyMDEyMDkxMjAwMDAwMC0wMDAwIi8+CiAgIAogICA8IS0tIDUyNTkgLS0+CiAgIDxjb25maWRlbnRpYWxpdHlDb2RlCiAgICAgIGNvZGU9Ik4iCiAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuMjUiLz4KICAgCiAgIDwhLS0gNTM3MiAtLT4KICAgPGxhbmd1YWdlQ29kZQogICAgICBjb2RlPSJlbi1VUyIvPgogICAKICAgPCEtLSBDT05GIDUyNjYgLS0+CiAgIDxyZWNvcmRUYXJnZXQ+CiAgICAgIAogICAgICA8IS0tIENPTkYgNTI2NyAtLT4KICAgICAgPHBhdGllbnRSb2xlPgogICAgICAgICAKICAgICAgICAgPCEtLSBDT05GIDUyNjgtLT4KICAgICAgICAgPGlkCiAgICAgICAgICAgIGV4dGVuc2lvbj0iMSIKICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuNC42Ii8+CiAgICAgICAgIDwhLS0gRmFrZSBJRCB1c2luZyBITDcgZXhhbXBsZSBPSUQuIC0tPgogICAgICAgICAKICAgICAgICAgPCEtLSBQYXRpZW50IFNTTiByZWNvcmRlZCBhcyBhbiBJRCAtLT4KICAgICAgICAgPGlkCiAgICAgICAgICAgIGV4dGVuc2lvbj0iMTIzLTEwMS01MjMwIgogICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjEiLz4KICAgICAgICAgCiAgICAgICAgIDwhLS0gQ09ORiA1MjcxIC0tPgogICAgICAgICA8YWRkcgogICAgICAgICAgICB1c2U9IkhQIj4KICAgICAgICAgICAgPCEtLSBIUCBpcyAicHJpbWFyeSBob21lIiBmcm9tIGNvZGVTeXN0ZW0gMi4xNi44NDAuMS4xMTM4ODMuNS4xMTE5IC0tPgogICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTM1NyBBbWJlciBEcml2ZTwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgIDxjaXR5PkJlYXZlcnRvbjwvY2l0eT4KICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcwMDY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICA8IS0tIFVTIGlzICJVbml0ZWQgU3RhdGVzIiBmcm9tIElTTyAzMTY2LTEgQ291bnRyeSBDb2RlczogMS4wLjMxNjYuMSAtLT4KICAgICAgICAgPC9hZGRyPgogICAgICAgICAKICAgICAgICAgPCEtLSBDT05GIDUyODAgLS0+CiAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgIHZhbHVlPSJ0ZWw6KDgxNikyNzYtNjkwOSIKICAgICAgICAgICAgdXNlPSJIUCIvPgogIAogICAgCiAgICAgICAgIDxwYXRpZW50PgogICAgICAgICAgICAKCiAgICAgICAgICAgIDxuYW1lCiAgICAgICAgICAgICAgIHVzZT0iTCI+CiAgICAgICAgICAgICAgIDwhLS0gTCBpcyAiTGVnYWwiIGZyb20gSEw3IEVudGl0eU5hbWVVc2UgMi4xNi44NDAuMS4xMTM4ODMuNS40NSAtLT4KICAgICAgICAgICAgICAgPGdpdmVuPk15cmE8L2dpdmVuPgogICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxmYW1pbHk+Sm9uZXM8L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICA8YWRtaW5pc3RyYXRpdmVHZW5kZXJDb2RlCiAgICAgICAgICAgICAgIGNvZGU9IkYiCiAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuMSIKICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkZlbWFsZSIvPgogICAgICAgICAgICA8YmlydGhUaW1lCiAgICAgICAgICAgICAgIHZhbHVlPSIxOTQ3MDUwMSIvPgogICAgICAgICAgICAKICAgICAgICAgICAgPG1hcml0YWxTdGF0dXNDb2RlCiAgICAgICAgICAgICAgIGNvZGU9Ik0iCiAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJNYXJyaWVkIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjIiCiAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJNYXJpdGFsU3RhdHVzQ29kZSIvPgogICAgICAgICAgICA8cmVsaWdpb3VzQWZmaWxpYXRpb25Db2RlCiAgICAgICAgICAgICAgIGNvZGU9IjEwMTMiCiAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDaHJpc3RpYW4gKG5vbi1DYXRob2xpYywgbm9uLXNwZWNpZmljKSIKICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkhMNyBSZWxpZ2lvdXMgQWZmaWxpYXRpb24gIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjEwNzYiLz4KICAgICAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPHJhY2VDb2RlCiAgICAgICAgICAgICAgIGNvZGU9IjIxMDYtMyIKICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IldoaXRlIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjIzOCIKICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJhY2UgYW5kIEV0aG5pY2l0eSAtIENEQyIvPgogICAgICAgICAgICA8ZXRobmljR3JvdXBDb2RlCiAgICAgICAgICAgICAgIGNvZGU9IjIxODYtNSIKICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ik5vdCBIaXNwYW5pYyBvciBMYXRpbm8iCiAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMjM4IgogICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUmFjZSBhbmQgRXRobmljaXR5IC0gQ0RDIi8+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDxndWFyZGlhbj4KICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iR1BBUk5UIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iR3JhbmRmYXRoZXIiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuMTExIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iSEw3IFJvbGUgY29kZSIvPgogICAgICAgICAgICAgICA8YWRkcgogICAgICAgICAgICAgICAgICB1c2U9IkhQIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTM1NyBBbWJlciBEcml2ZTwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgIDxjaXR5PkJlYXZlcnRvbjwvY2l0eT4KICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcwMDY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICB2YWx1ZT0idGVsOig4MTYpMjc2LTY5MDkiCiAgICAgICAgICAgICAgICAgIHVzZT0iSFAiLz4KICAgICAgICAgICAgICAgPGd1YXJkaWFuUGVyc29uPgogICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPlJhbHBoPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5Kb25lczwvZmFtaWx5PgogICAgICAgICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgIDwvZ3VhcmRpYW5QZXJzb24+CiAgICAgICAgICAgIDwvZ3VhcmRpYW4+CiAgICAgICAgICAgIDxiaXJ0aHBsYWNlPgogICAgICAgICAgICAgICA8cGxhY2U+CiAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICA8Y2l0eT5CZWF2ZXJ0b248L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MDA2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICA8L3BsYWNlPgogICAgICAgICAgICA8L2JpcnRocGxhY2U+CiAgICAgICAgICAgIAogICAgICAgICAgICA8bGFuZ3VhZ2VDb21tdW5pY2F0aW9uPgogICAgICAgICAgICAgICA8bGFuZ3VhZ2VDb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9ImVuZyIvPgogICAgICAgICAgICAgICA8bW9kZUNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iRVNQIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iRXhwcmVzc2VkIHNwb2tlbiIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS42MCIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9Ikxhbmd1YWdlQWJpbGl0eU1vZGUiLz4KICAgICAgICAgICAgICAgPHByZWZlcmVuY2VJbmQKICAgICAgICAgICAgICAgICAgdmFsdWU9InRydWUiLz4KICAgICAgICAgICAgPC9sYW5ndWFnZUNvbW11bmljYXRpb24+CiAgICAgICAgIDwvcGF0aWVudD4KICAgICAgICAgPHByb3ZpZGVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgcm9vdD0iMS4xLjEuMS4xLjEuMS4xLjQiLz4KICAgICAgICAgICAgPG5hbWU+Q29tbXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzPC9uYW1lPgogICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICB1c2U9IldQIgogICAgICAgICAgICAgICB2YWx1ZT0idGVsOiA1NTUtNTU1LTUwMDAiLz4KICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgIDwvcHJvdmlkZXJPcmdhbml6YXRpb24+CiAgICAgIDwvcGF0aWVudFJvbGU+CiAgIDwvcmVjb3JkVGFyZ2V0PgogICAKICAgPGF1dGhvcj4KICAgICAgPHRpbWUKICAgICAgICAgdmFsdWU9IjIwMDUwODEzMDAwMDAwKzA1MDAiLz4KICAgICAgPGFzc2lnbmVkQXV0aG9yPgogICAgICAgICA8aWQKICAgICAgICAgICAgZXh0ZW5zaW9uPSIxMTExMTEiCiAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICA8YWRkcj4KICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcml2ZSA8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICA8L2FkZHI+CiAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgIHVzZT0iV1AiCiAgICAgICAgICAgIHZhbHVlPSJ0ZWw6NTU1LTU1NS0xMDAyIi8+CiAgICAgICAgIDxhc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxwcmVmaXg+RHI8L3ByZWZpeD4KICAgICAgICAgICAgICAgPGdpdmVuPkhlbnJ5PC9naXZlbj4KICAgICAgICAgICAgICAgPGZhbWlseT5TZXZlbjwvZmFtaWx5PgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgIDwvYXNzaWduZWRQZXJzb24+CiAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgIDwvYXV0aG9yPgogICA8ZGF0YUVudGVyZXI+CiAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgPGlkCiAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIKICAgICAgICAgICAgZXh0ZW5zaW9uPSI5OTk5OTk5NDMyNTIiLz4KICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgPC9hZGRyPgogICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICB1c2U9IldQIgogICAgICAgICAgICB2YWx1ZT0idGVsOjU1NS01NTUtMTAwMiIvPgogICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICA8Z2l2ZW4+TWFyeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+TWNEb25hbGQ8L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICA8L2RhdGFFbnRlcmVyPgogICA8aW5mb3JtYW50PgogICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgIDxpZAogICAgICAgICAgICBleHRlbnNpb249IktQMDAwMTciCiAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjE5LjUiLz4KICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgPC9hZGRyPgogICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICB1c2U9IldQIgogICAgICAgICAgICB2YWx1ZT0idGVsOjU1NS01NTUtMTAwMiIvPgogICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgPC9pbmZvcm1hbnQ+CiAgIDxpbmZvcm1hbnQ+CiAgICAgIDxyZWxhdGVkRW50aXR5CiAgICAgICAgIGNsYXNzQ29kZT0iUFJTIj4KICAgICAgICAgCiAgICAgICAgIDxjb2RlCiAgICAgICAgICAgIGNvZGU9IlNQUyIKICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNQT1VTRSIKICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4xOTU2MyIKICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlBlcnNvbmFsIFJlbGF0aW9uc2hpcCBSb2xlIFR5cGUgVmFsdWUgU2V0Ii8+CiAgICAgICAgIDxyZWxhdGVkUGVyc29uPgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgPGdpdmVuPkZyYW5rPC9naXZlbj4KICAgICAgICAgICAgICAgPGZhbWlseT5Kb25lczwvZmFtaWx5PgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgIDwvcmVsYXRlZFBlcnNvbj4KICAgICAgPC9yZWxhdGVkRW50aXR5PgogICA8L2luZm9ybWFudD4KICAgPGN1c3RvZGlhbj4KICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAgICA8cmVwcmVzZW50ZWRDdXN0b2RpYW5Pcmdhbml6YXRpb24+CiAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICBleHRlbnNpb249Ijk5OTk5OTk5IgogICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgICAgPG5hbWU+Q29tbXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzPC9uYW1lPgogICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICB2YWx1ZT0idGVsOiA1NTUtNTU1LTEwMDIiCiAgICAgICAgICAgICAgIHVzZT0iV1AiLz4KICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgdXNlPSJXUCI+CiAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICA8L3JlcHJlc2VudGVkQ3VzdG9kaWFuT3JnYW5pemF0aW9uPgogICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICA8L2N1c3RvZGlhbj4KICAgPGluZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICA8aW50ZW5kZWRSZWNpcGllbnQ+CiAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAgICA8cmVjZWl2ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgIDxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT4KICAgICAgICAgPC9yZWNlaXZlZE9yZ2FuaXphdGlvbj4KICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgPGxlZ2FsQXV0aGVudGljYXRvcj4KICAgICAgPHRpbWUKICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgIDxzaWduYXR1cmVDb2RlCiAgICAgICAgIGNvZGU9IlMiLz4KICAgICAgPGFzc2lnbmVkRW50aXR5PgogICAgICAgICA8aWQKICAgICAgICAgICAgZXh0ZW5zaW9uPSI5OTk5OTk5OTkiCiAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICA8YWRkcj4KICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcml2ZSA8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICA8L2FkZHI+CiAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgIHVzZT0iV1AiCiAgICAgICAgICAgIHZhbHVlPSJ0ZWw6NTU1LTU1NS0xMDAyIi8+CiAgICAgICAgIDxhc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICA8L2xlZ2FsQXV0aGVudGljYXRvcj4KICAgPGF1dGhlbnRpY2F0b3I+CiAgICAgIDx0aW1lCiAgICAgICAgIHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICA8c2lnbmF0dXJlQ29kZQogICAgICAgICBjb2RlPSJTIi8+CiAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgPGlkCiAgICAgICAgICAgIGV4dGVuc2lvbj0iOTk5OTk5OTk5IgogICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgPC9hZGRyPgogICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICB1c2U9IldQIgogICAgICAgICAgICB2YWx1ZT0idGVsOjU1NS01NTUtMTAwMiIvPgogICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgPC9hdXRoZW50aWNhdG9yPgogICA8cGFydGljaXBhbnQgdHlwZUNvZGU9IklORCI+CiAgICAgIDxhc3NvY2lhdGVkRW50aXR5IGNsYXNzQ29kZT0iUFJTIj4KICAgICAgICAgPGNvZGUKICAgICAgICAgICAgY29kZT0iR1BBUk5UIgogICAgICAgICAgICBkaXNwbGF5TmFtZT0iR3JhbmQgUGFyZW50IgogICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4xLjExLjE5NTYzIgogICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUGVyc29uYWwgUmVsYXRpb25zaGlwIFJvbGUgVHlwZSBWYWx1ZSBTZXQiLz4KICAgICAgICAgPGFkZHIKICAgICAgICAgICAgdXNlPSJIUCI+CiAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTM1NyBBbWJlciBEcml2ZTwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgIDxjaXR5PkJlYXZlcnRvbjwvY2l0eT4KICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcwMDY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgIAogICAgICAgICA8L2FkZHI+CiAgICAgICAgIDx0ZWxlY29tIHZhbHVlPSd0ZWw6KDU1NSk1NTUtMjAwNicgdXNlPSdXUCcvPgogICAgICAgICA8YXNzb2NpYXRlZFBlcnNvbj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxwcmVmaXg+TXIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgIDxnaXZlbj5SYWxwaDwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+Sm9uZXM8L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2Fzc29jaWF0ZWRQZXJzb24+CiAgICAgIDwvYXNzb2NpYXRlZEVudGl0eT4KICAgPC9wYXJ0aWNpcGFudD4KICAgPHBhcnRpY2lwYW50IHR5cGVDb2RlPSJJTkQiPgogICAgICA8YXNzb2NpYXRlZEVudGl0eSBjbGFzc0NvZGU9IlBSUyI+CiAgICAgICAgIDxjb2RlCiAgICAgICAgICAgIGNvZGU9IlNQUyIKICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNQT1VTRSIKICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMS4xMS4xOTU2MyIKICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlBlcnNvbmFsIFJlbGF0aW9uc2hpcCBSb2xlIFR5cGUgVmFsdWUgU2V0Ii8+CiAgICAgICAgIDxhZGRyCiAgICAgICAgICAgIHVzZT0iSFAiPgogICAgICAgICAgICA8IS0tIEhQIGlzICJwcmltYXJ5IGhvbWUiIGZyb20gY29kZVN5c3RlbSAyLjE2Ljg0MC4xLjExMzg4My41LjExMTkgLS0+CiAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMzU3IEFtYmVyIERyaXZlPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgPGNpdHk+QmVhdmVydG9uPC9jaXR5PgogICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICA8cG9zdGFsQ29kZT45NzAwNjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgIDwhLS0gVVMgaXMgIlVuaXRlZCBTdGF0ZXMiIGZyb20gSVNPIDMxNjYtMSBDb3VudHJ5IENvZGVzOiAxLjAuMzE2Ni4xIC0tPgogICAgICAgICA8L2FkZHI+CiAgICAgICAgIDx0ZWxlY29tIHZhbHVlPSd0ZWw6KDU1NSk1NTUtMjAwNicgdXNlPSdXUCcvPgogICAgICAgICA8YXNzb2NpYXRlZFBlcnNvbj4KICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgIDxwcmVmaXg+TXIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgIDxnaXZlbj5GcmFuazwvZ2l2ZW4+CiAgICAgICAgICAgICAgIDxmYW1pbHk+Sm9uZXM8L2ZhbWlseT4KICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICA8L2Fzc29jaWF0ZWRQZXJzb24+CiAgICAgIDwvYXNzb2NpYXRlZEVudGl0eT4KICAgPC9wYXJ0aWNpcGFudD4KICAgPGRvY3VtZW50YXRpb25PZgogICAgICB0eXBlQ29kZT0iRE9DIj4KICAgICAgPHNlcnZpY2VFdmVudAogICAgICAgICBjbGFzc0NvZGU9IlBDUFIiPgogICAgICAgICA8Y29kZQogICAgICAgICAgICBjb2RlPSIyMzM2MDQwMDciCiAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQtQ1QiCiAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJQbnVlbW9uaWEiLz4KICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgIDxoaWdoCiAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICAgICAgICAKICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICA8cGVyZm9ybWVyCiAgICAgICAgICAgIHR5cGVDb2RlPSJQUkYiPgogICAgICAgICAgICA8ZnVuY3Rpb25Db2RlCiAgICAgICAgICAgICAgIGNvZGU9IlBQIgogICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUHJpbWFyeSBDYXJlIFByb3ZpZGVyIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4xMi40NDMiCiAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJQcm92aWRlciBSb2xlIj4KICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD5QcmltYXJ5IENhcmUgUHJvdmlkZXI8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgPC9mdW5jdGlvbkNvZGU+CiAgICAgICAgICAgIDx0aW1lPgogICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgPC90aW1lPgogICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICBleHRlbnNpb249IlBzZXVkb01ELTEiCiAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSIyMDhEMDAwMDBYIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iR2VuZXJhbCBQcmFjdGljZSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlByb3ZpZGVyIENvZGVzIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEwMSIvPgogICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcjwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgIDxjaXR5PlBvcnRsYW5kPC9jaXR5PgogICAgICAgICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgdmFsdWU9InRlbDorMS01NTUtNTU1LTUwMDAiCiAgICAgICAgICAgICAgICAgIHVzZT0iV1AiLz4KICAgICAgICAgICAgICAgPGFzc2lnbmVkUGVyc29uPgogICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkhlbnJ5PC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5TZXZlbjwvZmFtaWx5PgogICAgICAgICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgIDwvYXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjE5LjUuOTk5OS4xMzkzIi8+CiAgICAgICAgICAgICAgICAgIDxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT4KICAgICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgICAgdmFsdWU9InRlbDorMS01NTUtNTU1LTUwMDAiCiAgICAgICAgICAgICAgICAgICAgIHVzZT0iV1AiLz4KICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHJpdmUgPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICA8L3BlcmZvcm1lcj4KICAgICAgICAgPHBlcmZvcm1lcgogICAgICAgICAgICB0eXBlQ29kZT0iUFJGIj4KICAgICAgICAgICAgPGZ1bmN0aW9uQ29kZQogICAgICAgICAgICAgICBjb2RlPSJQUCIKICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlByaW1hcnkgQ2FyZSBQcm92aWRlciIKICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMTIuNDQzIgogICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUHJvdmlkZXIgUm9sZSI+CiAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+UHJpbWFyeSBDYXJlIFByb3ZpZGVyPC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgIDwvZnVuY3Rpb25Db2RlPgogICAgICAgICAgICA8dGltZT4KICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgIDwvdGltZT4KICAgICAgICAgICAgPGFzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uPSJQc2V1ZG9NRC0zIgogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iMjA4RDAwMDAwWCIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkdlbmVyYWwgUHJhY3RpY2UiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJQcm92aWRlciBDb2RlcyIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xMDEiLz4KICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0ZWw6KzEtNTU1LTU1NS01MDAwIgogICAgICAgICAgICAgICAgICB1c2U9IkhQIi8+CiAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ljk5OTkuMTM5MyIvPgogICAgICAgICAgICAgICAgICA8bmFtZT5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJ0ZWw6KzEtNTU1LTU1NS01MDAwIgogICAgICAgICAgICAgICAgICAgICB1c2U9IkhQIi8+CiAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTAwMiBIZWFsdGhjYXJlIERyaXZlIDwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlBvcnRsYW5kPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgPC9wZXJmb3JtZXI+CiAgICAgIDwvc2VydmljZUV2ZW50PgogICA8L2RvY3VtZW50YXRpb25PZj4KICAgCiAgIDxjb21wb25lbnRPZj4KICAgICAgPGVuY29tcGFzc2luZ0VuY291bnRlcj4KICAgICAgICAgPGlkIGV4dGVuc2lvbj0iMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuNC42Ii8+CiAgICAgICAgIDxjb2RlCiAgICAgICAgICAgIGNvZGU9IjIzMzYwNDAwNyIKICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRC1DVCIKICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBudWVtb25pYSIvPgogICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgPHJlc3BvbnNpYmxlUGFydHk+CiAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgPGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICA8L3Jlc3BvbnNpYmxlUGFydHk+CiAgICAgICAgIDxlbmNvdW50ZXJQYXJ0aWNpcGFudCB0eXBlQ29kZT0iQVRORCI+CiAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgPGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjQuNiIvPgogICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5IZW5yeTwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+U2V2ZW48L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICA8L2Fzc2lnbmVkUGVyc29uPgogICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICA8L2VuY291bnRlclBhcnRpY2lwYW50PgogICAgICAgICA8bG9jYXRpb24+CiAgICAgICAgICAgIDxoZWFsdGhDYXJlRmFjaWxpdHk+CiAgICAgICAgICAgICAgIDxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My40LjYiLz4KICAgICAgICAgICAgPC9oZWFsdGhDYXJlRmFjaWxpdHk+CiAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgIDwvZW5jb21wYXNzaW5nRW5jb3VudGVyPgogICA8L2NvbXBvbmVudE9mPgogICA8IS0tICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgQ0RBIEJvZHkKICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAtLT4KICAgPGNvbXBvbmVudD4KICAgICAgPHN0cnVjdHVyZWRCb2R5PgogICAgICAgCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjYuMSIvPgogICAgICAgICAgICAgICA8IS0tIEFsZXJ0cyBzZWN0aW9uIHRlbXBsYXRlIC0tPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSI0ODc2NS0yIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgPHRpdGxlPkFMTEVSR0lFUywgQURWRVJTRSBSRUFDVElPTlMsIEFMRVJUUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3Vic3RhbmNlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJlYWN0aW9uPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNldmVyaXR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXR1czwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UGVuaWNpbGxpbiBHIGJlbnphdGhpbmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InJlYWN0aW9uMSI+SGl2ZXM8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJzZXZlcml0eTEiPk1vZGVyYXRlIHRvIHNldmVyZTwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SW5hY3RpdmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db2RlaW5lPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJyZWFjdGlvbjIiPlNob3J0bmVzcyBvZiBCcmVhdGg8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJzZXZlcml0eTIiPk1vZGVyYXRlPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BY3RpdmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Bc3BpcmluPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJyZWFjdGlvbjMiPkhpdmVzPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0ic2V2ZXJpdHkzIj5NaWxkIHRvIG1vZGVyYXRlPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BY3RpdmU8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgIDxlbnRyeQogICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iRFJJViI+CiAgICAgICAgICAgICAgICAgIDxhY3QKICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJBQ1QiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMwIi8+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMzZlM2U5MzAtN2IxNC0xMWRiLTlmZTEtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ4NzY1LTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWxsZXJnaWVzLCBhZHZlcnNlIHJlYWN0aW9ucywgYWxlcnRzIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNzA1MDEiPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA3MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC43Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSI0YWRjMTAyMC03YjE0LTExZGItOWZlMS0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93IG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDE5NTExMDAzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUHJvcGVuc2l0eSB0byBhZHZlcnNlIHJlYWN0aW9uIHRvIGRydWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjcmVhY3Rpb24xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkNTTSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJ0aWNpcGFudFJvbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYXlpbmdFbnRpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNTUFUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNzk4MiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBlbmljaWxsaW4gRyBiZW56YXRoaW5lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BsYXlpbmdFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnRSb2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BhcnRpY2lwYW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBBbGxlcmd5IHN0YXR1cyBvYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzM5OTktNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTdGF0dXMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjczNDI1MDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSW5hY3RpdmUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJNRlNUIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBSZWFjdGlvbiBvYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjRhZGMxMDIwLTdiMTQtMTFkYi05ZmUxLTA4MDAyMDBjOWE2NCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNzA1MDEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIyNDc0NzIwMDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJIaXZlcyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICoqIFNldmVyaXR5IG9ic2VydmF0aW9uIHRlbXBsYXRlICoqIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IlNFViIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNldmVyaXR5IE9ic2VydmF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJBY3RDb2RlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjc2V2ZXJpdHkxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjM3MTkyNDAwOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ik1vZGVyYXRlIHRvIHNldmVyZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMzAiLz4KICAgICAgICAgICAgICAgICAgICAgPCEtLSAqKiBBbGxlcmd5IHByb2JsZW0gYWN0ICoqIC0tPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMzZlM2U5MzAtN2IxNC0xMWRiLTlmZTEtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ4NzY1LTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWxsZXJnaWVzLCBhZHZlcnNlIHJlYWN0aW9ucywgYWxlcnRzIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNjA1MDEiPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA2MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC43Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSI0YWRjMTAyMC03YjE0LTExZGItOWZlMS0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA2MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQxOTUxMTAwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlByb3BlbnNpdHkgdG8gYWR2ZXJzZSByZWFjdGlvbiB0byBkcnVnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJDU00iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnRSb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGF5aW5nRW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTU1BVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjI2NzAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb2RlaW5lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BsYXlpbmdFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnRSb2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BhcnRpY2lwYW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzM5OTktNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTdGF0dXMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU1NTYxMDAzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWN0aXZlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iTUZTVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzaW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC45Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUmVhY3Rpb24gb2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSI0YWRjMTAyMC03YjE0LTExZGItOWZlMS0wODAwMjAwYzlhNjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNyZWFjdGlvbjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDYwNTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjY3MDM2MDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iU2hvcnRuZXNzIG9mIEJyZWF0aCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICoqIFNldmVyaXR5IG9ic2VydmF0aW9uIHRlbXBsYXRlICoqIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IlNFViIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNldmVyaXR5IE9ic2VydmF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJBY3RDb2RlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjc2V2ZXJpdHkyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjY3MzYwMDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJNb2RlcmF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMzAiLz4KICAgICAgICAgICAgICAgICAgICAgPCEtLSAqKiBBbGxlcmd5IHByb2JsZW0gYWN0ICoqIC0tPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMzZlM2U5MzAtN2IxNC0xMWRiLTlmZTEtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ4NzY1LTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWxsZXJnaWVzLCBhZHZlcnNlIHJlYWN0aW9ucywgYWxlcnRzIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwODA1MDEiPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA4MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjciLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjRhZGMxMDIwLTdiMTQtMTFkYi05ZmUxLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJBU1NFUlRJT04iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDgwNTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQxOTUxMTAwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlByb3BlbnNpdHkgdG8gYWR2ZXJzZSByZWFjdGlvbiB0byBkcnVnIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJDU00iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnRSb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGF5aW5nRW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTU1BVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExOTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBc3BpcmluIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3JlYWN0aW9uMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BsYXlpbmdFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnRSb2xlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BhcnRpY2lwYW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2lvbkluZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMzk5OS00IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlN0YXR1cyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNTU1NjEwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBY3RpdmUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJNRlNUIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSI0YWRjMTAyMC03YjE0LTExZGItOWZlMS0wODAwMjAwYzlhNjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNyZWFjdGlvbjMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDgwNTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjQ3NDcyMDA0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSGl2ZXMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJTRVYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTZXZlcml0eSBPYnNlcnZhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS40IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQWN0Q29kZSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3NldmVyaXR5MyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzNzE5MjMwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJNaWxkIHRvIG1vZGVyYXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgIDwvYWN0PgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAKICAgCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjIyLjEiLz4KICAgICAgICAgIAogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSI0NjI0MC04IgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ikhpc3Rvcnkgb2YgZW5jb3VudGVycyIvPgogICAgICAgICAgICAgICA8dGl0bGU+RU5DT1VOVEVSUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RW5jb3VudGVyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBlcmZvcm1lcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Mb2NhdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9IkVuY291bnRlcjEiLz4gUG51ZW1vbmlhPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRyIEhlbnJ5IFNldmVuPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDEyMDgwNjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGVuY291bnRlcgogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkVOQyIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNDkiLz4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGRlOCIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI5OTIyMiIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkluUGF0aWVudCBBZG1pc3Npb24iCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJDUFQiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMTIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1WZXJzaW9uPSI0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD5NaWxkIEZldmVyPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI0VuY291bnRlcjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmEzLTVkOTgxNWZmNGRlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI1OTA1ODAwMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkdlbmVyYWwgUGh5c2ljaWFuIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgIDwvcGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnQKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJ0aWNpcGFudFJvbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMzIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExNjAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4yNTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJIZWFsdGhjYXJlU2VydmljZUxvY2F0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iVXJnZW50IENhcmUgQ2VudGVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTAwMiBIZWFsdGhjYXJlIERyPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYXlpbmdFbnRpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJQTEMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGxheWluZ0VudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXJ0aWNpcGFudFJvbGU+CiAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnQ+CiAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUlNPTiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMTkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImRiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uPSI0NTY2NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDQ2ODQwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJGaW5kaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIyMzM2MDQwMDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJQbmV1bW9uaWEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIiBpbnZlcnNpb25JbmQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGFjdCBjbGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjgwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgcm9vdD0iNWE3ODQyNjAtNjg1Ni00ZjM4LTk2MzgtODBjNzUxYWZmMmZiIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjI5MzA4LTQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkVOQ09VTlRFUiBESUFHTk9TSVMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iYWN0aXZlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93IHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iU1VCSiIgaW52ZXJzaW9uSW5kPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbiBjbGFzc0NvZGU9Ik9CUyIgbW9vZENvZGU9IkVWTiIgbmVnYXRpb25JbmQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC40Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUHJvYmxlbSBPYnNlcnZhdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImFiMTc5MWIwLTVjNzEtMTFkYi1iMGRlLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDk1ODYwMDYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb21wbGFpbnQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjIzMzYwNDAwNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBuZXVtb25pYSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgPC9lbmNvdW50ZXI+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgCgogICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi4yLjEiLz4KICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9IjExMzY5LTYiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSGlzdG9yeSBvZiBpbW11bml6YXRpb25zIi8+CiAgICAgICAgICAgICAgIDx0aXRsZT5JTU1VTklaQVRJT05TPC90aXRsZT4KICAgICAgICAgICAgICAgPHRleHQ+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgSUQ9ImltbXVuU2VjdCIvPgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFjY2luZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXR1czwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9ImltbXVuMiIvPkluZmx1ZW56YSB2aXJ1cyB2YWNjaW5lLCBJTTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5NYXkgMjAxMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db21wbGV0ZWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0iaW1tdW40Ii8+VGV0YW51cyBhbmQgZGlwaHRoZXJpYSB0b3hvaWRzLCBJTTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHIgMjAxMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db21wbGV0ZWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0iaW1tdW42Ii8+SW5mbHVlbnphIHZpcnVzIHZhY2NpbmUsIElNPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkF1ZyAyMDEyPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlY2xpbmVkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0JBRE0iCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iCiAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uSW5kPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNTIiLz4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSJlNmYxYmE0My1jMGVkLTRiOWItOWYxMi1mNDM1ZDhhZDhmOTIiLz4KICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNpbW11bjIiLz4KICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IklWTF9UUyIKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwNTEwIi8+CiAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZUNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQzI4MTYxIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI2LjEuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9Ik5hdGlvbmFsIENhbmNlciBJbnN0aXR1dGUgKE5DSSkgVGhlc2F1cnVzIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSW50cmFtdXNjdWxhciBpbmplY3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgPGRvc2VRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNTAiCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9Im1jZyIvPgogICAgICAgICAgICAgICAgICAgICA8Y29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZFByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41NCIvPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZE1hdGVyaWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi41OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkluZmx1ZW56YSB2aXJ1cyB2YWNjaW5lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQ1ZYIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD5JbmZsdWVuemEgdmlydXMgdmFjY2luZTwvb3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhbnNsYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTExIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iaW5mbHVlbnphLCBsaXZlLCBpbnRyYW5hc2FsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQ1ZYIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+SGVhbHRoIExTIC0gSW1tdW5vIEluYy48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlZFByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgIDwvY29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIiBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iQUNUIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iSU5UIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICoqIEluc3RydWN0aW9ucyBUZW1wbGF0ZSAqKiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxNzEwNDQwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJpbW11bml6YXRpb24gZWR1Y2F0aW9uIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNpbW11blNlY3QiLz5Qb3NzaWJsZSBmbHUtbGlrZSBzeW1wdG9tcyBmb3IgdGhyZWUgZGF5cy48L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgPC9zdWJzdGFuY2VBZG1pbmlzdHJhdGlvbj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0JBRE0iCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iCiAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uSW5kPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNTIiLz4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSJlNmYxYmE0My1jMGVkLTRiOWItOWYxMi1mNDM1ZDhhZDhmOTIiLz4KICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNpbW11bjQiLz4KICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IklWTF9UUyIKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwNDAxIi8+CiAgICAgICAgICAgICAgICAgICAgIDxyb3V0ZUNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQzI4MTYxIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI2LjEuMSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9Ik5hdGlvbmFsIENhbmNlciBJbnN0aXR1dGUgKE5DSSkgVGhlc2F1cnVzIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSW50cmFtdXNjdWxhciBpbmplY3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgPGRvc2VRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNTAiCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9Im1jZyIvPgogICAgICAgICAgICAgICAgICAgICA8Y29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZFByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41NCIvPgogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTAzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iVGV0YW51cyBhbmQgZGlwaHRoZXJpYSB0b3hvaWRzIC0gcHJlc2VydmF0aXZlIGZyZWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJDVlgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PlRldGFudXMgYW5kIGRpcGh0aGVyaWEgdG94b2lkcyAtIHByZXNlcnZhdGl2ZSBmcmVlPC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFuc2xhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIwOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlRldGFudXMgYW5kIGRpcGh0aGVyaWEgdG94b2lkcyAtIHByZXNlcnZhdGl2ZSBmcmVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQ1ZYIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjU5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+SGVhbHRoIExTIC0gSW1tdW5vIEluYy48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlZFByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgIDwvY29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIgogICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iQUNUIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iSU5UIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tICoqIEluc3RydWN0aW9ucyBUZW1wbGF0ZSAqKiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxNzEwNDQwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJpbW11bml6YXRpb24gZWR1Y2F0aW9uIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNpbW11blNlY3QiLz5Qb3NzaWJsZSBmbHUtbGlrZSBzeW1wdG9tcyBmb3IgdGhyZWUgZGF5cy48L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2FjdD4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgPC9zdWJzdGFuY2VBZG1pbmlzdHJhdGlvbj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0JBRE0iCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iCiAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41MiIvPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImU2ZjFiYTQzLWMwZWQtNGI5Yi05ZjEyLWY0MzVkOGFkOGY5MiIvPgogICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI2ltbXVuNiIvPgogICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iSVZMX1RTIgogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA2MDMiLz4KICAgICAgICAgICAgICAgICAgICAgPHJvdXRlQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDMjgxNjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjMuMjYuMS4xIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTmF0aW9uYWwgQ2FuY2VyIEluc3RpdHV0ZSAoTkNJKSBUaGVzYXVydXMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJbnRyYW11c2N1bGFyIGluamVjdGlvbiIvPgogICAgICAgICAgICAgICAgICAgICA8ZG9zZVF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI1MCIKICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0ibWNnIi8+CiAgICAgICAgICAgICAgICAgICAgIDxjb25zdW1hYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkUHJvZHVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1BTlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjU0Ii8+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuNTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJbmZsdWVuemEgdmlydXMgdmFjY2luZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkNWWCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+SW5mbHVlbnphIHZpcnVzIHZhY2NpbmU8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9ImluZmx1ZW56YSwgbGl2ZSwgaW50cmFuYXNhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkNWWCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi41OSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkhlYWx0aCBMUyAtIEltbXVubyBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICA8L2NvbnN1bWFibGU+CiAgICAgICAgICAgICAgICAgIDwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgIAogICAgICAgIAogICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi4xLjEiLz4KICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iMTAxNjAtMCIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJISVNUT1JZIE9GIE1FRElDQVRJT04gVVNFIi8+CiAgICAgICAgICAgICAgIDx0aXRsZT5NZWRpY2F0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVkaWNhdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EaXJlY3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXJ0IERhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3RhdHVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkluZGljYXRpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZpbGwgSW5zdHJ1Y3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0iTWVkMSI+QWxidXRlcm9sIDAuMDkgTUcvQUNUVUFUIGluaGFsYW50IHNvbHV0aW9uPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4wLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiwgMiBwdWZmcyBvbmNlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjIwMTIwODA2PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjdGl2ZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QbmV1bW9uaWEgKDIzMzYwNDAwNyBTTk9NRUQgQ1QpPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50IElEPSJGaWxsSW5zIj5HZW5lcmljIFN1YnN0aXRpdGlvbiBBbGxvd2VkPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPHN1YnN0YW5jZUFkbWluaXN0cmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0JBRE0iCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjE2Ii8+CiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImNkYmQzM2YwLTZjZGUtMTFkYi05ZmUxLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI01lZDEiLz4wLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiwgMiBwdWZmcyA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iSVZMX1RTIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBJVkxfVFMiCiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RpdHV0aW9uU3BlY2lmaWVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcj0iQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJpb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEyIgogICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJoIi8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgPHJvdXRlQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDMzgyMTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjMuMjYuMS4xIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTkNJIFRoZXNhdXJ1cyIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlJFU1BJUkFUT1JZIChJTkhBTEFUSU9OKSIvPgogICAgICAgICAgICAgICAgICAgICA8ZG9zZVF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIwLjA5IgogICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJtZy9hY3R1YXQiLz4KICAgICAgICAgICAgICAgICAgICAgPHJhdGVRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iOTAiCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9Im1sL21pbiIvPgogICAgICAgICAgICAgICAgICAgICA8YWRtaW5pc3RyYXRpb25Vbml0Q29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDNDI5NDQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJTkhBTEFOVCIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNi4xLjEiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJOQ0kgVGhlc2F1cnVzIi8+CiAgICAgICAgICAgICAgICAgICAgIDxjb25zdW1hYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkUHJvZHVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1BTlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZjRlZTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZE1hdGVyaWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI1NzM2MjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBbGJ1dGVyb2wgMC4wOSBNRy9BQ1RVQVQgaW5oYWxhbnQgc29sdXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNNZWQxIi8+PC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cmFuc2xhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI1NzM2MjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJQcm92ZW50aWwgMC4wOSBNRy9BQ1RVQVQgaW5oYWxhbnQgc29sdXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJSeE5vcm0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlZE1hdGVyaWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5NZWRpY2F0aW9uIEZhY3RvcnkgSW5jLjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkUHJvZHVjdD4KICAgICAgICAgICAgICAgICAgICAgPC9jb25zdW1hYmxlPgogICAgICAgICAgICAgICAgICAgICA8cGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJOSSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjE5LjUuOTk5OS4xMzkzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICAgICAgICA8L3BlcmZvcm1lcj4KICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJDU00iPgogICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnRSb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDEyMzA3MDA5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iZHJ1ZyB2ZWhpY2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGF5aW5nRW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTU1BVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjMyNDA0OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFlcm9zb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJSeE5vcm0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+QWVyb3NvbDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wbGF5aW5nRW50aXR5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3BhcnRpY2lwYW50Um9sZT4KICAgICAgICAgICAgICAgICAgICAgPC9wYXJ0aWNpcGFudD4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJSU09OIj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4xOSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iZGI3MzQ2NDctZmM5OS00MjRjLWE4NjQtN2UzY2RhODJlNzAzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjQ1NjY1Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQwNDY4NDAwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkZpbmRpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93IG51bGxGbGF2b3I9IlVOSyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2ggdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjMzNjA0MDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUG5ldW1vbmlhIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUkVGUiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdXBwbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJTUExZIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iSU5UIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4xNyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iTkkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJJVkxfVFMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVwZWF0TnVtYmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxxdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNzUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRQcm9kdWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGVlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU3MzYyMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFsYnV0ZXJvbCAwLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+PHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI01lZDEiLz48L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU3MzYyMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFsYnV0ZXJvbCAwLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJ4Tm9ybSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1lZGljYXRpb24gRmFjdG9yeSBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbj0iMjk4MTgyMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNS45OTk5LjQ1NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcjwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlBvcnRsYW5kPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZTRkZTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iU1VCSiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzaW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IklOVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAqKiBJbnN0cnVjdGlvbnMgVGVtcGxhdGUgKiogLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5MDczMDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iaW5zdHJ1Y3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+PHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI0ZpbGxJbnMiLz5sYWJlbCBpbiBzcGFuaXNoPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3VwcGx5PgogICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3VwcGx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU1BMWSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMS4yLjMuNC41Njc4OS4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249ImNiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXBlYXROdW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRQcm9kdWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iTUFOVSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGVlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU3MzYyMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFsYnV0ZXJvbCAwLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+PHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI01lZDEiLz48L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjU3MzYyMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFsYnV0ZXJvbCAwLjA5IE1HL0FDVFVBVCBpbmhhbGFudCBzb2x1dGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJ4Tm9ybSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1lZGljYXRpb24gRmFjdG9yeSBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ljk5OTkuNDU2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjI5ODE4MjMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNS45OTk5LjEzOTMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q29tbXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3N1cHBseT4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgPHByZWNvbmRpdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUFJDTiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGNyaXRlcmlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNTYwMTgwMDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJXaGVlemluZyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2NyaXRlcmlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9wcmVjb25kaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgIAogICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi4xMCIvPgogICAgICAgIAogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSIxODc3Ni01IgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlRyZWF0bWVudCBwbGFuIi8+CiAgICAgICAgICAgICAgIDx0aXRsZT5DQVJFIFBMQU48L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBsYW5uZWQgQWN0aXZpdHk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UGxhbm5lZCBEYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db25zdWx0YXRpb24gd2l0aCBEciBHZW9yZ2UgUG90b21hYyBmb3IgQXN0aG1hPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjIwMTIwODIwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2hlc3QgWC1yYXk8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MjAxMjA4MjY8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TcHV0dW0gQ3VsdHVyZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDEyMDgyMDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5PgogICAgICAgICAgICAgICAgICA8ZW5jb3VudGVyCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJJTlQiCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iRU5DIj4KICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC40MCIvPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjlhNmQxYmFjLTE3ZDMtNDE5NS04OWE0LTExMjFiYzgwOWI0ZCIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI5OTI0MSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ik9mZmljZSBjb25zdWx0YXRpb24gLSAxNSBtaW51dGVzIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iQ1BUIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEyIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8Y2VudGVyIHZhbHVlPSIyMDEyMDgyMCIvPgogICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iU1VCSiIgaW52ZXJzaW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IklOVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5MDczMDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iaW5zdHJ1Y3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+Rm9sbG93IHVwIHdpdGggRHIgR2VvcmdlIFBvdG9tYWMgZm9yIEFzdGhtYTwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYWN0PgogICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICA8L2VuY291bnRlcj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5PgogICAgICAgICAgICAgICAgICA8cHJvY2VkdXJlCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJSUU8iCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iUFJPQyI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNDEiLz4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjlhNmQxYmFjLTE3ZDMtNDE5NS04OWM0LTExMjFiYzgwOWI1YSIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxNjg3MzEwMDkiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDaGVzdCBYLVJheSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRC1DVCIvPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJuZXciLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxjZW50ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODI2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgPC9wcm9jZWR1cmU+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgICAgIDxlbnRyeQogICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iRFJJViI+CiAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IlJRTyI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNDQiLz4KICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSI5YTZkMWJhYy0xN2QzLTQxOTUtODlhNC0xMTIxYmM4MDliNGEiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNjI0LTciCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlNwdXR1bSBDdWx0dXJlIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Im5ldyIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGNlbnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MjAiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgoKCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjExLjEiLz4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICBjb2RlPSIxMDE4My0yIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iIEhPU1BJVEFMIERJU0NIQVJHRSBNRURJQ0FUSU9OUyAiLz4KICAgICAgICAgICAgICAgPHRpdGxlPkhPU1BJVEFMIERJU0NIQVJHRSBNRURJQ0FUSU9OUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGUKICAgICAgICAgICAgICAgICAgICAgYm9yZGVyPSIxIgogICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVkaWNhdGlvbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EaXJlY3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXJ0IERhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3RhdHVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkluZGljYXRpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZpbGwgSW5zdHJ1Y3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudCBJRD0iRE0iPjEyMCBBQ1RVQVQgRmx1dGljYXNvbmUgcHJvcGlvbmF0ZSAwLjExIE1HL0FDVFVBVCBNZXRlcmVkIERvc2UgSW5oYWxlcjwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvbnRlbnQgSUQ9IkRNMSI+MC4xMSBNRy9BQ1RVQVQgTWV0ZXJlZCBEb3NlIE9uY2UgRGFpbHk8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjIwMTIwODEzPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjdGl2ZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ccm9uY2hpdGlzICgzMjM5ODAwNCBTTk9NRUQgQ1QpPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50IElEPSJGaWxsSW5zX0RNIj5HZW5lcmljIFN1YnN0aXRpdGlvbiBBbGxvd2VkPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjM1Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSI1YTc4NDI2MC02ODU2LTRmMzgtOTYzOC04MGM3NTFhZmYyZmIiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTAxODMtMiIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJEaXNjaGFyZ2UgbWVkaWNhdGlvbiIvPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJhY3RpdmUiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoIHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdWJzdGFuY2VBZG1pbmlzdHJhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IlNCQURNIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4xNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSJjZGJkMzNmMC02Y2RlLTExZGItOWZlMS0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNETTEiLz4wLjExIE1HL0FDVFVBVCBNZXRlcmVkIERvc2UgT25jZSBEYWlseSA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iSVZMX1RTIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdyB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2ggdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBJVkxfVFMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RpdHV0aW9uU3BlY2lmaWVkPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcj0iQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJpb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJoIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJvdXRlQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDMzgyMTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjMuMjYuMS4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTkNJIFRoZXNhdXJ1cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlJFU1BJUkFUT1JZIChJTkhBTEFUSU9OKSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZG9zZVF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJtZy9hY3R1YXQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJhdGVRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTEwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJtbC9taW4iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1heERvc2VRdWFudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnVtZXJhdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVub21pbmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF4RG9zZVF1YW50aXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRtaW5pc3RyYXRpb25Vbml0Q29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDNDI5NDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJTkhBTEFOVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNi4xLjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJOQ0kgVGhlc2F1cnVzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb25zdW1hYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bWFudWZhY3R1cmVkUHJvZHVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1BTlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZjRlZTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZE1hdGVyaWFsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4OTYwMDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuODgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSIxMjAgQUNUVUFUIEZsdXRpY2Fzb25lIHByb3Bpb25hdGUgMC4xMSBNRy9BQ1RVQVQgTWV0ZXJlZCBEb3NlIEluaGFsZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNETSIvPjwvb3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHJhbnNsYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODk2MDAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iMTIwIEFDVFVBVCBGbHV0aWNhc29uZSBwcm9waW9uYXRlIDAuMTEgTUcvQUNUVUFUIE1ldGVyZWQgRG9zZSBJbmhhbGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TWVkaWNhdGlvbiBGYWN0b3J5IEluYy48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVyT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlZFByb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY29uc3VtYWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBlcmZvcm1lcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iTkkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ljk5OTkuMTM5NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJ0aWNpcGFudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iQ1NNIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50Um9sZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1BTlUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQxMjMwNzAwOSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9ImRydWcgdmVoaWNsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxheWluZ0VudGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik1NQVQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMjQwNDkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBZXJvc29sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iUnhOb3JtIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkFlcm9zb2w8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGxheWluZ0VudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXJ0aWNpcGFudFJvbGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUlNPTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMTkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImRiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uPSI0NTY2NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDQ2ODQwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJGaW5kaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMTAxMTMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMjM5ODAwNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkJyb25jaGl0aXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJSRUZSIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN1cHBseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IlNQTFkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJJTlQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjE3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJOSSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IklWTF9UUyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXBlYXROdW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI3NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvZHVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZFByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMmE2MjAxNTUtOWQxMS00MzllLTkyYjMtNWQ5ODE1ZmY0ZWU4Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODk2MDAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iMTIwIEFDVFVBVCBGbHV0aWNhc29uZSBwcm9waW9uYXRlIDAuMTEgTUcvQUNUVUFUIE1ldGVyZWQgRG9zZSBJbmhhbGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjRE0iLz48L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ijg5NjAwMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IjEyMCBBQ1RVQVQgRmx1dGljYXNvbmUgcHJvcGlvbmF0ZSAwLjExIE1HL0FDVFVBVCBNZXRlcmVkIERvc2UgSW5oYWxlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJ4Tm9ybSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1lZGljYXRpb24gRmFjdG9yeSBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbj0iMjk4MTgyNSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNS45OTk5LjQ1NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cmVldEFkZHJlc3NMaW5lPjEwMDIgSGVhbHRoY2FyZSBEcjwvc3RyZWV0QWRkcmVzc0xpbmU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlBvcnRsYW5kPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+T1I8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT45NzI2NjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+VVM8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyYTYyMDE1NS05ZDExLTQzOWUtOTJiMy01ZDk4MTVmZTRkZTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iU1VCSiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzaW9uSW5kPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IklOVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5MDczMDA3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iaW5zdHJ1Y3Rpb24iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+PHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI0ZpbGxJbnNfRE0iLz5HZW5lcmljIFN1YnN0aXR1dGlvbiBBbGxvd2VkPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3VwcGx5PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3VwcGx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU1BMWSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMTgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMS4yLjMuNC41Njc4OS4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249ImNiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZXBlYXROdW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHF1YW50aXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI3NSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvZHVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1hbnVmYWN0dXJlZFByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJNQU5VIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMmE2MjAxNTUtOWQxMS00MzllLTkyYjMtNWQ5ODE1ZmY0ZWU4Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZWRNYXRlcmlhbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODk2MDAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljg4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iMTIwIEFDVFVBVCBGbHV0aWNhc29uZSBwcm9waW9uYXRlIDAuMTEgTUcvQUNUVUFUIE1ldGVyZWQgRG9zZSBJbmhhbGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9yaWdpbmFsVGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjRE0iLz48L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyYW5zbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ijg5NjAwMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IjEyMCBBQ1RVQVQgRmx1dGljYXNvbmUgcHJvcGlvbmF0ZSAwLjExIE1HL0FDVFVBVCBNZXRlcmVkIERvc2UgSW5oYWxlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi44OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlJ4Tm9ybSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFudWZhY3R1cmVkTWF0ZXJpYWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtYW51ZmFjdHVyZXJPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1lZGljYXRpb24gRmFjdG9yeSBJbmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21hbnVmYWN0dXJlck9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tYW51ZmFjdHVyZWRQcm9kdWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb2R1Y3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ljk5OTkuNDU2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjI5ODE4MjUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SGVucnk8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlNldmVuPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZFBlcnNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkuNS45OTk5LjEzOTUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q29tbXVuaXR5IEhlYWx0aCBhbmQgSG9zcGl0YWxzPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N1cHBseT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZWNvbmRpdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUFJDTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNyaXRlcmlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNTYwMTgwMDQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJXaGVlemluZyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NyaXRlcmlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wcmVjb25kaXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgIDwvYWN0PgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgoKCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjUuMy4xLjMuMSIvPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgY29kZT0iNDIzNDktMSIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlJFQVNPTiBGT1IgUkVGRVJSQUwiLz4KICAgICAgICAgICAgICAgPHRpdGxlPlJFQVNPTiBGT1IgUkVGRVJSQUw8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHBhcmFncmFwaD5Gb2xsb3cgdXAgd2l0aCBEciBHZW9yZ2UgUG90b21hYyBmb3IgQXN0aG1hPC9wYXJhZ3JhcGg+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICA8L2NvbXBvbmVudD4KCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjUuMSIvPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSIxMTQ1MC00IgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBST0JMRU0gTElTVCIvPgogICAgICAgICAgICAgICA8dGl0bGU+UFJPQkxFTVM8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICBJRD0icHJvYmxlbXMiLz4KICAgICAgICAgICAgICAgICAgPGxpc3QKICAgICAgICAgICAgICAgICAgICAgbGlzdFR5cGU9Im9yZGVyZWQiPgogICAgICAgICAgICAgICAgICAgICA8aXRlbT48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0icHJvYmxlbTEiPlBuZXVtb25pYSA6IFN0YXR1cyAtIFJlc29sdmVkPC9jb250ZW50PjwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgPGl0ZW0+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InByb2JsZW0yIj5Bc3RobWEgOiBTdGF0dXMgLSBBY3RpdmU8L2NvbnRlbnQ+PC9pdGVtPgogICAgICAgICAgICAgICAgICA8L2xpc3Q+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPGFjdAogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkFDVCIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMyIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iZWM4YTZmZjgtZWQ0Yi00ZjdlLTgyYzMtZTk4ZTU4YjQ1ZGU3Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IkNPTkMiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuNiIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkNvbmNlcm4iLz4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2JsZW0gb2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQwOTU4NjAwNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkNvbXBsYWludCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3Byb2JsZW0xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjIzMzYwNDAwNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBuZXVtb25pYSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2JsZW0gb2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImFiMTc5MWIwLTVjNzEtMTFkYi1iMGRlLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDk1ODYwMDYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb21wbGFpbnQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNwcm9ibGVtMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIyMzM2MDQwMDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJQbmV1bW9uaWEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gICAgQWdlIG9ic2VydmF0aW9uIHRlbXBsYXRlICAgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ0NTUxODAwOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFnZSBBdCBPbnNldCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJQUSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjY1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJhIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbnRyeVJlbGF0aW9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iUkVGUiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExMzIzLTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSGVhbHRoIHN0YXR1cyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjcHJvYmxlbXMiLz48L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxNjI0NjcwMDciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTeW1wdG9tIEZyZWUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwIHR5cGVDb2RlPSJSRUZSIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMzk5OS00IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iU3RhdHVzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNwcm9ibGVtMiIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZSB4c2k6dHlwZT0iQ0QiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MTMzMjIwMDkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUmVzb2x2ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgICAgIDxlbnRyeQogICAgICAgICAgICAgICAgICB0eXBlQ29kZT0iRFJJViI+CiAgICAgICAgICAgICAgICAgIDxhY3QKICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJBQ1QiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMiLz4KICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImVjOGE2ZmY4LWVkNGItNGY3ZS04MmMzLWU5OGU1OGI0NWRlNyIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJDT05DIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb25jZXJuIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNzAxMDMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQwOTU4NjAwNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkNvbXBsYWludCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3Byb2JsZW0yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA3MDEwMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjE5NTk2NzAwMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkFzdGhtYSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2JsZW0gb2JzZXJ2YXRpb24gdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuNjgiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImFiMTc5MWIwLTVjNzEtMTFkYi1iMGRlLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0MDk1ODYwMDYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDb21wbGFpbnQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNwcm9ibGVtMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MDYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxOTU5NjcwMDEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJBc3RobWEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJTVUJKIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNpb25JbmQ9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDQ1NTE4MDA4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWdlIEF0IE9uc2V0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNjUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9ImEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbnRyeVJlbGF0aW9uc2hpcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVudHJ5UmVsYXRpb25zaGlwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJSRUZSIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC41Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTEzMjMtMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJIZWFsdGggc3RhdHVzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNwcm9ibGVtcyIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjE2MjQ2NzAwNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlN5bXB0b20gRnJlZSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2VudHJ5UmVsYXRpb25zaGlwPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW50cnlSZWxhdGlvbnNoaXAgdHlwZUNvZGU9IlJFRlIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24gY2xhc3NDb2RlPSJPQlMiIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzM5OTktNCIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlN0YXR1cyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjcHJvYmxlbTIiLz48L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUgeHNpOnR5cGU9IkNEIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNTU1NjEwMDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgQ1QiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQWN0aXZlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvZW50cnlSZWxhdGlvbnNoaXA+CiAgICAgICAgICAgICAgICAgIDwvYWN0PgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgogCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjcuMSIvPgogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgY29kZT0iNDc1MTktNCIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJISVNUT1JZIE9GIFBST0NFRFVSRVMiLz4KICAgICAgICAgICAgICAgPHRpdGxlPlBST0NFRFVSRVM8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlByb2NlZHVyZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQgSUQ9IlByb2MyIj5DaGVzdCBYLVJheTwvY29udGVudD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjgvNy8yMDEyPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgPC90ZXh0PiAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgICAgPHByb2NlZHVyZQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IlBST0MiCiAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjE0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjEyMzQ1Njc4OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMTY4NzMxMDA5IgogICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ2hlc3QgWC1SYXkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQtQ1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjUHJvYzIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8cHJpb3JpdHlDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IkNSIgogICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjciCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJBY3RQcmlvcml0eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkNhbGxiYWNrIHJlc3VsdHMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGhvZENvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0YXJnZXRTaXRlQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4MjA5NDAwOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCBDVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9Ikxvd2VyIFJlc3BpcmF0b3J5IFRyYWN0IFN0cnVjdHVyZSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8cGVyZm9ybWVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjEyMzQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJlZXRBZGRyZXNzTGluZT4xMDAyIEhlYWx0aGNhcmUgRHI8L3N0cmVldEFkZHJlc3NMaW5lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5Qb3J0bGFuZDwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPk9SPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+OTcyNjY8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PlVTPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZWxlY29tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZT0iV1AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIoNTU1KTU1NS01NTUtMTIzNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xOS41Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkNvbW11bml0eSBIZWFsdGggYW5kIEhvc3BpdGFsczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbGVjb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3BlcmZvcm1lcj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBhcnRpY2lwYW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cGFydGljaXBhbnRSb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjMyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjExNjAtMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4yNTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJIZWFsdGhjYXJlU2VydmljZUxvY2F0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iVXJnZW50IENhcmUgQ2VudGVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RyZWV0QWRkcmVzc0xpbmU+MTAwMiBIZWFsdGhjYXJlIERyPC9zdHJlZXRBZGRyZXNzTGluZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UG9ydGxhbmQ8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5PUjwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPjk3MjY2PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5VUzwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYXlpbmdFbnRpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJQTEMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Db21tdW5pdHkgSGVhbHRoIGFuZCBIb3NwaXRhbHM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGxheWluZ0VudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXJ0aWNpcGFudFJvbGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcGFydGljaXBhbnQ+CiAgICAgICAgICAgICAgICAgICAgIDwvcHJvY2VkdXJlPgogICAgICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAKCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjE0Ii8+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9IjQ3NDIwLTUiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICA8dGl0bGU+RlVOQ1RJT05BTCBTVEFUVVM8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZ1bmN0aW9uYWwgQ29uZGl0aW9uPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkVmZmVjdGl2ZSBEYXRlczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db25kaXRpb24gU3RhdHVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29udGVudCBJRD0iZnMxIj5EZXBlbmRlbmNlIG9uIGNhbmU8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjIwMDg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWN0aXZlPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb250ZW50IElEPSJmczIiPk1lbW9yeSBpbXBhaXJtZW50PC9jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDA4PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFjdGl2ZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC42OCIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5NTg2MDA2IgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ29tcGxhaW50Ii8+CiAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjZnMxIi8+CiAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA4MTEwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIxMDU1MDQwMDIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJEZXBlbmRlbmNlIG9uIENhbmUiLz4KICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC42OCIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDA5NTg2MDA2IgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ29tcGxhaW50Ii8+CiAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjZnMyIi8+CiAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA4MTEwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCBudWxsRmxhdm9yPSJVTksiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzODY4MDcwMDYiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJNZW1vcnkgSW1wYWlybWVudCIvPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC43MyIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYWIxNzkxYjAtNWM3MS0xMWRiLWIwZGUtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzczOTMwMDAwIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ29nbml0aXZlIEZ1bmN0aW9uIEZpbmRpbmciLz4KICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNmczIiLz4KICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDgxMTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ4MTY3MDAwIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQW1uZXNpYSIvPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAKCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjMuMSIvPgogICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9IjMwOTU0LTIiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUkVTVUxUUyIvPgogICAgICAgICAgICAgICA8dGl0bGU+UkVTVUxUUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sc3Bhbj0iMiI+TEFCT1JBVE9SWSBJTkZPUk1BVElPTjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW49IjIiPkNoZW1pc3RyaWVzIGFuZCBkcnVnIGxldmVsczwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJyZXN1bHQxIj5IR0IgKE0gMTMtMTggZy9kbDsgRiAxMi0xNiBnL2RsKTwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MTMuMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJyZXN1bHQyIj5XQkMgKDQuMy0xMC44IDEwKzMvdWwpPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD42Ljc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0icmVzdWx0MyI+UExUICgxMzUtMTQ1IG1lcS9sKTwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+MTIzIChMKTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgPGVudHJ5CiAgICAgICAgICAgICAgICAgIHR5cGVDb2RlPSJEUklWIj4KICAgICAgICAgICAgICAgICAgPG9yZ2FuaXplcgogICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9IkJBVFRFUlkiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8IS0tIFJlc3VsdCBvcmdhbml6ZXIgdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMSIvPgogICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iN2Q1YTAyYjAtNjdhNC0xMWRiLWJkMTMtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDM3ODkwMDkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDQkMgV08gRElGRkVSRU5USUFMIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iU05PTUVEIENUIi8+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFJlc3VsdCBvYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIxMDdjMmRjMC02N2E1LTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgeHNpOnR5cGU9IkNFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMDMxMy0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSEdCIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyI+IDwvY29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNyZXN1bHQxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgxMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTAuMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iZy9kbCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJwcmV0YXRpb25Db2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ik4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGhvZENvZGUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFyZ2V0U2l0ZUNvZGUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGltZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNmZmNGRlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2F1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZVJhbmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb25SYW5nZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHQ+TSAxMy0xOCBnL2RsOyBGIDEyLTE2IGcvZGw8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb25SYW5nZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9yZWZlcmVuY2VSYW5nZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjEwN2MyZGMwLTY3YTUtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSB4c2k6dHlwZT0iQ0UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjMzNzY1LTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJXQkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIj4gPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iI3Jlc3VsdDIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODEwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iUFEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxMi4zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSIxMCszL3VsIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcnByZXRhdGlvbkNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iTiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8bWV0aG9kQ29kZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YXJnZXRTaXRlQ29kZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aW1lLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMmE2MjAxNTQtOWQxMS00MzllLTkyYjMtNWQ5ODE1ZmY0ZGU4Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvblJhbmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IklWTF9QUSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjQuMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iMTArMy91bCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTAuOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iMTArMy91bCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVmZXJlbmNlUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMTA3YzJkYzAtNjdhNS0xMWRiLWJkMTMtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIHhzaTp0eXBlPSJDRSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjY1MTUtNyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBMVCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiPiA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjcmVzdWx0MyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMjA4MTAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJQUSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjEyMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iMTArMy91bCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJwcmV0YXRpb25Db2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IkwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGhvZENvZGUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFyZ2V0U2l0ZUNvZGUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGltZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjJhNjIwMTU1LTlkMTEtNDM5ZS05MmIzLTVkOTgxNWZmNGRlOCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2F1dGhvcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlZmVyZW5jZVJhbmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb25SYW5nZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJJVkxfUFEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxNTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9IjEwKzMvdWwiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjM1MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iMTArMy91bCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVmZXJlbmNlUmFuZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICA8L29yZ2FuaXplcj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICA8L2NvbXBvbmVudD4KICAgCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgIAogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi4xNyIvPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSIyOTc2Mi0yIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJTb2NpYWwgSGlzdG9yeSIvPgogICAgICAgICAgICAgICA8dGl0bGU+U09DSUFMIEhJU1RPUlk8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNvY2lhbCBIaXN0b3J5IEVsZW1lbnQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RWZmZWN0aXZlIERhdGVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InNvYzEiLz4gc21va2luZzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Gb3JtZXIgU21va2VyICgxIHBhY2sgcGVyIGRheTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDA1MDUwMSB0byAyMDExMDIyNzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0ic29jMiIvPiBzbW9raW5nPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkN1cnJlbnQgRXZlcnlkYXkgU21va2VyIDIgcGFja3MgcGVyIGRheTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4yMDExMDIyNyAtIHRvZGF5PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8IS0tIFNtb2tpbmcgc3RhdHVzIG9ic2VydmF0aW9uIHRlbXBsYXRlIC0tPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMi40Ljc4Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb249IjEyMzQ1Njc4OSIKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTkiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iQVNTRVJUSU9OIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjQiLz4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDA1MDUwMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaAogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAxMTAyMjciLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IkNEIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4NTE3MDA2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iRm9ybWVyIHNtb2tlciIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIvPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjM4Ii8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjliNTZjMjVkLTkxMDQtNDVlZS05ZmE0LWUwZjNhZmFhMDFjMSIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIyMzAwNTYwMDQiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJDaWdhcmV0dGUgc21va2luZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcmlnaW5hbFRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiNzb2MxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMjAwNTA1MDEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTEwMjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgIDwvZWZmZWN0aXZlVGltZT4KICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHhzaTp0eXBlPSJTVCI+MSBwYWNrIHBlciBkYXk8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjM4Ii8+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSI0NWVmYjYwNC03MDQ5LTRhMmUtYWQzMy1kMzg1NTZjOTYzNmMiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMjMwMDU2MDA0IgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2IgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iQ2lnYXJldHRlIHNtb2tpbmciPgogICAgICAgICAgICAgICAgICAgICAgICA8b3JpZ2luYWxUZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjc29jMiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L29yaWdpbmFsVGV4dD4KICAgICAgICAgICAgICAgICAgICAgPC9jb2RlPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTEwMjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoaWdoIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICA8L2VmZmVjdGl2ZVRpbWU+CiAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iQ0QiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9IjQ0OTg2ODAwMiIKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkN1cnJlbnQgRXZlcnlkYXkgU21va2VyIgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42Ljk2Ii8+CiAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAKICAgICAgICAgPGNvbXBvbmVudD4KICAgICAgICAgICAgPHNlY3Rpb24+CiAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjIuNC4xIi8+CiAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgIGNvZGU9Ijg3MTYtMyIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJWSVRBTCBTSUdOUyIvPgogICAgICAgICAgICAgICA8dGl0bGU+VklUQUwgU0lHTlM8L3RpdGxlPgogICAgICAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgICAgICAgPHRhYmxlCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcj0iMSIKICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduPSJyaWdodCI+RGF0ZSAvIFRpbWU6IDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Ob3YgMSwgMjAxMTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BdWd1c3QgNiwgMjAxMjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ249ImxlZnQiPkhlaWdodDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InZpdDEiPjY5IGluY2hlczwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEPSJ2aXQyIj42OSBpbmNoZXM8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ249ImxlZnQiPldlaWdodDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InZpdDMiPjE4OSBsYnM8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0idml0NCI+MTk0IGxiczwvY29udGVudD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbj0ibGVmdCI+Qmxvb2QgUHJlc3N1cmU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGNvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSUQ9InZpdDUiPjEzMi84NiBtbUhnPC9jb250ZW50PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Y29udGVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRD0idml0NiI+MTQ1Lzg4IG1tSGc8L2NvbnRlbnQ+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgPC90ZXh0PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b3JnYW5pemVyCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iQ0xVU1RFUiIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjYiLz4KICAgICAgICAgICAgICAgICAgICAgPCEtLSBWaXRhbCBzaWducyBvcmdhbml6ZXIgdGVtcGxhdGUgLS0+CiAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICByb290PSJjNmY4ODMyMC02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iNDY2ODAwMDUiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuOTYiCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJTTk9NRUQgLUNUIgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iVml0YWwgc2lnbnMiLz4KICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDExMTEwMSIvPgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVml0YWwgU2lnbiBPYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImM2Zjg4MzIxLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4MzAyLTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSGVpZ2h0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiN2aXQxIi8+PC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMDgxMTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iUFEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSI2OSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdD0iaW4iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVycHJldGF0aW9uQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJOIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjgzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVml0YWwgU2lnbiBPYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImM2Zjg4MzIxLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSIzMTQxLTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iUGF0aWVudCBCb2R5IFdlaWdodCAtIE1lYXN1cmVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiN2aXQ0Ii8+PC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTExMTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iUFEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxODkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9ImxicyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJwcmV0YXRpb25Db2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ik4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjciLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBWaXRhbCBTaWduIE9ic2VydmF0aW9uIHRlbXBsYXRlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iYzZmODgzMjEtNjdhZC0xMWRiLWJkMTMtMDgwMDIwMGM5YTY2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ijg0ODAtNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtTmFtZT0iTE9JTkMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJJbnRyYXZhc2N1bGFyIFN5c3RvbGljIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0PjxyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IiN2aXQ1Ii8+PC90ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTExMTAxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4c2k6dHlwZT0iUFEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIxMzIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9Im1tW0hnXSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aW50ZXJwcmV0YXRpb25Db2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9Ik4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuODMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vYnNlcnZhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgIDwvb3JnYW5pemVyPgogICAgICAgICAgICAgICA8L2VudHJ5PgogICAgICAgICAgICAgICA8ZW50cnkKICAgICAgICAgICAgICAgICAgdHlwZUNvZGU9IkRSSVYiPgogICAgICAgICAgICAgICAgICA8b3JnYW5pemVyCiAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iQ0xVU1RFUiIKICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjYiLz4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImM2Zjg4MzIwLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI0NjY4MDAwNSIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi45NiIKICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IlNOT01FRCAtQ1QiCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lPSJWaXRhbCBzaWducyIvPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IjIwMTIwODA2Ii8+CiAgICAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvYnNlcnZhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0NvZGU9Ik9CUyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjciLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSJjNmY4ODMyMS02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iODMwMi0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IkhlaWdodCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjdml0MiIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iNjkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ9ImluIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnRlcnByZXRhdGlvbkNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iTiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS44MyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L29ic2VydmF0aW9uPgogICAgICAgICAgICAgICAgICAgICA8L2NvbXBvbmVudD4KICAgICAgICAgICAgICAgICAgICAgPGNvbXBvbmVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPG9ic2VydmF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZT0iT0JTIgogICAgICAgICAgICAgICAgICAgICAgICAgICBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuNC4yNyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSJjNmY4ODMyMS02N2FkLTExZGItYmQxMy0wODAwMjAwYzlhNjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iMzE0MS05IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9IlBhdGllbnQgQm9keSBXZWlnaHQgLSBNZWFzdXJlZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjdml0NCIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTk0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJsYnMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVycHJldGF0aW9uQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJOIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjgzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8b2JzZXJ2YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDb2RlPSJPQlMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjI3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVml0YWwgU2lnbiBPYnNlcnZhdGlvbiB0ZW1wbGF0ZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q9ImM2Zjg4MzIxLTY3YWQtMTFkYi1iZDEzLTA4MDAyMDBjOWE2NiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSI4NDgwLTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSW50cmF2YXNjdWxhciBTeXN0b2xpYyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dD48cmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIjdml0NiIvPjwvdGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSIyMDEyMDgwNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHNpOnR5cGU9IlBRIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iMTQ1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0PSJtbVtIZ10iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGludGVycHJldGF0aW9uQ29kZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlPSJOIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My41LjgzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb2JzZXJ2YXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDwvY29tcG9uZW50PgogICAgICAgICAgICAgICAgICA8L29yZ2FuaXplcj4KICAgICAgICAgICAgICAgPC9lbnRyeT4KICAgICAgICAgICAgPC9zZWN0aW9uPgogICAgICAgICA8L2NvbXBvbmVudD4KICAKICAgIAogICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQKICAgICAgICAgICAgICAgICAgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjIuMi40MSIvPgogICAgICAgICAgICAgICA8Y29kZQogICAgICAgICAgICAgICAgICBjb2RlPSI4NjUzLTgiCiAgICAgICAgICAgICAgICAgIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIKICAgICAgICAgICAgICAgICAgY29kZVN5c3RlbU5hbWU9IkxPSU5DIgogICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT0iSE9TUElUQUwgRElTQ0hBUkdFIElOU1RSVUNUSU9OUyIvPgogICAgICAgICAgICAgICA8dGl0bGU+SE9TUElUQUwgRElTQ0hBUkdFIElOU1RSVUNUSU9OUzwvdGl0bGU+CiAgICAgICAgICAgICAgIDx0ZXh0PgogICAgICAgICAgICAgICAgICA8Y29udGVudD4KICAgICAgICAgICAgICAgICAgICAgTXMuIEpvbmVzLCB5b3UgaGF2ZSBiZWVuIHNlZW4gYnkgRHIuIEhlbnJ5IFNldmVuIGF0IExvY2FsIENvbW11bml0eSBIb3NwaXRhbCBmcm9tIEF1Z3VzdCA4dGggdW50aWwgQXVndXN0IDEzdGggMjAxMi4gWW91IGFyZSBjdXJyZW50bHkgYmVpbmcgZGlzY2hhcmdlZCBmcm9tIExvY2FsIENvbW11bml0eSBIb3NwaXRhbC4gRHIuIFNldmVuIGhhcyBwcm92aWRlZCB0aGUgZm9sbG93aW5nIGluc3RydWN0aW9ucyB0byB5b3UgYXQgdGhpcyB0aW1lOyBzaG91bGQgeW91IGhhdmUgYW55IHF1ZXN0aW9ucyBwbGVhc2UgY29udGFjdCBhIG1lbWJlciBvZiB5b3VyIGhlYWx0aGNhcmUgdGVhbSBwcmlvciB0byBkaXNjaGFyZ2UuIElmIHlvdSBoYXZlIGxlZnQgdGhlIGhvc3BpdGFsIGFuZCBoYXZlIHF1ZXN0aW9ucywgcGxlYXNlIGNvbnRhY3QgRHIuIFNldmVuIGF0IDU1NS01NTUtMTAwMi4gCiAgICAgICAgICAgICAgICAgICAgIEluc3RydWN0aW9uczoKICAgICAgICAgICAgICAgICAgPC9jb250ZW50PgogICAgICAgICAgICAgICAgICA8bGlzdAogICAgICAgICAgICAgICAgICAgICBsaXN0VHlwZT0ib3JkZXJlZCI+CiAgICAgICAgICAgICAgICAgICAgIDxpdGVtPlRha2UgYWxsIG1lZGljYXRpb25zIGFzIHByZXNjcmliZWQuPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICA8aXRlbT5QbGVhc2UgbW9uaXRvciB5b3VyIHBlYWsgZmxvd3MuIElmIHlvdXIgcGVhayBmbG93cyBkcm9wIHRvIDUwJSBvZiBub3JtYWwsIGNhbGwgbXkgb2ZmaWNlIGltbWVkaWF0ZWx5IG9yIHJldHVybiB0byB0aGUgRW1lcmdlbmN5IFJvb20uPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICA8aXRlbT5JZiB5b3UgZXhwZXJpZW5jZSBhbnkgb2YgdGhlIGZvbGxvd2luZyBzeW1wdG9tcywgY2FsbCBteSBvZmZpY2UgaW1tZWRpYXRlbHkgb3IgcmV0dXJuIHRvIHRoZSBFbWVyZ2VuY3kgUm9vbToKICAgICAgICAgICAgICAgICAgICAgICAgPGxpc3QgbGlzdFR5cGU9Im9yZGVyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT5TaG9ydG5lc3Mgb2YgQnJlYXRoPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT5EaXp6aW5lc3Mgb3IgTGlnaHQtaGVhZGVkbmVzczwvaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGl0ZW0+RmV2ZXIsIGNoaWxscywgb3IgZGlmZnVzZSBib2R5IGFjaGVzPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT5QYWluIG9yIHJlZG5lc3MgYXQgdGhlIHNpdGUgb2YgYW55IHByZXZpb3VzIGludHJhdmVub3VzIGNhdGhldGVyPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aXRlbT5Bbnkgb3RoZXIgdW51c3VhbCBwcm9ibGVtPC9pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpc3Q+CiAgICAgICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICAgICAgPC9saXN0PgogICAgICAgICAgICAgICA8L3RleHQ+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgCiAgICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgICAgICA8dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi4yLjQ1Ii8+CiAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjY5NzMwLTAiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIiBkaXNwbGF5TmFtZT0iSW5zdHJ1Y3Rpb25zIi8+CiAgICAgICAgICAgICAgIDx0aXRsZT5JbnN0cnVjdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICA8ZW50cnk+CiAgICAgICAgICAgICAgICAgIDxhY3QgY2xhc3NDb2RlPSJBQ1QiIG1vb2RDb2RlPSJJTlQiPgogICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMi40LjIwIi8+CiAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjQyMzU2NDAwNiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMTEuMjAuOS4zNCIgY29kZVN5c3RlbU5hbWU9InBhdGllbnRFZHVjYXRpb25UeXBlIiBkaXNwbGF5TmFtZT0iUHJvdmlkZXJJbnN0cnVjdGlvbnMiLz4KICAgICAgICAgICAgICAgICAgICAgPHRleHQ+ZGlldCBhbmQgZXhlcmNpc2UgY291bnNlbGluZyBwcm92aWRlZCBkdXJpbmcgdmlzaXQ8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93IHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgICAgIDxlbnRyeT4KICAgICAgICAgICAgICAgICAgPGFjdCBjbGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IklOVCI+CiAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIyLjQuMjAiLz4KICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iNDIzNTY0MDA2IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4xMS4yMC45LjM0IiBjb2RlU3lzdGVtTmFtZT0icGF0aWVudEVkdWNhdGlvblR5cGUiIGRpc3BsYXlOYW1lPSJQcm92aWRlckluc3RydWN0aW9ucyIvPgogICAgICAgICAgICAgICAgICAgICA8dGV4dD5yZXNvdXJjZXMgYW5kIGluc3RydWN0aW9ucyBwcm92aWRlZCBkdXJpbmcgdmlzaXQ8L3RleHQ+CiAgICAgICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8bG93IHZhbHVlPSIyMDEyMDgxMyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aGlnaCB2YWx1ZT0iMjAxMjA4MTMiLz4KICAgICAgICAgICAgICAgICAgICAgPC9lZmZlY3RpdmVUaW1lPgogICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAgICAgICAgPC9hY3Q+CiAgICAgICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICAgIDwvc2VjdGlvbj4KICAgICAgICAgPC9jb21wb25lbnQ+CiAgCiAgICAgIDwvc3RydWN0dXJlZEJvZHk+CiAgIDwvY29tcG9uZW50Pgo8L0NsaW5pY2FsRG9jdW1lbnQ+Cg==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.1">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.1">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1707375170364</time>
            <timezone>Asia/Calcutta</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.4.1">
            <id>013dbefe-affe-4455-b051-b5738b3e153e</id>
            <name>Vista</name>
            <revision>1</revision>
            <lastModified>
              <time>1706347538264</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>dbdfd779-7af3-4640-82bc-870aaa91c85f</string>
              <string>0b5d317f-df06-4616-aad9-c1229d7b99d9</string>
              <string>6ffb9a34-a8e8-43d4-a80d-d3aa5706c0a4</string>
              <string>6b2678d6-6104-44c5-bcb8-04b128dcf63f</string>
              <string>80dda1b6-67b7-4f1b-976e-76e7817dc22d</string>
              <string>0d34ad6d-6050-48ed-ba89-cd26a7065ebd</string>
              <string>f7671159-9b2d-4ddd-80b2-a8e3b3edebc8</string>
              <string>e2e7915e-21e2-46d1-b9ac-53c7550cb8c8</string>
              <string>29dea6dc-39c3-4189-a4f1-e45a7f928904</string>
              <string>2025a766-9ae5-456e-87e3-ae4369a4b8ea</string>
              <string>23a266bd-9ab4-4830-899e-2bc163582022</string>
              <string>7b77b5ac-aecf-4236-87fc-d6d58c51d4ad</string>
              <string>edf8eedf-c4cd-4997-8c84-ab5bf22a5f83</string>
              <string>e5fe40df-762c-4a99-96ac-a766c372dbb2</string>
              <string>65812908-9544-4095-b393-ad53972a9f43</string>
              <string>d8ef0274-f75a-4109-b821-e16bd6909caf</string>
              <string>41f48131-3953-4367-939f-4b71f1864fb8</string>
              <string>3e5c3f75-ac03-4ffe-85bb-a998616a6880</string>
              <string>4bfa82c8-a74a-47d7-bc11-d92254dea086</string>
              <string>a5f45e04-c3f8-40a7-9266-ef3995821636</string>
              <string>0d1c7b88-12a5-48bc-ae6b-49623c86ed61</string>
              <string>1b5e6d02-0155-406d-a8ca-6189c3840bc6</string>
              <string>2daa4f04-5759-4087-8535-d240da68cc27</string>
              <string>36b50d56-1eea-45d6-a171-fa5bd60cd323</string>
              <string>42113ba2-ca89-423c-b2cc-4c36c4e4ca71</string>
              <string>d5035a6b-1d5e-4e3a-84e3-72b8b5bc5927</string>
              <string>8e6f7d53-f73c-4509-8734-5409dbbaefd9</string>
              <string>108ee313-d32b-4dc9-badd-af53ef99557c</string>
              <string>c7e17ee8-18b5-427b-abfa-155302728f52</string>
              <string>ee6e5624-6277-42db-af85-8c6ca3dda7ed</string>
              <string>9eb0b6d9-a720-46e1-9af3-2d518ff2fbcc</string>
              <string>e1f2365d-9182-45c5-bb20-a3077eeb7a4e</string>
              <string>7fff47a2-8f92-49e8-8838-9856a98972b5</string>
              <string>a577bab2-a561-4471-be71-eaada751fa60</string>
              <string>cfdbddc1-541f-4169-a42b-2a42cfc56b1f</string>
              <string>c8e1f118-cd7a-4a0f-9381-bd8cae8d63cd</string>
              <string>42654e8d-c2c0-4e9c-8fa9-766985f9d09e</string>
              <string>a5e3a071-18c3-464a-b38c-70a73da348c6</string>
              <string>6ff7dfad-66b5-4b5f-8c10-8759b7b723a0</string>
              <string>4c36291d-2328-46bb-a27d-83ba68a7c560</string>
              <string>caff50f1-1fd5-4317-9771-6bbe109501d9</string>
              <string>11766ff7-7311-4957-a6fa-f6861cf85a27</string>
              <string>34ce9dd7-1ee6-46f7-ad5e-44d3a8762988</string>
              <string>bfcab16f-e8d6-4b4d-8104-9b3e25074619</string>
              <string>c5002bdf-a52b-4ad9-a59d-00eb9101de64</string>
              <string>fc661e67-6cb7-4930-8203-5eff718ea9fc</string>
              <string>a3b6d653-1e6a-4769-97ac-58cdfa6528ad</string>
              <string>0b3420f7-862e-4814-8b20-b8846074197d</string>
              <string>db407c50-7a7d-4625-b5fe-f53e0b211a7f</string>
              <string>88cca6c3-f9ff-4004-8151-324b9cab157d</string>
              <string>b4ef141e-2176-4019-b1e4-2766893ea46a</string>
              <string>324391f5-62c1-4bd9-b793-53fdc8f52afe</string>
              <string>9584a21c-8f1c-4870-b859-478847e66c3e</string>
              <string>1e7ba63a-c16d-4f05-ad0c-888b44ed88cc</string>
              <string>cf7c121e-2d8b-40ad-b3e9-9924da031cb7</string>
              <string>14dcfa50-4401-4c9c-8332-1a0a14feaf73</string>
              <string>548a91df-36c9-4d30-b3bc-5b142e189cf1</string>
              <string>f20d59e4-c39c-4902-a2c1-51a9850eb4eb</string>
              <string>49c3e359-df29-42b6-b194-c21a1795df30</string>
              <string>b74a2a30-8216-4ef4-ab25-6ee9cda18ab6</string>
              <string>f7ad801d-f313-4cf2-8a56-d1b0ec783b90</string>
              <string>f129c585-12f7-449f-a880-8479fe2c3bdb</string>
              <string>39efe190-6502-4553-a7b0-9c0d70973db6</string>
              <string>b41eede2-6d2b-4736-9b65-5557cdc20d17</string>
              <string>54d3181e-320d-4803-918f-9c50325fa53b</string>
              <string>8fbf8335-d1fe-4637-8447-cb722417034f</string>
              <string>db46f455-21f4-487a-82b7-1b9f7de1b5c0</string>
              <string>a9e62e9b-8f96-4802-a426-42ea12c70a43</string>
              <string>c55bf6ab-b068-4b65-89ea-5d9390e2637c</string>
              <string>e317c376-37e5-4ac1-8153-3740d30d2d4d</string>
              <string>17388c82-2a95-40b6-b5fe-de6b2629e16e</string>
              <string>c6d6ed45-0f33-4f36-894c-652b8adfe12a</string>
              <string>9ba5a5d5-eca6-431c-b59e-33642cbf422e</string>
              <string>9ff0e5a3-074c-4e66-b9b3-8022061df0a6</string>
              <string>223a1e8f-64b7-4570-b071-af4bdd6f828b</string>
              <string>e5a7b650-6769-481a-8a57-a85aef056edd</string>
              <string>bc74ca28-2d7b-4377-8aa2-b988e07f44fa</string>
              <string>934237c5-4c97-4b29-8483-4c375f8e385f</string>
              <string>820de6e4-a29f-45d9-a7b0-1048416ac7fc</string>
              <string>4b7c794b-9b3e-42a0-8297-c7983709ef98</string>
              <string>481acd74-ef4b-4d58-a648-b23d558e990b</string>
              <string>e93ce26d-6b83-46eb-961c-dcb8dc32f6d0</string>
              <string>7a715597-0f0d-488e-87dd-8ca84d68c452</string>
              <string>baaeaa56-82f3-40c6-a0fe-9617350b2396</string>
              <string>a3f2f3f7-c04b-4cdd-bc9e-174eb37192b7</string>
              <string>500eb5b5-05d8-44c2-9036-1f7915411296</string>
              <string>bf32f6d9-7bd9-4cbd-915b-73f3f5b56ced</string>
              <string>398d94f0-2316-44cb-8005-54b94610679a</string>
              <string>4fea13f6-cb1c-456e-ad86-8d58ed9deeb5</string>
              <string>ad5682a4-01f3-47c5-a4e8-3ad1b7400d74</string>
              <string>c7e662a0-1cba-490e-8173-ddeba29708e9</string>
              <string>9abec776-76c8-4ebb-a0ac-d1138fa783cf</string>
              <string>b2ca791f-4626-4b8b-aa38-4acb52de468d</string>
              <string>9fd67798-2aec-4d13-8d24-d2ef6980bc22</string>
              <string>5492cd8d-4f88-42be-8b5c-6fab1cae38ca</string>
              <string>bc4621fd-1fab-4600-922e-24554b6df444</string>
              <string>72ad552a-4e12-4e32-93b0-a4856c651897</string>
              <string>6296af03-ee25-429c-95cc-08c8cde19978</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f72e3ece-3452-4f49-ac40-c2feedcc5482</string>
              <string>52978319-dd01-438b-925f-9fea38881afa</string>
              <string>1b5244db-bf55-4fc0-92da-aeae0886e5ec</string>
              <string>ea7a5549-2b3b-455f-9ca8-d646908c3e35</string>
              <string>c3724954-d696-4aa2-bb04-c603db781d8c</string>
              <string>2237dae6-4ad2-4041-9035-52f0347670ea</string>
              <string>51e3e06a-1050-4d89-a922-1fd60edb3061</string>
              <string>3c9514ba-f01c-4bd7-b066-966e3d29eb5b</string>
              <string>8cf2c6ce-afea-45d4-99db-77a0510ea804</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.4.1">
                <id>85be0aa7-d77b-476c-93a6-45d85d554b3c</id>
                <name>ACK Processing</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538956</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getMappedErrorDescription(hl7FieldCode) {
    // hl7FieldCode = msg[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString()
    var returnText = &apos;&apos;;

    fieldCode = hl7FieldCode.replace(&quot; is invalid.&quot;, &quot;&quot;);
    fieldCode = fieldCode.replace(&quot; is blank.&quot;, &quot;&quot;);

    var fieldDescription = com.mirth.connect.model.hl7v2.Component.getSegmentorCompositeFieldDescription(fieldCode, false);

    if (fieldDescription &amp;&amp; fieldDescription != &quot;&quot;) {

        channelMap.put(&apos;fieldDescription&apos;, fieldDescription.toString());
        returnText = &quot;Data for &quot; + fieldDescription + &quot; is blank or invalid&quot;;
        /*
        var Missing_Seg = com.mirth.connect.model.hl7v2.Component.getSegmentDescription(arr[0]);
        channelMap.put(&apos;Missing_Seg&apos;, Missing_Seg.toString());
        */
    } else {
        returnText = hl7FieldCode;
    }
    return returnText;
}



/*
function createAckForError(coreyId, error, action, patientId) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.Code || &quot;1&quot;;
	respJson.ErrorDescription = error.Description;
	respJson.Data = [];
	channelMap.put(&apos;ErrorACK&apos;, JSON.stringify(respJson));
	
//HTTPS Request Object Variables
    var coreySendCounter = 0;
    var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
    var baseCoreyURL = globalMap.get(&apos;RHJVAMC-CoreyBaseURL&apos;);
    
    var coreyJson = JSON.stringify(respJson);
    // logger.debug(coreyJson);  
    coreyJson = UpdateClientToCoreyTimeZone(JSON.parse(coreyJson));
    coreyJson = JSON.stringify(coreyJson);
    //logger.debug(coreyJson); 

    var appointmentJson = &quot;[&quot; + coreyJson + &quot;]&quot;;
    channelMap.put(&quot;coreyJson&quot;,coreyJson);    
    
    function sendCoreyResponse (token) { // Sending Corey server response using token and API
        var ServerURL  = baseCoreyURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + token;
        channelMap.put(&apos;CoreyServerURL&apos;,ServerURL);
        var encrypt = encryptAES(appointmentJson, token);
        var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
        var json = utilityObject.cmnGetJSON(ServerResponse);
        var decrypt = decryptAES(json,token);
        var serverJson =  new java.lang.String(decrypt, &apos;UTF-8&apos;);
        channelMap.put(&apos;CoreyServerResponse&apos;,serverJson);
        var jsonObj = JSON.parse(serverJson);
        var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
        return code;
    }
     
    var token = globalMap.get(&apos;RHJVAMC-authToken&apos;); // get Auth token
    channelMap.put(&apos;token&apos;,token);
    
    while (coreySendCounter &lt; 5){    
        channelMap.put(&apos;coreySendCounter&apos;+coreySendCounter,coreySendCounter);
        var coreyServerResponse = sendCoreyResponse(token);
        if (coreyServerResponse == 1000) { //if token is invalid, generate new token.
            token = router.routeMessage(&apos;VHACHY-Refresh Corey Server Token&apos;, &apos;{&quot;test&quot;:&quot;test&quot;}&apos;);
            token = token.getMessage();                    
        } else {
            break;
        }
        coreySendCounter++;
    }

}

*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>f69ec206-4d06-4594-9212-de60a77997fd</id>
                <name>AES Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538861</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function encryptAES(stringToBeEncrpted, key) {
	var object = Packages.com.vista.client.CMNAES;
	var encryptedSting = object.cmnEncrypt(stringToBeEncrpted,key);
	return encryptedSting;
}

function decryptAES(stringToBeDecrpted, key) {
	channelMap.put(&apos;stringToBeDecrpted&apos;, stringToBeDecrpted);
	channelMap.put(&apos;key&apos;, key);
	var object = Packages.com.vista.client.CMNAES;
	var decryptedSting = object.cmnDecrypt(stringToBeDecrpted, key);
	return decryptedSting;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>76330ba8-7747-4c9a-85ee-d1514d37532a</id>
                <name>Allergy Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538614</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Mapped allergy name and IEN.
*/
function GetAllergyForVistA(strCoreyCode) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.num == strCoreyCode) {
	          return allergy;
	      }
	  }
	 // return null;
}

function GetAllergyForCorey(ien, file) {

	var allergyMap = globalChannelMap.get(&apos;allergyMap&apos;);
	if(allergyMap == null){	
		allergyMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AllergyToIEN.JSON&quot;));
		logger.debug(&apos;Allergy Map loaded successfully&apos;);
		globalChannelMap.put(&apos;allergyMap&apos;, allergyMap);
	}	
	 if(allergyMap == null){
	 	logger.error(&quot;Allergy Mapping is not available&quot;);
	 }
	for (var allergyKey in allergyMap) {
	      var allData=&quot;&quot;
	      var allergy = allergyMap[allergyKey];
	      if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; allergy.File == file) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }else if (allergy &amp;&amp; allergy.IEN == ien &amp;&amp; file == &quot;&quot;) {
	          // return allergy.CoreyCode;
	          //return allergy.num;
	          channelMap.put(&apos;allergydata&apos;,allergy.CoreyCode);
	           allData = allergy.CoreyCode;
	          return allData;
	      }
	  }
	  return &quot;&quot;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>eb4c412d-a14e-436a-9646-38ddf14c65e9</id>
                <name>AppointmentLocation</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538444</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getapplocmap() {
    var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
}*/

function GetAPPLocationForVistA(coreyCode) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
	
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetAPPLocationForCorey(vistaIEN) {
	var APPLocationMap = globalChannelMap.get(&apos;APPLocationMap&apos;);
    if (APPLocationMap == null) { 
        APPLocationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/AppointmentLocation.json&quot;));
        logger.debug(&apos;APPLocation Map loaded successfully&apos;);
        globalChannelMap.put(&apos;APPLocationMap&apos;, APPLocationMap);
    }
    if (APPLocationMap == null) {
        logger.error(&quot;APPLocation Mapping is not available&quot;);
        return null;
    }
    for (var reasonKey in APPLocationMap) {
        var reason = APPLocationMap[reasonKey];
        if (reason &amp;&amp; parseInt(&apos;&apos;+reason.IEN )== parseInt(&apos;&apos;+ vistaIEN)) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>782a075b-4cdb-462a-aaac-9f88600ae2c7</id>
                <name>CancellationReason Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539250</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function getschcancelmap() {
    var SCHCancellationReasonMap = globalChannelMap.get(&apos;SCHCancellationReasonMap&apos;);
    if (SCHCancellationReasonMap == null) {
        SCHCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SCH_CancellationReasonMap.json&quot;));
        logger.debug(&apos;SCHCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;SCHCancellationReasonMap&apos;, SCHCancellationReasonMap);
    }
    if (SCHCancellationReasonMap == null) {
        logger.error(&quot;SCHCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetSCHCancellationReasonForVistA(coreyCode) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        
        if (reason &amp;&amp; parseInt(&apos;&apos;+ reason.EHRFieldId) == parseInt(&apos;&apos;+ coreyCode)) {
            return new String(reason.IEN);
        }
    }
    return &apos;&apos;; // Default Value
}

function GetSCHCancellationReasonForCorey(vistaIEN) {
	getschcancelmap();
    for (var reasonKey in SCHCancellationReasonMap) {
        var reason = SCHCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}

function getapptcancelmap() {
    var ApptCancellationReasonMap = globalChannelMap.get(&apos;ApptCancellationReasonMap&apos;);
    if (ApptCancellationReasonMap == null) {
        ApptCancellationReasonMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Appt_CancellationReasonMap.json&quot;));
        logger.debug(&apos;ApptCancellationReason Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;ApptCancellationReasonMap&apos;, ApptCancellationReasonMap);
    }
    if (ApptCancellationReasonMap == null) {
        logger.error(&quot;ApptCancellationReason Mapping is not available&quot;);
        return null;
    }
}
function GetApptCancellationReasonForVistA(coreyCode) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}

function GetApptCancellationReasonForCorey(vistaIEN) {
	getapptcancelmap();
    for (var reasonKey in ApptCancellationReasonMap) {
        var reason = ApptCancellationReasonMap[reasonKey];
        if (reason &amp;&amp; reason.IEN == vistaIEN) {
            return reason.EHRFieldId;
        }
    }
    return 0; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ae921035-e6cb-4a77-846d-1016b72134b4</id>
                <name>CPT Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538330</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get CPT Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetCPTForVistA(coreyCode) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.CPT == coreyCode) {
        	  var IEN=(CPT.IEN == undefined? &quot;&quot; : CPT.IEN)
            return IEN;
        }
    }
}

function GetCPTForCorey(vistaIEN) {
    var CPTMap = globalChannelMap.get(&apos;CPTMap&apos;);
    if (CPTMap == null) {
        CPTMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/CPTMapping.json&quot;));
        logger.debug(&apos;CPT Map loaded successfully&apos;);
        globalChannelMap.put(&apos;CPTMap&apos;, CPTMap);
    }
    if (CPTMap == null) {
        logger.error(&quot;CPT Mapping is not available&quot;);
        return null;
    }
    for (var CPTKey in CPTMap) {
        var CPT = CPTMap[CPTKey];
        if (CPT &amp;&amp; CPT.IEN == vistaIEN) {
        	 var  CPT=(CPT.CPT == undefined? &quot;&quot; : CPT.CPT)
            return CPT;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2d1740dc-1648-423f-9f74-3fcb0a5d3571</id>
                <name>Database Functions -ScheduleSignaling</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538479</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*===========================================================================================
                            DataBase connection 
===========================================================================================*/

//Database Connection Variables
/*
var DBDriverName = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
var DBDSNName = &quot;jdbc:jtds:sqlserver://localhost:1433/CoreyMapping&quot;;
var DBUserID = &quot;sa&quot;;
var DBPassword = &quot;dev@123&quot;;
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

var DBCon = &quot;null&quot;;

//function to make Database Connection
function OpenDBCon() {
    try {
        return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return false;
    }
}

/**
    CloseDBCon

    @param {String} DBCon
*/
function CloseDBCon() {
    try {
        DBCon.close();
    } catch (err) {
        logger.error(&quot;Exception In Closing Database - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    }
}

/**
    executeSelectQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeSelectQuery(SQLString) { //select query execution for fetching the data from DB
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeCachedQuery(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

/**
    executeInsertQuery

    @param {String} SQLString
    @param {String} DBConn
    @return ResultSet
*/
function executeInsertQuery(SQLString) { //Insert query execution for fetching the data from DB
	channelMap.put(&quot;SQLString1&quot;,SQLString)
    try {
        DBConn = OpenDBCon();
        var ResultSet = DBConn.executeUpdate(SQLString);
    } catch (err) {
        logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
    } finally {
        if (DBConn) {
            CloseDBCon();
        }
    }
    return ResultSet;
}

function executeScalar(sql) {
    if (sql &amp;&amp; sql != &apos;&apos;) {
        var result = null;
        var _conn = OpenDBCon();
        var response = _conn.executeCachedQuery(sql);
        if (response.next()) {
            result = &apos;&apos; + response.getString(1);
        }
        response.close();
        return result;
    }
}

//Function for Corey Patient ID Generation  with Prefix CPI*** -- Not being used
function generateCoreyPatientID() {
    SQLString = &quot;SELECT TOP 1 [CoreyPatientID] AS CoreyPatientID FROM CMNPatientMapping ORDER BY [CoreyPatientID] DESC&quot;;
    var unique = executeScalar(SQLString);
    /*while (resultSet.next()) {
        var unique = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    }*/
    channelMap.put(&quot;uniqueCoreyPatientID&quot;, unique);
    var uID = unique.split(&quot;CPI&quot;);
    var nonZero = parseInt(uID[1]);
    var nonZero = nonZero + 1;
    var newUID = &quot;CPI&quot; + leftPad(nonZero, 7);
    return newUID;
}

//Get corey Patient id from DB
/* FROM QA
function getPatientID(patientID, Message_Control_Id) {
    var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping as a join [CMNApptMapping] as b on  a.ID=b.FK_PatientID where [MsgControlID] = &apos;&quot; + control + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(&quot;SelectSql&quot;, SQLString);
    while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
	if(!coreyPatId){
		var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos; AND [EXTSystem] = &apos;Vista&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
 
	    var resultSet = executeSelectQuery(SQLString);
	    channelMap.put(&quot;SelectSql&quot;, SQLString);
	    while (resultSet.next()) {
	        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
	        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
	    }
	}
    return coreyPatId;
}
*/
function getPatientID(patientID, Message_Control_Id) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }
    /*while (resultSet.next()) {
        var coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
    }*/
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID&quot;, SQLString);
        coreyPatId = executeScalar(SQLString);
        channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        /*while (resultSet.next()) {
            var coreyPatId = resultSet.getString(&quot;Patient_Id&quot;);
            channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
        }*/
    }

    return coreyPatId;
}

//Get corey Appointment id from DB using vista Case id
function getCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}


function getslcformCoreyAppID(vistACaseID,controlid) {

	controlID=controlID.split(&quot;--&quot;);
	controlID=controlID[0];
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND [MsgControlID] = &apos;&quot; + controlid + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getconsentformCoreyAppID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNNursingFormsMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}
//Get corey Appointment id from DB using vista Case id
/*function getCoreyApID(vistACaseID) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}*/

function getEncID(vistACaseID) {
    SQLString = &quot;SELECT [Consult_ID] FROM [dbo].[CMNEncounterApptMapping] WHERE [VistaApptID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Consult_ID = resultSet.getString(&quot;Consult_ID&quot;);
        channelMap.put(&quot;Consult_ID&quot;, Consult_ID);
    }
    logger.info(SQLString);
    return Consult_ID;
}
function getLabOrder(getLabOrder) {
    //SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot;;
    SQLString = &quot;SELECT cast([CoreyApptID] AS varchar(25)) CoreyApptID,OrderUniqueId FROM [dbo].[CMNOrderAppointment] WHERE [VistaCaseID] = &apos;&quot; + getLabOrder + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    logger.info(&quot;test&quot; - resultSet);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;CoreyApptID&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;CoreyApptID&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}

function getconsultOrder(msgControlId) {
    SQLString = &quot;SELECT cast([Corey_id] AS varchar(25)) Corey_id,OrderUniqueId FROM [dbo].[CMNNConsultMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    logger.info(SQLString);
    channelMap.put(&quot;SELECTSQLPonnu&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var schId = resultSet.getString(&quot;Corey_id&quot;);
        var orderUniqueid = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;Corey_id&quot;, schId);
        channelMap.put(&quot;schId&quot;, orderUniqueid);
    }
    return [schId, orderUniqueid];
}



function getforCoreyConsultID(vistACaseID) {
   SQLString = &quot;SELECT  Convert(Nvarchar(30),[Corey_ID])[Corey_ID] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    var CoreyConsultID=&apos;0000&apos;;
    while (resultSet.next()) {
          CoreyConsultID = resultSet.getString(&quot;Corey_ID&quot;);
        channelMap.put(&quot;CoreyConsultID&quot;, CoreyConsultID);
        logger.info(CoreyConsultID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}

function getforscheduleID(vistACaseID) {
    SQLString = &quot;SELECT [ParentAppID] FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var ParentAppID = resultSet.getString(&quot;ParentAppID&quot;);
        channelMap.put(&quot;ParentAppID&quot;, ParentAppID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return ParentAppID;
}

//Start ConsultList change
function getforCoreyConsultUniqueOrderID(vistACaseID) {
    SQLString = &quot;SELECT  Convert(Nvarchar(30),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [Vista_id] = &apos;&quot; + vistACaseID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var CoreyConsultID = resultSet.getString(&quot;OrderUniqueId&quot;);
        channelMap.put(&quot;OrderUniqueId&quot;, CoreyConsultID);
        //logger.info(ParentAppID);
        //logger.info(SQLString);
    }
    return CoreyConsultID;
}
//End ConsultList change
//Get corey Appointment id from DB using message control id
function getCoreyAppIDFromMsgControlId(msgControlId) {
    SQLString = &quot;SELECT [CoreyApptID] FROM [dbo].[CMNApptMapping] WHERE [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreyApptID = resultSet.getString(&quot;COREYAPPTID&quot;);
        channelMap.put(&quot;COREYAPPTID&quot;, coreyApptID);
    }
    return coreyApptID;
}

function getviewName(msgControlId) {
    SQLString = &quot;SELECT [View_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var viewName = resultSet.getString(&quot;VIEW_NAME&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, viewName);
    }
    return viewName;
}

function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}

function getCoreySpecID(vistASpecID) {
    SQLString = &quot;SELECT [Corey_SpecialtyId],[Corey_SubSpecialtyId] FROM [dbo].[SpecialtyMapping] WHERE [Ext_SubSpecialtyIEN] = &apos;&quot; + vistASpecID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var coreySpecID = resultSet.getString(&quot;Corey_SpecialtyId&quot;);
        var coreysubSpecID = resultSet.getString(&quot;Corey_SubSpecialtyId&quot;);
        channelMap.put(&quot;COREYSPECID&quot;, coreySpecID);
        channelMap.put(&quot;COREYSUBSPECID&quot;, coreysubSpecID);
    }
    return [coreySpecID, coreysubSpecID];
}

function getOrganizationName(control, uselike) {
    if (uselike) {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] LIKE &apos;%&quot; + control + &quot;%&apos;;&quot;;
    } else {
        SQLString = &quot;SELECT [Org_Name] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + control + &quot;&apos;;&quot;;
    }

    channelMap.put(&quot;getOrganizationNameSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var Org_Name = resultSet.getString(&quot;Org_Name&quot;);
    }
    return Org_Name;
}

function deleteFailedAppointmentMapping(msgControlId) {
    var SQLString = &quot;DELETE FROM [dbo].[CMNApptMapping] WHERE [VistaCaseID] IS NULL AND [MsgControlID] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;deleteFailedAppointmentMapping&quot;, SQLString);
    var resultSet = executeInsertQuery(SQLString);
}

//function getOrderIdCancel(coreyApptId) { // Fetching Vista case from CMNApptMapping Table using Corey App. ID
//    SQLString = &quot;SELECT Convert(Nvarchar(100),[OrderUniqueId])[OrderUniqueId] FROM [dbo].[CMNNConsultMapping] WHERE [vista_id] = &apos;&quot; + OrderUniqueId + &quot;&apos; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
//    logger.info(SQLString);
//    var NursingvistaCaseID = executeScalar(SQLString);
//    channelMap.put(&quot;NursingvistaCaseID&quot;, NursingvistaCaseID);
//    return NursingvistaCaseID;
//}

function getCoreyPatientDataRecordID(sCoreyPtId, sVistAEntityId, sViewName) {
    var sCoreyEntityID = &quot;0&quot;;
    var SQLString = &quot;SELECT CoreyEntityID FROM CMN_PatientData_Mapping cpdm &quot; +
        &quot;JOIN CMNPatientMapping cpm on cpm.ID = cpdm.FK_PatientID &quot; +
        &quot;WHERE cpm.CoreyPatientID = &apos;&quot; + sCoreyPtId +
        &quot;&apos; AND cpm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos; AND cpdm.ViewName = &apos;&quot; + sViewName +
        &quot;&apos; AND cpdm.VistAEntityId = &apos;&quot; + sVistAEntityId +
        &quot;&apos; AND cpdm.Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) +
        &quot;&apos;&quot;;
    // channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    channelMap.put(sViewName + &apos; &apos; + sCoreyPtId, resultSet);
    while (resultSet.next()) {
        sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
    }
    return sCoreyEntityID;
}
function formatDate(date) {
	date = date.toString();
	if (date.length == 12){
		date = date.toString();
		
	} else {
		var dateStringFormat = &quot;MMM dd,yyyy&quot;
	     var outpattern = outpattern = &quot;YYYYMMdd&quot;;
	     var d = DateUtil.convertDate(dateStringFormat, outpattern, date);
	     var date= d + &apos;0000&apos; ;
	}
	return date;
 }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1b8ca178-79c0-4be6-9f24-372ee8c9e358</id>
                <name>Date Format Conversion</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538823</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function Getcdate(dateStr) {  //AUG 12, 2022@22:26 convert to YYYYMMDDHHMMSS
const dateObj = new Date(dateStr.replace(&apos;@&apos;, &apos; &apos;));

const year = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;);
const month = (dateObj.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
const day = dateObj.getDate().toString().padStart(2, &apos;0&apos;);
const hours = dateObj.getHours().toString().padStart(2, &apos;0&apos;);
const minutes = dateObj.getMinutes().toString().padStart(2, &apos;0&apos;);
const seconds = dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);

const formattedDate = year + month + day + hours + minutes + seconds;
return formattedDate;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>0b088363-cc92-4fbc-8abb-a83314a3e264</id>
                <name>DisplayOrderMapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538411</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getDisplayOrderMapping(orgName,displayOrder) {
	
	var DisplayOrder = globalChannelMap.get(&apos;DisplayOrder&apos;);
    if (DisplayOrder == null) {
       DisplayOrder = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisplayOrderMapping.json&quot;));
        logger.debug(&apos;DisplayOrder Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DisplayOrder&apos;, DisplayOrder);
    }
    if (DisplayOrder == null) {
        logger.error(&quot;DisplayOrder Mapping is not available&quot;);
        return null;
    }		

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}





/*function getDisplayOrderMapping(orgName,displayOrder) {

var VistaDisplayOrderMapping = [{&quot;OrgName&quot;:&quot;VHACHYQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHASLCQA&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]},
{&quot;OrgName&quot;:&quot;VHAALNDEV&quot;,&quot;Mapping&quot;:[{&quot;ACTIVITY&quot;:&quot;14&quot;,&quot;ALL SERVICES&quot;:&quot;1&quot;,&quot;ALLERGIES&quot;:&quot;43&quot;,&quot;ANATOMIC PATHOLOGY&quot;:&quot;24&quot;,&quot;ANGIO/NEURO/INTERVENTIONAL&quot;:&quot;32&quot;,&quot;AUTOPSY&quot;:&quot;27&quot;,&quot;BLOOD BANK&quot;:&quot;23&quot;,&quot;BLOOD COMPONENTS&quot;:&quot;50&quot;,&quot;BLOOD PRODUCTS&quot;:&quot;66&quot;,&quot;CARDIOLOGY STUDIES (NUC MED)&quot;:&quot;33&quot;,&quot;CARDIOPULMONARY&quot;:&quot;5238&quot;,&quot;CARDIOPULMONARY INPT ORDERS&quot;:&quot;68&quot;,&quot;CARDIOVERSION&quot;:&quot;69&quot;,&quot;CHEMISTRY&quot;:&quot;6&quot;,&quot;CLINIC INFUSIONS&quot;:&quot;67&quot;,&quot;CLINIC MEDICATIONS&quot;:&quot;51&quot;,&quot;CLINIC ORDERS&quot;:&quot;62&quot;,&quot;CLINIC SCHEDULING&quot;:&quot;280&quot;,&quot;CONDITION&quot;:&quot;45&quot;,&quot;CONSULTS&quot;:&quot;11&quot;,&quot;CPL&quot;:&quot;5239&quot;,&quot;CT SCAN&quot;:&quot;30&quot;,&quot;CYTOLOGY&quot;:&quot;28&quot;,&quot;DIAGNOSIS&quot;:&quot;44&quot;,&quot;DIAGNOSTIC TESTS&quot;:&quot;65&quot;,&quot;DIET ADDITIONAL ORDERS&quot;:&quot;40&quot;,&quot;DIET ORDERS&quot;:&quot;38&quot;,&quot;DIETETIC CONSULTS&quot;:&quot;47&quot;,&quot;DIETETICS&quot;:&quot;10&quot;,&quot;DISCHARGE MEDS&quot;:&quot;281&quot;,&quot;EARLY/LATE TRAYS&quot;:&quot;41&quot;,&quot;ELECTRON MICROSCOPY&quot;:&quot;25&quot;,&quot;GENERAL RADIOLOGY&quot;:&quot;9&quot;,&quot;HEMATOLOGY&quot;:&quot;7&quot;,&quot;IMAGING&quot;:&quot;29&quot;,&quot;INPATIENT MEDICATIONS&quot;:&quot;3&quot;,&quot;IV MEDICATIONS&quot;:&quot;22&quot;,&quot;LABORATORY&quot;:&quot;5&quot;,&quot;LIFE-SUSTAINING TREATMENT&quot;:&quot;53&quot;,&quot;M.A.S.&quot;:&quot;17&quot;,&quot;MAGNETIC RESONANCE IMAGING&quot;:&quot;31&quot;,&quot;MAMMOGRAPHY&quot;:&quot;37&quot;,&quot;MICROBIOLOGY&quot;:&quot;8&quot;,&quot;NON-VA MEDICATIONS&quot;:&quot;48&quot;,&quot;NUCLEAR MEDICINE&quot;:&quot;34&quot;,&quot;NURSING&quot;:&quot;13&quot;,&quot;ORDER ENTRY/RESULTS REPORTING&quot;:&quot;19&quot;,&quot;OTHER HOSPITAL SERVICES&quot;:&quot;18&quot;,&quot;OUTPATIENT MEALS&quot;:&quot;49&quot;,&quot;OUTPATIENT MEDICATIONS&quot;:&quot;4&quot;,&quot;PARENTERAL NUTRITION&quot;:&quot;61&quot;,&quot;PHARMACY&quot;:&quot;2&quot;,&quot;PHARMACY UAP&quot;:&quot;282&quot;,&quot;PRECAUTIONS&quot;:&quot;46&quot;,&quot;PROCEDURES&quot;:&quot;42&quot;,&quot;PT/OT/RT&quot;:&quot;63&quot;,&quot;SUMMARY ORDER&quot;:&quot;16&quot;,&quot;SUPPLIES/DEVICES&quot;:&quot;20&quot;,&quot;SURGERY&quot;:&quot;15&quot;,&quot;SURGICAL PATHOLOGY&quot;:&quot;26&quot;,&quot;TUBEFEEDINGS&quot;:&quot;39&quot;,&quot;ULTRASOUND&quot;:&quot;35&quot;,&quot;UNIT DOSE MEDICATIONS&quot;:&quot;21&quot;,&quot;VASCULAR LAB&quot;:&quot;36&quot;,&quot;VITALS/MEASUREMENTS&quot;:&quot;12&quot;}]}];

	
globalMap.put(&quot;VistaDisplayOrderMapping&quot;, VistaDisplayOrderMapping);
	var DisplayOrder=  globalMap.get(&apos;VistaDisplayOrderMapping&apos;);

	 for (var i = 0; i&lt;DisplayOrder.length ; i++)
	{
	 	var c_orgName = DisplayOrder[i][&apos;OrgName&apos;].toString();
		// To Verify the Org Name
		if (c_orgName.toUpperCase()==orgName.toUpperCase())
		{
		//To get the Display Order ID from Config based on Input Parameter value
 		return  DisplayOrder[i][&apos;Mapping&apos;][0][displayOrder];
 
		}
		
	}  

	return res;
}*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>9b3612a4-cd52-4682-aa56-ea129cd76ba6</id>
                <name>ED Disposition</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538750</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getDisposition(dispositionid) {

	var DispositionMap = globalChannelMap.get(&apos;DispositionMap&apos;);
    if (DispositionMap == null) {
       DispositionMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DisPositionMapping.json&quot;));
        logger.debug(&apos;Disposition Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;DispositionMap&apos;, DispositionMap);
    }
    if (DispositionMap == null) {
        logger.error(&quot;Disposition Mapping is not available&quot;);
        return null;
    }		
 
for (var DispositionKey in DispositionMap) {
	      var disposition = DispositionMap[DispositionKey];
	      if (disposition &amp;&amp; disposition.num == dispositionid) {
	          return disposition.Disposition;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b3f5f321-a8e5-4979-b694-4d12dbd82cb0</id>
                <name>Exceute Post Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538805</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Post Request

	@param {String} URL - web service url of corey server
	@param {String} request - Json 
	@return {String} returns the resultant json 
*/
function executePostRequest(URL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var coreyServer = object.cmnExecutePost(URL, request);
	var json = object.cmnGetJSON(coreyServer);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ed1e2751-9c1a-4c3a-b898-1cca1170c192</id>
                <name>Execute Get Method</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538906</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
/**
	Function to execute HTTP Get Request

	@param {String} URL - web service url of corey server
	@return {String} returns the resultant json 
*/
function executeGetRequest(URL){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var ServerResponse = object.cmnExecuteGet(URL);
	var json = object.cmnGetJSON(ServerResponse);
	return json;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>3c156781-10b5-4677-9e80-0a18c10ed0fc</id>
                <name>Forms Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539125</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Methods &amp; configurations to supports forms mappings
*/
function loadFormsConfiguration() {
    var configFilePath = &apos;C:/MirthConfig/VistAFormsConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));
    globalMap.put(&apos;VistAFormsConfig&apos;, map);
    return map;
}

function GetVistAForm(coreyViewName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.CoreyName.toUpperCase() == coreyViewName.toUpperCase()) {
            return masterItem;
        }
    }
}
function GetCoreyForm(VistaName) {
    var map = globalMap.get(&apos;VistAFormsConfig&apos;) || loadFormsConfiguration();
    for (var key in map.Forms) {
        var masterItem = map.Forms[key];
        if (masterItem.VistaName.toUpperCase() == VistaName.toUpperCase()){// &amp;&amp; masterItem.FormIEN == vistaFormIEN) {
            return masterItem;
        }
    }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e7e29397-fcc4-4d09-b7ad-118edfc1a412</id>
                <name>Get Corey Server Token</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539149</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} baseURL - web service url of corey server
	@param {String} request - Json having the site details
	@return {String} return description Token generated from the authentication of Corey server
*/
function getCoreyAuthToken2222(baseURL, request){
	var object = Packages.com.vista.client.CMNVistAHttpClient;
	var url = baseURL + &quot;/RegisterDeviceid_s.aspx&quot;;
	var auth = object.cmnExecutePost(url, request);
	var decrypt = decryptAES(auth,baseURL);
	var json = object.cmnGetJSON(decrypt);
	var parsedJSON = JSON.parse(json);
	return parsedJSON[&apos;token&apos;];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b31e76bc-9661-4655-8baf-d2d6d45706cc</id>
                <name>Get Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538766</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
var DBCon = &quot;null&quot;;



//function to make Database Connection
function OpenDBCon()
{
	try
	{
		return DBCon = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName,DBDSNName,DBUserID,DBPassword); 
	} catch(err)
	{
		logger.error(&quot;Database Is Down At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
		return false;
	}
}

/**
	CloseDBCon

	@param {String} DBCon
*/
function CloseDBCon() //DB Connection Close
{
	try
	{
		DBCon.close();
	} catch(err)
	{
		logger.error(&quot;Exception In Closing Database - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	}
}

/**
	executeSelectQuery

	@param {String} SQLString
	@param {String} DBConn
	@return ResultSet
*/
function executeSelectQuery(SQLString){ //select query execution for fetching the data from DB
	try {
		DBConn = OpenDBCon();
		var ResultSet = DBConn.executeCachedQuery(SQLString);
	} catch(err){
		logger.error(&quot;Error occurred while executing select statement &quot;+ SQLString + &quot; At - &quot;+ DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
	} finally {
		if (DBConn) {
			CloseDBCon();
		}
	}
	return ResultSet;
}

function getVistAPatientID(coreyPatientID,Org_Name) {  // function for getting the vista pat id from DB using corey pat ID
	var SQLString = &quot;SELECT [EXTSystemPatientID]  AS VistaPatientID, [ID] AS FK_PATIENTID FROM [CMNPatientMapping] WHERE [CoreyPatientID] = &apos;&quot;+ coreyPatientID +&quot;&apos; and [EXTSystem] = &apos;Vista&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;;
	channelMap.put(&quot;SELECTSQL&quot;, SQLString) // changed [VistaPatientID] to [EXTSystemPatientID]
	var resultSet = executeSelectQuery(SQLString);  
	while(resultSet.next()){
		var VistaPtID = resultSet.getString(&quot;VistaPatientID&quot;);
		fkPatientId = resultSet.getString(&quot;FK_PATIENTID&quot;);
		channelMap.put(&quot;VistaPatientID&quot;, VistaPtID);
		
		}
		return (VistaPtID &amp;&amp; VistaPtID != &apos;null&apos;) ? VistaPtID : &quot;&quot;;	
}
function getPatientID(patientID, Message_Control_Id,Org_Name) {
    var coreyPatId = &quot;&quot;
    if (patientID) {
        var SQLString = &quot;Select [CoreyPatientID] AS CoreyPatientID from CMNPatientMapping where [EXTSystemPatientID] = &apos;&quot; + patientID + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNPatientMapping&quot;, SQLString);
        //coreyPatId = executeScalar(SQLString);
        
        var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
		
    }
   
    if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0) &amp;&amp; Message_Control_Id) {
        var SQLString = &quot;SELECT [Patient_Id] as CoreyPatientID FROM CMN_Corey_Org WHERE [Message_Control_Id] = &apos;&quot; + Message_Control_Id + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + Org_Name + &quot;&apos;&quot;; // changed [VistaPatientID] to [EXTSystemPatientID] 
        channelMap.put(&quot;getPatientID_CMNCoreyOrg&quot;, SQLString);
         var resultSet = executeSelectQuery(SQLString);  
        while(resultSet.next()){
		coreyPatId = resultSet.getString(&quot;CoreyPatientID&quot;);
		channelMap.put(&quot;coreyPatId&quot;, coreyPatId);
		
		}
       
        
    }
	  if ((coreyPatId == null || typeof coreyPatId == &apos;undefined&apos; || coreyPatId.trim().length &lt;= 0)) {
	  	coreyPatId=&quot;0000&quot;;
	  }
    return coreyPatId;
}
function getrequestUser(msgControlId) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);
        channelMap.put(&quot;PROVIDER&quot;, reqUser);
    }
    return reqUser;
}
function getrequestUser(msgControlId,org_name) {
    SQLString = &quot;SELECT [provider] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + org_name + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var reqUser = resultSet.getString(&quot;PROVIDER&quot;);        
    }
    return reqUser;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>24ca9d64-8aae-44dd-8b49-7a55c2d51ee4</id>
                <name>get Token from org table</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538887</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gettokenName(msgControlId) {
    SQLString = &quot;SELECT [Token] FROM [dbo].[CMN_Corey_Org] WHERE [Message_Control_Id] = &apos;&quot; + msgControlId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
      channelMap.put(&quot;SELECTSQL&quot; + msgControlId, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var token = resultSet.getString(&quot;TOKEN&quot;);
        channelMap.put(&quot;VIEW_NAME&quot;, token);
    }
    return token;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7013e5b9-ca95-430a-b8fd-c90d5d50c75a</id>
                <name>getAnonymizeName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539305</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function for Anonymizing the patient Name.

	@param {String} patientName - Value of patient name
	@param {String} nameType - Name format &apos;last,first&apos; or &apos;last&apos;
	@return {String} return anonymizedName 
*/
function getAnonymizeName (patientName, nameType) {
	var anonymizedName = &quot;&quot;;
	if(nameType == &apos;last,first&apos;){
		var name = patientName.split(&apos;,&apos;);
		anonymizedName = name[0].substring(0,3);
		anonymizedName = anonymizedName + &apos;,&apos; + name[1].substring(0,1);
	} else if (nameType == &apos;last&apos;) {
		anonymizedName = patientName.substring(0,3);
	} else {
		anonymizedName = patientName.substring(0,1);
	}
	channelMap.put(&quot;anonymizedName&quot;,anonymizedName);
	return anonymizedName;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>2bca48ad-e379-4f25-a66b-ab3df52e73cf</id>
                <name>H-Loc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539021</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHospitalLocation(timevalue) {
	var hLoc=&quot;&quot;;
     if (timevalue &lt;=0800) {
		hLoc= &quot;32&quot;
     } else if (timevalue &lt;=1600) {
		hLoc=&quot;33&quot;
     } else {
		hLoc=&quot;34&quot;
     }
     return hLoc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>881a9ddb-5783-4bd4-a4dc-8e13d004436b</id>
                <name>Hospital Location</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539275</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function gethospitallocmap() {
    var HOSPITALLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALLOCATIONMAPPING&apos;);
    if (HOSPITALLOCATIONMAPPING == null) {
        HOSPITALLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Hospital_LocationMapping.json&quot;));
        logger.debug(&apos;HOSPITALLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALLOCATIONMAPPING&apos;, APPLocationMap);
    }
    if (HOSPITALLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALLOCATION Mapping is not available&quot;);
        return null;
    }
}

function GetHospitalLocationForVistA(coreyCode) {
	gethospitallocmap();
    for (var reasonKey in HOSPITALLOCATIONMAPPING) {
        var reason = HOSPITALLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.location;
        }
    }
    return &quot;&quot;; // Default Value
}


function GetHospitalEDLocationForVistA(locName) {
	
	var HOSPITALEDLOCATIONMAPPING = globalChannelMap.get(&apos;HOSPITALEDLOCATIONMAPPING&apos;);
    if (HOSPITALEDLOCATIONMAPPING == null) {
        HOSPITALEDLOCATIONMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/HospitalEDLocMapping.json&quot;));
        logger.debug(&apos;HOSPITALEDLOCATION Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;HOSPITALEDLOCATIONMAPPING&apos;, HOSPITALEDLOCATIONMAPPING);
    }
    if (HOSPITALEDLOCATIONMAPPING == null) {
        logger.error(&quot;HOSPITALEDLOCATIONMAPPING is not available&quot;);
        return null;
    }		

    for (var reasonKey in HOSPITALEDLOCATIONMAPPING) {
        var reason = HOSPITALEDLOCATIONMAPPING[reasonKey];
        if (reason &amp;&amp; reason.location == locName) {
            return reason.EHRFieldId;
        }
    }
    return &quot;&quot;; // Default Value
}

function getHosplocationbasedontime(dtime) {
	var hloc=&quot;&quot;;
	if (dtime &lt;=0800) {
		   	hLoc= &quot;32&quot;
		   	} else if (dtime &lt;=1600) {
		   		hLoc=&quot;33&quot;
		   		} else {
		   			hLoc=&quot;34&quot;
		   			}
		   return hloc;
	
	}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>7e6ec7a1-5520-4f37-be1e-658e873198de</id>
                <name>Immunization Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538842</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Immunization Dosage Unit ForVistA
*/
function GetImmunizationDosageUnitForVistA(strCoreyCode) {
	var unitMap = globalChannelMap.get(&apos;unitMap&apos;);
    if (unitMap == null) {
       unitMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/DosageUnitMapping.json&quot;));
        logger.debug(&apos;unit Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;unitMap&apos;, unitMap);
    }
    if (unitMap == null) {
        logger.error(&quot;unit Mapping is not available&quot;);
        return null;
    }		
		for (var unitKey in unitMap) {
	      var unit = unitMap[unitKey];
	      if (unit &amp;&amp; unit.CoreyCode == strCoreyCode) {
	          return unit.IEN;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ec54c9e9-7b1b-49ac-a0e5-275aafaf7800</id>
                <name>Lab Order Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538785</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*function getlaboftenmap() {
    var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
}*/

function GetOftenForVistA(strCoreyCode) { 
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }   
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
	      if (Often &amp;&amp; Often.IEN == strCoreyCode) {
	          return Often.Often;
	      }
	  }
	  return &apos;&apos;;
}
function GetOftenForCorey(description) {
	var OftenMap = globalChannelMap.get(&apos;OftenMap&apos;);
    if (OftenMap == null) {
        OftenMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Lab_OftenMapping.json&quot;));
        logger.debug(&apos;Often Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;OftenMap&apos;, OftenMap);
    }
    if (OftenMap == null) {
        logger.error(&quot;Often Mapping is not available&quot;);
        return null;
    }
		for (var OftenKey in OftenMap) {
	      var Often = OftenMap[OftenKey];
	      if (Often &amp;&amp; Often.Often == description) {
	          return Often.IEN;
	      }
	  }
	  return &apos;&apos;;
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>901e4fe3-78a5-4273-952b-9ed314a493b9</id>
                <name>Lab result date formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539077</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>//&quot;01/29/2023 09:20&quot; and &quot;01/29/2023&quot; to the &quot;YYYYMMDDHHMMSS&quot; format
function formatDateLSF(dateString) {
  const dateParts = dateString.split(/[\s/:]/); // split into parts using regex
 const dateObj = new Date(dateParts[2] + &apos;-&apos; + dateParts[0] + &apos;-&apos; + dateParts[1] + &apos;T&apos; + dateParts[3] + &apos;:&apos; + dateParts[4]);
   var formattedDate=&quot;&quot;;
  if (dateParts.length === 5) {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + dateObj.getHours().toString().padStart(2, &apos;0&apos;) + dateObj.getMinutes().toString().padStart(2, &apos;0&apos;) + dateObj.getSeconds().toString().padStart(2, &apos;0&apos;);
  } else {
    formattedDate = dateObj.getFullYear().toString().padStart(4, &apos;0&apos;) + (dateObj.getMonth()+1).toString().padStart(2, &apos;0&apos;) + dateObj.getDate().toString().padStart(2, &apos;0&apos;) + &apos;000000&apos;;
  }

  return formattedDate;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>00186681-e251-49fd-acec-804362cd3c52</id>
                <name>Medication Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538676</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Get Medication Mapping for Vista and Corey

    @param {Any} coreyCode - 
    @return {Any} 
*/

function GetMedicationForVistA(coreyCode) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.COREYID == coreyCode) {
        		
            return medication;
        }
    }
}

function GetMedicationForCorey(vistaIEN) {
    var medicationMap = globalChannelMap.get(&apos;medicationMap&apos;);
    if (medicationMap == null) {
        medicationMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/MedicationMapping.json&quot;));
        logger.debug(&apos;Medication Map loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationMap&apos;, medicationMap);
    }
    if (medicationMap == null) {
        logger.error(&quot;Medication Mapping is not available&quot;);
        return null;
    }
    for (var medicationKey in medicationMap) {
        var medication = medicationMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedroutemap() {
    var medicationRouteMap = globalChannelMap.get(&apos;medicationRouteMap&apos;);
    if (medicationRouteMap == null) {
        medicationRouteMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_Route_Mapping.json&quot;));
        logger.debug(&apos;medicationRoute Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationRouteMap&apos;, medicationRouteMap);
    }
    if (medicationRouteMap == null) {
        logger.error(&quot;medicationRoute Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationRouteForVistA(coreyCode) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationRouteForCorey(vistaIEN) {
	getmedroutemap();
    for (var medicationKey in medicationRouteMap) {
        var medication = medicationRouteMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getmedprimap() {
    var medicationPriorityMap = globalChannelMap.get(&apos;medicationPriorityMap&apos;);
    if (medicationPriorityMap == null) {
        medicationPriorityMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/Medication_PriorityMapping.json&quot;));
        logger.debug(&apos;medicationPriority Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;medicationPriority Mapping&apos;, medicationPriorityMap);
    }
    if (medicationPriorityMap == null) {
        logger.error(&quot;medicationPriority Mapping is not available&quot;);
        return null;
    }
}

function GetMedicationPriorityForVistA(coreyCode) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationPriorityForCorey(vistaIEN) {
	 getmedprimap();
    for (var medicationKey in medicationPriorityMap) {
        var medication = medicationPriorityMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

var medicationScheduleMap = [];

function GetMedicationScheduleForVistA(coreyCode) {

    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationScheduleForCorey(vistaIEN) {
    for (var medicationKey in medicationScheduleMap) {
        var medication = medicationScheduleMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

// ------------------------------------------------------------------

var medicationDosageMap = [];
function GetMedicationDosageForVistA(coreyCode) {

    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.Name == coreyCode) {
            return medication;
        }
    }
}

function GetMedicationDosageForCorey(vistaIEN) {
    for (var medicationKey in medicationDosageMap) {
        var medication = medicationDosageMap[medicationKey];
        if (medication &amp;&amp; medication.IEN == vistaIEN) {
            return medication;
        }
    }
}

function getCoreyPatientMedicationDataRecordID(sVistAEntityId) {
    SQLString = &quot;SELECT [CoreyEntityID] FROM [dbo].[CMN_PatientData_MedicationMapping] WHERE [VistAEntityId] = &apos;&quot; + sVistAEntityId + &quot;&apos;&quot; + &quot; AND Org_Name = &apos;&quot; + channelMap.get(&apos;orgname&apos;) + &quot;&apos;&quot;;
    channelMap.put(&quot;SELECTSQL&quot;, SQLString);
    var resultSet = executeSelectQuery(SQLString);
    while (resultSet.next()) {
        var sCoreyEntityID = resultSet.getString(&quot;CoreyEntityID&quot;);
        channelMap.put(&quot;CoreyEntityID&quot;, sCoreyEntityID);
    }
    return sCoreyEntityID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>8751d69f-2a6a-406b-aa40-ba423c334fb9</id>
                <name>OR FORM MAPPINGS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539197</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getformcaremap() {
    var FORMPLANPOSTCAREMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTCAREMAPPING&apos;);
    if (FORMPLANPOSTCAREMAPPING == null) {
       FORMPLANPOSTCAREMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostCareMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTCARE Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTCAREMAPPING&apos;, FORMPLANPOSTCAREMAPPING);
    }
    if (FORMPLANPOSTCAREMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTCARE Mapping is not available&quot;);
        return null;
    }
}

function GetPlannedPostCareForVistA(coreyCode) {
	 getformcaremap();
    for (var reasonKey in FORMPLANPOSTCAREMAPPING) {
        var reason = FORMPLANPOSTCAREMAPPING[reasonKey];
        if (reason &amp;&amp; reason.EHRFieldId == coreyCode) {
            return reason.disposition;
        }
    }
    return &quot;&quot;; // Default Value
}

function gettimeoutcheckmap() {
    var TIMEOUTCHECKLISTMAPPINGS = globalChannelMap.get(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;);
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
       TIMEOUTCHECKLISTMAPPINGS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TimeOutCheckMapping.json&quot;));
        logger.debug(&apos;TIMEOUTCHECKLIST Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;TIMEOUTCHECKLISTMAPPINGS&apos;, TIMEOUTCHECKLISTMAPPINGS);
    }
    if (TIMEOUTCHECKLISTMAPPINGS == null) {
        logger.error(&quot;TIMEOUTCHECKLIST Mapping is not available&quot;);
        return null;
    }
}
function GetTimeOutChecklistForVistA(coreyCode) {
	 gettimeoutcheckmap();
    for (var reasonKey in TIMEOUTCHECKLISTMAPPINGS) {
        var reason = TIMEOUTCHECKLISTMAPPINGS[reasonKey];
        if (reason &amp;&amp; reason.COREYVALUE == coreyCode) {
            return reason.VISTAVALUE;
        }
    }
    return &quot;&quot;; // Default Value
}

function getpostskinmap() {
    var FORMPLANPOSTSKININTERMAPPING = globalChannelMap.get(&apos;FORMPLANPOSTSKININTERMAPPING&apos;);
    if (FORMPLANPOSTSKININTERMAPPING == null) {
       FORMPLANPOSTSKININTERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/FormPlanPostSkinMapping.json&quot;));
        logger.debug(&apos;FORMPLANPOSTSKININTER Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;FORMPLANPOSTSKININTERMAPPING&apos;, FORMPLANPOSTSKININTERMAPPING);
    }
    if (FORMPLANPOSTSKININTERMAPPING == null) {
        logger.error(&quot;FORMPLANPOSTSKININTER Mapping is not available&quot;);
        return null;
    }
} 

function GetPlannedPostSkinIntForVistA(coreyCode) {
	getpostskinmap();
    for (var reasonKey in FORMPLANPOSTSKININTERMAPPING) {
        var reason = FORMPLANPOSTSKININTERMAPPING[reasonKey];
        if (reason &amp;&amp; reason.skincode == coreyCode) {
            return reason.skinid;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>a2a4bd70-050c-4c38-9858-ddb41c8ca674</id>
                <name>Problems Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538551</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get Problem ForVistA
*/
function GetProblemForVistA(icdCode) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.ICD_Code == icdCode) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}

function GetProblemFromIEN(ien) {
	var problemMap = globalChannelMap.get(&apos;problemMap&apos;);
    if (problemMap == null) {
        problemMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/ProblemIENMapping.json&quot;));
        logger.debug(&apos;problem Mapping loaded successfully&apos;);
        globalChannelMap.put(&apos;problemMap&apos;, problemMap);
    }
    if (problemMap == null) {
        logger.error(&quot;problemMap is not available&quot;);
        return null;
    }		
		for (var problemKey in problemMap) {
	      var problem = problemMap[problemKey];
	      if (problem &amp;&amp; problem.IEN == ien) {
	          return problem;
	      }
	  }
	  return &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>ba37b341-a383-458e-a0c8-e1d30df392d3</id>
                <name>Provider mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538307</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get VistA - Corey Provider Mapping
*/
function GetVistAProviderId(organizationName, coreyProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	//vistaProviderMap==null
	 //vistaProviderMap = ReadCoreyVistAProviderMapping();
	 //globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	//vistaProviderMap = ReadCoreyVistAProviderMapping();
	if(vistaProviderMap == null){
		//logger.info(&quot;ReadCoreyVistAProviderMapping&quot;);
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
 
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	  		channelMap.put(&quot;prov&quot;,organizationName);
	        if ((provider &amp;&amp; provider.Org_Name.toUpperCase() == organizationName.toUpperCase()) &amp;&amp; (provider.CoreyProviderId == coreyProviderId)) {
	            return provider.VistaProviderId;
	           
	        }
	        
	    }
	    if (provider.CoreyProviderId == &quot;&quot;) {
	        	var SQLString = &quot;SELECT [VistaProviderId] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and CoreyProviderId=&quot;+ coreyProviderId;
	        	 VistaProviderId = executeScalar(SQLString);	        	
	        	if (VistaProviderId != &quot;null&quot; &amp;&amp; (VistaProviderId!=&quot;&quot;)) {
	        		return VistaProviderId;
	        		} else {
	        			return &quot;&quot;
	        			}
	        	}
   return &quot;&quot;
}

function GetCoreyProviderId(organizationName, vistAProviderId) {
	var vistaProviderMap = globalMap.get(&apos;VistAProviderMap&apos;);
	if(vistaProviderMap == null){
		vistaProviderMap = ReadCoreyVistAProviderMapping();
		globalMap.put(&apos;VistAProviderMap&apos;, vistaProviderMap);
	}
		    
	for (var providerKey in vistaProviderMap) {
	        var provider = vistaProviderMap[providerKey];
	        if (provider &amp;&amp; provider.Org_Name == organizationName &amp;&amp; provider.VistaProviderId == vistAProviderId) {
	        	  return provider.CoreyProviderId;
	        }
	    }

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId]  FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+organizationName+&quot;&apos; and VistaProviderId=&quot;+ vistAProviderId ;
    logger.error(SQLString);

    try {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var resultSet = DBConn.executeCachedQuery(SQLString);
          
	if (resultSet) {
		while (resultSet.next()) {
			var CoreyProviderId = resultSet.getString(&quot;CoreyProviderId&quot;);
			 return CoreyProviderId;
			//logger.info(VistaPtID);
		}
	} else {
		channelMap.put(&apos;Missing Mapping Provider mapping not available&apos;);
	}

        }
     catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot;);
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }
    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }

    return null;
}



function ReadCoreyVistAProviderMapping() {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 &quot;;
 
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}


function ReadCoreyVistAProviderMappingforMissing(Org_Name,VistaID) {
    var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
    var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
    var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
    var DBPassword = configurationMap.get(&apos;DBPassword&apos;);

    var DBConn = &quot;null&quot;;
    var SQLString = &quot;SELECT [CoreyProviderId] ,[VistaProviderId], [Org_Name] FROM [CMN_Vista_ProviderMapping] WHERE [IsActive] = 1 and Org_Name=&apos;&quot;+Org_Name+&quot;&apos; and VistaProviderId=&quot;+ VistaID ;
    logger.info(SQLString);
    var providerMap = [];

    try {
        DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
        try {
            var results = DBConn.executeCachedQuery(SQLString);
            var resultSize = results.size();
            if (resultSize &gt; 0) {
            	logger.info(&quot;resultSize&quot;+ resultSize);
                for (var i = 0; i &lt; resultSize; i++) {
                    results.next();
                    providerMap.push({
                        &quot;CoreyProviderId&quot;: results.getString(1),
                        &quot;VistaProviderId&quot;: results.getString(2) != null ? results.getString(2) : &apos;&apos;,
                        &quot;Org_Name&quot;: results.getString(3)
                    });
                }
            }
        } catch (err) {
            logger.error(&quot;Error occurred while executing select statement &quot; + SQLString + &quot; At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        } finally {
            if (DBConn) {
                DBConn.close();
            }
        }

    } catch (err) {
        logger.error(&quot;Database Is Down At - &quot; + DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;));
        return null;
    }
    return providerMap;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>37c66ce5-0d4d-4ee3-a66c-3841491f29b3</id>
                <name>Radiology Modifiers</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538583</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>


function GetRadiologyModifier(vNAME) {
	// TODO: Enter code here

	var LISTOFMODIFIERS = globalChannelMap.get(&apos;LISTOFMODIFIERS&apos;);
    if (LISTOFMODIFIERS == null) {
        LISTOFMODIFIERS = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/RadiologyModifierMapping.json&quot;));
        logger.debug(&apos;LISTOFMODIFIERS loaded successfully&apos;);
        globalChannelMap.put(&apos;LISTOFMODIFIERS&apos;, LISTOFMODIFIERS);
    }
    if (LISTOFMODIFIERS == null) {
        logger.error(&quot;LISTOFMODIFIERS is not available&quot;);
        return null;
    }		
	
    for (var reasonKey in LISTOFMODIFIERS) {
        var reason = LISTOFMODIFIERS[reasonKey];
        if (reason &amp;&amp; reason.Modifier == vNAME) {
            return reason.IEN;
        }
    }
    return &quot;&quot;; // Default Value
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>afeb05f6-cd12-4559-9717-d6b6ceed4233</id>
                <name>Specialty Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538698</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVistASpecialty(organizationName, CoreySubSpecialtyID) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        if (specialty &amp;&amp; (specialty.Corey_SubSpecialtyId == CoreySubSpecialtyID)){
	            return specialty.Ext_SubSpecialtyIEN;
	        }
	    }
    return null;
}

function GetCoreySpecialty(organizationName, vistAValue) {
	var VistASpecialtyMap = globalMap.get(organizationName + &apos;_VistASpecialtyMap&apos;);
	//VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
	//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	//if(VistASpecialtyMap == null)
     if(VistASpecialtyMap == null || (VistASpecialtyMap == &apos;undefined&apos;)){
		VistASpecialtyMap = GetSpecialtyMappingFromDB(organizationName);
		//globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
		globalMap.put(organizationName + &apos;_VistASpecialtyMap&apos;, VistASpecialtyMap);
	}
	for (var providerKey in VistASpecialtyMap) {
	        var specialty = VistASpecialtyMap[providerKey];
	        //if (specialty &amp;&amp; specialty.Org_Name == organizationName &amp;&amp; specialty.Ext_SubSpecialtyIEN == vistAValue) 
	        if (specialty &amp;&amp; (specialty.Ext_SubSpecialtyIEN == vistAValue)){
	            return [specialty.Corey_SpecialtyId,specialty.Corey_SubSpecialtyId];	           
	        }
	    }
    return null;
}

function GetSpecialtyMappingFromDB(orgName) {
	var DBDriverName = configurationMap.get(&apos;DBDriverName&apos;);
	var DBDSNName = configurationMap.get(&apos;DBDSNName&apos;);
	var DBUserID = configurationMap.get(&apos;DBUserName&apos;);
	var DBPassword = configurationMap.get(&apos;DBPassword&apos;);
	try {
		//var SQLString = &quot;SELECT [Corey_SpecialtyId] ,[Corey_SubSpecialtyId],[Ext_SubSpecialtyIEN], [Org_Name] FROM [SpecialtyMapping] WHERE  Org_Name=&apos;&quot;+Org_Name+&quot;&apos;&quot;;
   
		var specialtyMappingSQL = &quot;SELECT * FROM [CoreyMappingDEV].[dbo].[SpecialtyMapping]&quot;;
		var SpecialtyMappingArray = [];
	    DBConn = DatabaseConnectionFactory.createDatabaseConnection(DBDriverName, DBDSNName, DBUserID, DBPassword);
	    try {
	        var results = DBConn.executeCachedQuery(specialtyMappingSQL);
	        var resultSize = results.size();
	        if (resultSize &gt; 0) {
	            for (var i = 0; i &lt; resultSize; i++) {
	                results.next();
	                SpecialtyMappingArray.push(
	                	{
	                		&quot;Corey_SpecialtyId&quot;: results.getString(2),
	                		&quot;Corey_SpecialtyName&quot;: results.getString(3),
	                		&quot;Corey_SubSpecialtyId&quot;: results.getString(4),
	                		&quot;Corey_SubSpecialtyName&quot;: results.getString(5),
	                		&quot;Ext_SubSpecialtyIEN&quot;: results.getString(6),
	                		&quot;Ext_SubSpecialtyName&quot;: results.getString(7),
	                		&quot;Ext_SystemName&quot;: results.getString(8),
	                		&quot;TAXONOMY_Code&quot;: results.getString(9),
	                		&quot;Org_Name&quot;: results.getString(10)
	                			                		
	                	}
	                );
	            }
	        }
	    } catch (err) {
	        logger.error(&quot;Error occurred while executing select statement &quot; + specialtyMappingSQL);
	    } finally {
	        if (DBConn) {
	            DBConn.close();
	        }
	    }
	    
	} catch (err) {
	    logger.error(&quot;Database Is Down At - &quot; + specialtyMappingSQL);
	    return false;
	}
	return SpecialtyMappingArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>1d183f63-2b70-4eb2-8a6b-0fe59ecee4ae</id>
                <name>Symptom Mapping</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539103</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	GetSymptomForVistA
*/
function GetSymptomForVistA(strCoreyCode) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.CoreyCode == strCoreyCode) {
	          return symptom.IEN;
	      }
	  }
	  return &apos;&apos;;
}
function GetSymptomForCorey(description) {

	var symptomMap = getSymptomMap();
		for (var symptomKey in symptomMap) {
	      var symptom = symptomMap[symptomKey];
	      if (symptom &amp;&amp; symptom.Symptom == description) {
	          return symptom.CoreyCode;
	      }
	  }
	  return &apos;&apos;;
}

function getSymptomMap(){
	var symptomMap = globalChannelMap.get(&apos;symptomMap&apos;);
    if (symptomMap == null) {
        symptomMap = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/SymptomMapping.json&quot;));
        logger.debug(&apos;symptomMap loaded successfully&apos;);
        globalChannelMap.put(&apos;symptomMap&apos;, symptomMap);
    }
    if (symptomMap == null) {
        logger.error(&quot;symptomMap is not available&quot;);
        return null;
    }	
	
	return symptomMap;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>01877e74-fb33-4fc6-86f2-a22261f3c690</id>
                <name>Template 2</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347539221</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function new_function1(arg1) {
	// TODO: Enter code here
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>71a6a551-d204-49fd-a40a-d291a8e55cb8</id>
                <name>TestDeployTemplate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538732</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Demo(arg1) {
	// TODO: Enter code here
	return 1
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>e3640c92-c209-4b37-8536-f698ac10002e</id>
                <name>TIU Note</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538715</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function getTIUINFO(vname) {
	var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_InfoMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	for (var TIUKey in TIUMAPPING) {
	      var TIUINFO = TIUMAPPING[TIUKey];
	      if (TIUINFO &amp;&amp; (TIUINFO.VIEWNAME == vname)){
	          return TIUINFO.VISTAIEN +&quot;^&quot;+TIUINFO.TITLE;
	      }
	     }
	     return &quot;&quot;
}

function getTIUDETAIL(viname) {		
 var TIUMAPPING = globalChannelMap.get(&apos;TIUMAPPING&apos;);
    if (TIUMAPPING == null) {
        TIUMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/TIU_DetailMapping.json&quot;));
        logger.debug(&apos;TIUMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;TIUMAPPING&apos;, TIUMAPPING);
    }
    if (TIUMAPPING == null) {
        logger.error(&quot;TIUMAPPING is not available&quot;);
        return null;
    }			
	
		for (var TIUKey in TIUMAPPING) {
	      var TIUDETAIL = TIUMAPPING[TIUKey];
	      if (TIUDETAIL &amp;&amp; (TIUDETAIL.VIEWNAME == viname)){
	          return TIUDETAIL.TITLE;
	      }
	     }
	     return &quot;&quot;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>93a7f1ad-0be2-4379-817c-72b933bc078a</id>
                <name>Vista Integration</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538353</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function GetVistaConfiguration(orgName) {
    var map = globalMap.get(&apos;IntegrationConfig&apos;);

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        if (masterItem.Org_Name.toUpperCase() == orgName.toUpperCase()) {
            //RefreshCoreyServerToken(masterItem);
            return masterItem;
        }
    }
}

function PutVistaCoreyConfigToGlobalM1ap() {
    // logger.debug(&apos;Inside PutVistaCoreyConfigToGlobalMap&apos;);
    var configFilePath = &apos;C:/MirthConfig/IntegrationConfig.json&apos;;
    var map = JSON.parse(ReadLocalFile(configFilePath));

    for (var key in map.CoreyServers) {
        var masterItem = map.CoreyServers[key];
        map.CoreyServers[key] = RefreshCoreyServerToken(masterItem, true);
    }
    globalMap.put(&apos;IntegrationConfig&apos;, map);
    globalMap.put(&apos;VistaMessageLogging&apos;, map.VistaServer.MessageLogging);
    globalMap.put(&apos;VistaWriteBack&apos;, map.VistaServer.WriteBack);
    return map;
}

function RefreshCoreyServerToken(orgObj, doNotUpdateMap) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	if(!doNotUpdateMap){
		doNotUpdateMap = false;
	}
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.token = token;
    orgObj.ExpirationSecond = now + 3600;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    if (doNotUpdateMap &amp;&amp; doNotUpdateMap == false) {
        var map = globalMap.get(&apos;IntegrationConfig&apos;); // || PutVistaCoreyConfigToGlobalMap();
        for (var key in map.CoreyServers) {
            var masterItem = map.CoreyServers[key];
            if (masterItem.Org_Name == orgObj.Org_Name) {
                map.CoreyServers[key] = orgObj;
            }
        }
        // logger.debug(&apos;map after RefreshCoreyServerToken&apos; + JSON.stringify(map));
        globalMap.put(&apos;IntegrationConfig&apos;, map);
    }
    return orgObj;
}

function generateAutotoken(orgObj) {
    // logger.debug(&apos;Inside RefreshCoreyServerToken for &apos; + orgObj.Org_Name);
	
    var now = DateUtil.getDate(&apos;yyyyMMddHHmmss&apos;, DateUtil.formatDate(&apos;yyyyMMddHHmmss&apos;, new java.util.Date())).getTime();

    // Check for time validity
    // if (orgObj &amp;&amp; orgObj.token &amp;&amp; orgObj.ExpirationSecond &gt; now) return orgObj;

    var baseURLKey = orgObj.BaseURL.toUpperCase(); //+ &quot;SERVERINTEGRATION_APPSTORE&quot;;
    // logger.debug(&apos;1. baseURLKey: &apos; + baseURLKey);
    var encrypted = orgObj.TokenRequest; // globalMap.get(&apos;VHACHY-CoreyTokenRequest&apos;);
    // logger.debug(&apos;2. encrypted: &apos; + encrypted);
    var object = Packages.com.vista.client.CMNVistAHttpClient;
    var url = baseURLKey + &quot;RegisterDeviceid_s.aspx&quot;;
    // logger.debug(&apos;3. url: &apos; + url);
    // var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;, &quot;&quot;);
    var auth = object.cmnExecutePost(url, encrypted, &quot;&quot;);
    var json = object.cmnGetJSON(auth);   
    // logger.debug(&apos;3. json: &apos; + json);
    var decrypt = decryptAES(json, baseURLKey);
    var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
    // logger.debug(serverJson);
    var parsedJSON = JSON.parse(serverJson);
    var token = parsedJSON[&apos;token&apos;];

    orgObj.tokenMirth = token;
    orgObj.ExpirationSecond = now + 36000;

    // logger.debug(orgObj.Org_Name + &apos; : &apos; + token);

    return token;
}


function ReadLocalFile(filePath) {
    var json = FileUtil.read(filePath);
    return json;
}

function createAckForError(coreyId, error, action, patientId, orgname) {
	var respJson = {};
	respJson.ViewName = &quot;VistaAckView&quot;;
	respJson.Action = action || &quot;SETTINGS&quot;;
	respJson.SystemName = &quot;Vista&quot;;
	respJson.PatientId = patientId || &quot;&quot;;
	respJson.Id = coreyId;
	respJson.CreatedForUsers = [];
	respJson.IdentifierForUpdate = &quot;&quot;;
	respJson.CreatedForUsers = [];
	respJson.ErrorCode = error.ErrorCode || &quot;0&quot;;
	respJson.ErrorDescription = error.ErrorDescription || &quot;&quot;;
	respJson.Data = [];
	channelMap.put(&apos;ErrorResponse&apos;, JSON.stringify(respJson));
	var orgObject = GetVistaConfiguration(orgname);
	sendCoreyResponse(orgObject, JSON.stringify(respJson));
}

function sendCoreyResponse(orgObject, jsonResponse) { // Sending Corey server response using token and API
	var coreySendCounter = 0;
	while (coreySendCounter &lt; 5) {
		var ServerURL = orgObject.BaseURL + &quot;RequestedDataFromMirth_s.aspx?token=&quot; + orgObject.token;
		// channelMap.put(&apos;CoreyServerURL&apos;, ServerURL);
		var utilityObject = Packages.com.vista.client.CMNVistAHttpClient;
		var encrypt = encryptAES(jsonResponse, orgObject.token);
		var ServerResponse = utilityObject.cmnExecutePost(ServerURL, encrypt, &quot;&quot;);
		var json = utilityObject.cmnGetJSON(ServerResponse);
		var decrypt = decryptAES(json, orgObject.token);
		var serverJson = new java.lang.String(decrypt, &apos;UTF-8&apos;);
		channelMap.put(&apos;CoreyServerResponse-Error&apos;, serverJson);
		var jsonObj = JSON.parse(serverJson);
		var code = jsonObj[&apos;Result&apos;][&apos;Code&apos;];
		if (code == 1000) { //if token is invalid, generate new token.
			RefreshCoreyServerToken(orgObject);
			coreySendCounter++;
			channelMap.put(&apos;coreySendCounter&apos;, coreySendCounter);
		} else {
			break;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.4.1">
                <id>b604002d-b028-4620-9f43-04268f61087e</id>
                <name>Vitals Qualifier</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706347538644</time>
                  <timezone>Asia/Calcutta</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>
function GetVitalsReadMap(QValue,vitaltype) {		
	var VITALSQUALIFIERMAPPING = globalChannelMap.get(&apos;VITALSQUALIFIERMAPPING&apos;);
    if (VITALSQUALIFIERMAPPING == null) {
        VITALSQUALIFIERMAPPING = JSON.parse(FileUtil.read(&quot;C:/MirthConfig/Mappings/VitalQualifierMapping.json&quot;));
        logger.debug(&apos;VITALSQUALIFIERMAPPING loaded successfully&apos;);
        globalChannelMap.put(&apos;VITALSQUALIFIERMAPPING&apos;, VITALSQUALIFIERMAPPING);
    }
    if (VITALSQUALIFIERMAPPING == null) {
        logger.error(&quot;VITALSQUALIFIERMAPPING is not available&quot;);
        return null;
    }	
		for (var qualifierKey in VITALSQUALIFIERMAPPING) {
	      var qualifier = VITALSQUALIFIERMAPPING[qualifierKey];
	      if (qualifier &amp;&amp; (qualifier.TYPE == vitaltype) &amp;&amp; (qualifier.QUALIFIER == QValue) ) {
	          return qualifier.FID;
	      }
	     }
	     return &quot;&quot;
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
  </channels>
</channelGroup>